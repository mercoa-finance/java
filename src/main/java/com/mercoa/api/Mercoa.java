/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.banklookup.BankLookupClient;
import com.mercoa.api.resources.calculate.CalculateClient;
import com.mercoa.api.resources.custompaymentmethodschema.CustomPaymentMethodSchemaClient;
import com.mercoa.api.resources.entity.EntityClient;
import com.mercoa.api.resources.entitygroup.EntityGroupClient;
import com.mercoa.api.resources.invoice.InvoiceClient;
import com.mercoa.api.resources.invoicetemplate.InvoiceTemplateClient;
import com.mercoa.api.resources.ocr.OcrClient;
import com.mercoa.api.resources.organization.OrganizationClient;
import com.mercoa.api.resources.paymentgateway.PaymentGatewayClient;
import com.mercoa.api.resources.paymentmethods.PaymentMethodsClient;
import com.mercoa.api.resources.transaction.TransactionClient;
import java.util.function.Supplier;

public class Mercoa {
    protected final ClientOptions clientOptions;

    protected final Supplier<EntityGroupClient> entityGroupClient;

    protected final Supplier<EntityClient> entityClient;

    protected final Supplier<InvoiceTemplateClient> invoiceTemplateClient;

    protected final Supplier<InvoiceClient> invoiceClient;

    protected final Supplier<OrganizationClient> organizationClient;

    protected final Supplier<BankLookupClient> bankLookupClient;

    protected final Supplier<CalculateClient> calculateClient;

    protected final Supplier<CustomPaymentMethodSchemaClient> customPaymentMethodSchemaClient;

    protected final Supplier<OcrClient> ocrClient;

    protected final Supplier<PaymentGatewayClient> paymentGatewayClient;

    protected final Supplier<PaymentMethodsClient> paymentMethodsClient;

    protected final Supplier<TransactionClient> transactionClient;

    public Mercoa(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.entityGroupClient = Suppliers.memoize(() -> new EntityGroupClient(clientOptions));
        this.entityClient = Suppliers.memoize(() -> new EntityClient(clientOptions));
        this.invoiceTemplateClient = Suppliers.memoize(() -> new InvoiceTemplateClient(clientOptions));
        this.invoiceClient = Suppliers.memoize(() -> new InvoiceClient(clientOptions));
        this.organizationClient = Suppliers.memoize(() -> new OrganizationClient(clientOptions));
        this.bankLookupClient = Suppliers.memoize(() -> new BankLookupClient(clientOptions));
        this.calculateClient = Suppliers.memoize(() -> new CalculateClient(clientOptions));
        this.customPaymentMethodSchemaClient =
                Suppliers.memoize(() -> new CustomPaymentMethodSchemaClient(clientOptions));
        this.ocrClient = Suppliers.memoize(() -> new OcrClient(clientOptions));
        this.paymentGatewayClient = Suppliers.memoize(() -> new PaymentGatewayClient(clientOptions));
        this.paymentMethodsClient = Suppliers.memoize(() -> new PaymentMethodsClient(clientOptions));
        this.transactionClient = Suppliers.memoize(() -> new TransactionClient(clientOptions));
    }

    public EntityGroupClient entityGroup() {
        return this.entityGroupClient.get();
    }

    public EntityClient entity() {
        return this.entityClient.get();
    }

    public InvoiceTemplateClient invoiceTemplate() {
        return this.invoiceTemplateClient.get();
    }

    public InvoiceClient invoice() {
        return this.invoiceClient.get();
    }

    public OrganizationClient organization() {
        return this.organizationClient.get();
    }

    public BankLookupClient bankLookup() {
        return this.bankLookupClient.get();
    }

    public CalculateClient calculate() {
        return this.calculateClient.get();
    }

    public CustomPaymentMethodSchemaClient customPaymentMethodSchema() {
        return this.customPaymentMethodSchemaClient.get();
    }

    public OcrClient ocr() {
        return this.ocrClient.get();
    }

    public PaymentGatewayClient paymentGateway() {
        return this.paymentGatewayClient.get();
    }

    public PaymentMethodsClient paymentMethods() {
        return this.paymentMethodsClient.get();
    }

    public TransactionClient transaction() {
        return this.transactionClient.get();
    }

    public static MercoaBuilder builder() {
        return new MercoaBuilder();
    }
}
