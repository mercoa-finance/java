/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organization;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.emaillogtypes.types.EmailLogResponse;
import com.mercoa.api.resources.organization.requests.GetEmailLogRequest;
import com.mercoa.api.resources.organization.requests.GetOrganizationRequest;
import com.mercoa.api.resources.organization.requests.InvalidateTokensRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawOrganizationClient {
    protected final ClientOptions clientOptions;

    public RawOrganizationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get current organization information
     */
    public MercoaHttpResponse<OrganizationResponse> get() {
        return get(GetOrganizationRequest.builder().build());
    }

    /**
     * Get current organization information
     */
    public MercoaHttpResponse<OrganizationResponse> get(GetOrganizationRequest request) {
        return get(request, null);
    }

    /**
     * Get current organization information
     */
    public MercoaHttpResponse<OrganizationResponse> get(GetOrganizationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("organization");
        if (request.getPaymentMethods().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentMethods", request.getPaymentMethods().get(), false);
        }
        if (request.getEmailProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "emailProvider", request.getEmailProvider().get(), false);
        }
        if (request.getExternalAccountingSystemProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "externalAccountingSystemProvider",
                    request.getExternalAccountingSystemProvider().get(),
                    false);
        }
        if (request.getColorScheme().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "colorScheme", request.getColorScheme().get(), false);
        }
        if (request.getPayeeOnboardingOptions().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "payeeOnboardingOptions",
                    request.getPayeeOnboardingOptions().get(),
                    false);
        }
        if (request.getPayorOnboardingOptions().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "payorOnboardingOptions",
                    request.getPayorOnboardingOptions().get(),
                    false);
        }
        if (request.getMetadataSchema().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadataSchema", request.getMetadataSchema().get(), false);
        }
        if (request.getNotificationEmailTemplate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "notificationEmailTemplate",
                    request.getNotificationEmailTemplate().get(),
                    false);
        }
        if (request.getRolePermissions().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "rolePermissions", request.getRolePermissions().get(), false);
        }
        if (request.getCustomDomains().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "customDomains", request.getCustomDomains().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrganizationResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    /**
     * Update current organization
     */
    public MercoaHttpResponse<OrganizationResponse> update() {
        return update(OrganizationRequest.builder().build());
    }

    /**
     * Update current organization
     */
    public MercoaHttpResponse<OrganizationResponse> update(OrganizationRequest request) {
        return update(request, null);
    }

    /**
     * Update current organization
     */
    public MercoaHttpResponse<OrganizationResponse> update(OrganizationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("organization")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrganizationResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public MercoaHttpResponse<EmailLogResponse> emailLog() {
        return emailLog(GetEmailLogRequest.builder().build());
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public MercoaHttpResponse<EmailLogResponse> emailLog(GetEmailLogRequest request) {
        return emailLog(request, null);
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public MercoaHttpResponse<EmailLogResponse> emailLog(GetEmailLogRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("organization/emailLog");
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get(), false);
        }
        if (request.getFrom().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "from", request.getFrom().get(), false);
        }
        if (request.getTo().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "to", request.getTo().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EmailLogResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public MercoaHttpResponse<Void> invalidateTokens() {
        return invalidateTokens(InvalidateTokensRequest.builder().build());
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public MercoaHttpResponse<Void> invalidateTokens(InvalidateTokensRequest request) {
        return invalidateTokens(request, null);
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public MercoaHttpResponse<Void> invalidateTokens(InvalidateTokensRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("organization/invalidateTokens")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }
}
