/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organization;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.emaillogtypes.types.EmailLogResponse;
import com.mercoa.api.resources.organization.notificationconfiguration.NotificationConfigurationClient;
import com.mercoa.api.resources.organization.requests.GetEmailLogRequest;
import com.mercoa.api.resources.organization.requests.GetOrganizationRequest;
import com.mercoa.api.resources.organization.requests.InvalidateTokensRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationResponse;
import java.util.function.Supplier;

public class OrganizationClient {
    protected final ClientOptions clientOptions;

    private final RawOrganizationClient rawClient;

    protected final Supplier<NotificationConfigurationClient> notificationConfigurationClient;

    public OrganizationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawOrganizationClient(clientOptions);
        this.notificationConfigurationClient =
                Suppliers.memoize(() -> new NotificationConfigurationClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawOrganizationClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get current organization information
     */
    public OrganizationResponse get() {
        return this.rawClient.get().body();
    }

    /**
     * Get current organization information
     */
    public OrganizationResponse get(GetOrganizationRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Get current organization information
     */
    public OrganizationResponse get(GetOrganizationRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Update current organization
     */
    public OrganizationResponse update() {
        return this.rawClient.update().body();
    }

    /**
     * Update current organization
     */
    public OrganizationResponse update(OrganizationRequest request) {
        return this.rawClient.update(request).body();
    }

    /**
     * Update current organization
     */
    public OrganizationResponse update(OrganizationRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).body();
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public EmailLogResponse emailLog() {
        return this.rawClient.emailLog().body();
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public EmailLogResponse emailLog(GetEmailLogRequest request) {
        return this.rawClient.emailLog(request).body();
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public EmailLogResponse emailLog(GetEmailLogRequest request, RequestOptions requestOptions) {
        return this.rawClient.emailLog(request, requestOptions).body();
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public void invalidateTokens() {
        this.rawClient.invalidateTokens().body();
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public void invalidateTokens(InvalidateTokensRequest request) {
        this.rawClient.invalidateTokens(request).body();
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public void invalidateTokens(InvalidateTokensRequest request, RequestOptions requestOptions) {
        this.rawClient.invalidateTokens(request, requestOptions).body();
    }

    public NotificationConfigurationClient notificationConfiguration() {
        return this.notificationConfigurationClient.get();
    }
}
