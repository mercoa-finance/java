/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organization.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvalidateTokensRequest.Builder.class)
public final class InvalidateTokensRequest {
    private final Optional<List<String>> sessionId;

    private final Map<String, Object> additionalProperties;

    private InvalidateTokensRequest(Optional<List<String>> sessionId, Map<String, Object> additionalProperties) {
        this.sessionId = sessionId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Optional list of session IDs to invalidate. If not provided, all sessions will be invalidated.
     */
    @JsonProperty("sessionId")
    public Optional<List<String>> getSessionId() {
        return sessionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvalidateTokensRequest && equalTo((InvalidateTokensRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvalidateTokensRequest other) {
        return sessionId.equals(other.sessionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sessionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> sessionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvalidateTokensRequest other) {
            sessionId(other.getSessionId());
            return this;
        }

        /**
         * <p>Optional list of session IDs to invalidate. If not provided, all sessions will be invalidated.</p>
         */
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public Builder sessionId(Optional<List<String>> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(List<String> sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        public InvalidateTokensRequest build() {
            return new InvalidateTokensRequest(sessionId, additionalProperties);
        }
    }
}
