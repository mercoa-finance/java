/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organization;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.emaillogtypes.types.EmailLogResponse;
import com.mercoa.api.resources.organization.notificationconfiguration.AsyncNotificationConfigurationClient;
import com.mercoa.api.resources.organization.requests.GetEmailLogRequest;
import com.mercoa.api.resources.organization.requests.GetOrganizationRequest;
import com.mercoa.api.resources.organization.requests.InvalidateTokensRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationRequest;
import com.mercoa.api.resources.organizationtypes.types.OrganizationResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncOrganizationClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawOrganizationClient rawClient;

    protected final Supplier<AsyncNotificationConfigurationClient> notificationConfigurationClient;

    public AsyncOrganizationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawOrganizationClient(clientOptions);
        this.notificationConfigurationClient =
                Suppliers.memoize(() -> new AsyncNotificationConfigurationClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawOrganizationClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get current organization information
     */
    public CompletableFuture<OrganizationResponse> get() {
        return this.rawClient.get().thenApply(response -> response.body());
    }

    /**
     * Get current organization information
     */
    public CompletableFuture<OrganizationResponse> get(GetOrganizationRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Get current organization information
     */
    public CompletableFuture<OrganizationResponse> get(GetOrganizationRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update current organization
     */
    public CompletableFuture<OrganizationResponse> update() {
        return this.rawClient.update().thenApply(response -> response.body());
    }

    /**
     * Update current organization
     */
    public CompletableFuture<OrganizationResponse> update(OrganizationRequest request) {
        return this.rawClient.update(request).thenApply(response -> response.body());
    }

    /**
     * Update current organization
     */
    public CompletableFuture<OrganizationResponse> update(OrganizationRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public CompletableFuture<EmailLogResponse> emailLog() {
        return this.rawClient.emailLog().thenApply(response -> response.body());
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public CompletableFuture<EmailLogResponse> emailLog(GetEmailLogRequest request) {
        return this.rawClient.emailLog(request).thenApply(response -> response.body());
    }

    /**
     * Get log of all emails sent to this organization. Content format subject to change.
     */
    public CompletableFuture<EmailLogResponse> emailLog(GetEmailLogRequest request, RequestOptions requestOptions) {
        return this.rawClient.emailLog(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public CompletableFuture<Void> invalidateTokens() {
        return this.rawClient.invalidateTokens().thenApply(response -> response.body());
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public CompletableFuture<Void> invalidateTokens(InvalidateTokensRequest request) {
        return this.rawClient.invalidateTokens(request).thenApply(response -> response.body());
    }

    /**
     * Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.
     */
    public CompletableFuture<Void> invalidateTokens(InvalidateTokensRequest request, RequestOptions requestOptions) {
        return this.rawClient.invalidateTokens(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncNotificationConfigurationClient notificationConfiguration() {
        return this.notificationConfigurationClient.get();
    }
}
