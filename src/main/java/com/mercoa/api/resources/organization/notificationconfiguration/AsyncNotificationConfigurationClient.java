/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organization.notificationconfiguration;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entitytypes.types.NotificationType;
import com.mercoa.api.resources.organizationtypes.types.NotificationConfigurationRequest;
import com.mercoa.api.resources.organizationtypes.types.NotificationConfigurationResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncNotificationConfigurationClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawNotificationConfigurationClient rawClient;

    public AsyncNotificationConfigurationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawNotificationConfigurationClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawNotificationConfigurationClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieve all notification configurations
     */
    public CompletableFuture<List<NotificationConfigurationResponse>> getAll() {
        return this.rawClient.getAll().thenApply(response -> response.body());
    }

    /**
     * Retrieve all notification configurations
     */
    public CompletableFuture<List<NotificationConfigurationResponse>> getAll(RequestOptions requestOptions) {
        return this.rawClient.getAll(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieve notification configuration for this notification type
     */
    public CompletableFuture<NotificationConfigurationResponse> get(NotificationType notificationType) {
        return this.rawClient.get(notificationType).thenApply(response -> response.body());
    }

    /**
     * Retrieve notification configuration for this notification type
     */
    public CompletableFuture<NotificationConfigurationResponse> get(
            NotificationType notificationType, RequestOptions requestOptions) {
        return this.rawClient.get(notificationType, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update notification configuration for this notification type
     */
    public CompletableFuture<NotificationConfigurationResponse> update(
            NotificationType notificationType, NotificationConfigurationRequest request) {
        return this.rawClient.update(notificationType, request).thenApply(response -> response.body());
    }

    /**
     * Update notification configuration for this notification type
     */
    public CompletableFuture<NotificationConfigurationResponse> update(
            NotificationType notificationType,
            NotificationConfigurationRequest request,
            RequestOptions requestOptions) {
        return this.rawClient.update(notificationType, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Reset notification configuration for this notification type
     */
    public CompletableFuture<Void> reset(NotificationType notificationType) {
        return this.rawClient.reset(notificationType).thenApply(response -> response.body());
    }

    /**
     * Reset notification configuration for this notification type
     */
    public CompletableFuture<Void> reset(NotificationType notificationType, RequestOptions requestOptions) {
        return this.rawClient.reset(notificationType, requestOptions).thenApply(response -> response.body());
    }
}
