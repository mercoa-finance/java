/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.calculate;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.calculate.types.CalculateFeesRequest;
import com.mercoa.api.resources.calculate.types.CalculatePaymentTimingRequest;
import com.mercoa.api.resources.calculate.types.CalculatePaymentTimingResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceFeesResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncCalculateClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawCalculateClient rawClient;

    public AsyncCalculateClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawCalculateClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawCalculateClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Calculate the estimated fees associated with an payment given the amount, payment source, and disbursement method. Can be used to calculate fees for a payment before creating an invoice.
     */
    public CompletableFuture<InvoiceFeesResponse> fee(CalculateFeesRequest request) {
        return this.rawClient.fee(request).thenApply(response -> response.body());
    }

    /**
     * Calculate the estimated fees associated with an payment given the amount, payment source, and disbursement method. Can be used to calculate fees for a payment before creating an invoice.
     */
    public CompletableFuture<InvoiceFeesResponse> fee(CalculateFeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.fee(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Calculate the estimated payment timing given the deduction date, payment source, and disbursement method. Can be used to calculate timing for a payment.
     */
    public CompletableFuture<CalculatePaymentTimingResponse> paymentTiming(CalculatePaymentTimingRequest request) {
        return this.rawClient.paymentTiming(request).thenApply(response -> response.body());
    }

    /**
     * Calculate the estimated payment timing given the deduction date, payment source, and disbursement method. Can be used to calculate timing for a payment.
     */
    public CompletableFuture<CalculatePaymentTimingResponse> paymentTiming(
            CalculatePaymentTimingRequest request, RequestOptions requestOptions) {
        return this.rawClient.paymentTiming(request, requestOptions).thenApply(response -> response.body());
    }
}
