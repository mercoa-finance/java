/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.calculate.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.PaymentDestinationOptions;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculateFeesRequest.Builder.class)
public final class CalculateFeesRequest {
    private final double amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<String> creatorEntityId;

    private final String paymentSourceId;

    private final String paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final Optional<FeeCalculationType> type;

    private final Map<String, Object> additionalProperties;

    private CalculateFeesRequest(
            double amount,
            Optional<CurrencyCode> currency,
            Optional<String> creatorEntityId,
            String paymentSourceId,
            String paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            Optional<FeeCalculationType> type,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.currency = currency;
        this.creatorEntityId = creatorEntityId;
        this.paymentSourceId = paymentSourceId;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total amount in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return ID of the entity creating the invoice. If not provided, the fees will be calculated with the default pricing for the organization.
     */
    @JsonProperty("creatorEntityId")
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    /**
     * @return ID of payment source.
     */
    @JsonProperty("paymentSourceId")
    public String getPaymentSourceId() {
        return paymentSourceId;
    }

    /**
     * @return ID of payment destination.
     */
    @JsonProperty("paymentDestinationId")
    public String getPaymentDestinationId() {
        return paymentDestinationId;
    }

    /**
     * @return Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.
     */
    @JsonProperty("paymentDestinationOptions")
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    /**
     * @return Type of payment to calculate fees for. Defaults to PAYABLE (Accounts Payable).
     */
    @JsonProperty("type")
    public Optional<FeeCalculationType> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculateFeesRequest && equalTo((CalculateFeesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculateFeesRequest other) {
        return amount == other.amount
                && currency.equals(other.currency)
                && creatorEntityId.equals(other.creatorEntityId)
                && paymentSourceId.equals(other.paymentSourceId)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amount,
                this.currency,
                this.creatorEntityId,
                this.paymentSourceId,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        /**
         * <p>Total amount in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        PaymentSourceIdStage amount(double amount);

        Builder from(CalculateFeesRequest other);
    }

    public interface PaymentSourceIdStage {
        /**
         * <p>ID of payment source.</p>
         */
        PaymentDestinationIdStage paymentSourceId(@NotNull String paymentSourceId);
    }

    public interface PaymentDestinationIdStage {
        /**
         * <p>ID of payment destination.</p>
         */
        _FinalStage paymentDestinationId(@NotNull String paymentDestinationId);
    }

    public interface _FinalStage {
        CalculateFeesRequest build();

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        /**
         * <p>ID of the entity creating the invoice. If not provided, the fees will be calculated with the default pricing for the organization.</p>
         */
        _FinalStage creatorEntityId(Optional<String> creatorEntityId);

        _FinalStage creatorEntityId(String creatorEntityId);

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         */
        _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions);

        _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions);

        /**
         * <p>Type of payment to calculate fees for. Defaults to PAYABLE (Accounts Payable).</p>
         */
        _FinalStage type(Optional<FeeCalculationType> type);

        _FinalStage type(FeeCalculationType type);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AmountStage, PaymentSourceIdStage, PaymentDestinationIdStage, _FinalStage {
        private double amount;

        private String paymentSourceId;

        private String paymentDestinationId;

        private Optional<FeeCalculationType> type = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculateFeesRequest other) {
            amount(other.getAmount());
            currency(other.getCurrency());
            creatorEntityId(other.getCreatorEntityId());
            paymentSourceId(other.getPaymentSourceId());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            type(other.getType());
            return this;
        }

        /**
         * <p>Total amount in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * <p>Total amount in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public PaymentSourceIdStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>ID of payment source.</p>
         * <p>ID of payment source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentSourceId")
        public PaymentDestinationIdStage paymentSourceId(@NotNull String paymentSourceId) {
            this.paymentSourceId = Objects.requireNonNull(paymentSourceId, "paymentSourceId must not be null");
            return this;
        }

        /**
         * <p>ID of payment destination.</p>
         * <p>ID of payment destination.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDestinationId")
        public _FinalStage paymentDestinationId(@NotNull String paymentDestinationId) {
            this.paymentDestinationId =
                    Objects.requireNonNull(paymentDestinationId, "paymentDestinationId must not be null");
            return this;
        }

        /**
         * <p>Type of payment to calculate fees for. Defaults to PAYABLE (Accounts Payable).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(FeeCalculationType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Type of payment to calculate fees for. Defaults to PAYABLE (Accounts Payable).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<FeeCalculationType> type) {
            this.type = type;
            return this;
        }

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.ofNullable(paymentDestinationOptions);
            return this;
        }

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        /**
         * <p>ID of the entity creating the invoice. If not provided, the fees will be calculated with the default pricing for the organization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        /**
         * <p>ID of the entity creating the invoice. If not provided, the fees will be calculated with the default pricing for the organization.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public _FinalStage creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        public CalculateFeesRequest build() {
            return new CalculateFeesRequest(
                    amount,
                    currency,
                    creatorEntityId,
                    paymentSourceId,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    type,
                    additionalProperties);
        }
    }
}
