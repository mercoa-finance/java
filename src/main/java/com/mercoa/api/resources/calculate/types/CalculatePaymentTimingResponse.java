/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.calculate.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculatePaymentTimingResponse.Builder.class)
public final class CalculatePaymentTimingResponse {
    private final OffsetDateTime estimatedProcessingDate;

    private final int businessDays;

    private final int estimatedProcessingTime;

    private final OffsetDateTime estimatedSettlementDate;

    private final Map<String, Object> additionalProperties;

    private CalculatePaymentTimingResponse(
            OffsetDateTime estimatedProcessingDate,
            int businessDays,
            int estimatedProcessingTime,
            OffsetDateTime estimatedSettlementDate,
            Map<String, Object> additionalProperties) {
        this.estimatedProcessingDate = estimatedProcessingDate;
        this.businessDays = businessDays;
        this.estimatedProcessingTime = estimatedProcessingTime;
        this.estimatedSettlementDate = estimatedSettlementDate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Estimated date the payment will be or was processed.
     */
    @JsonProperty("estimatedProcessingDate")
    public OffsetDateTime getEstimatedProcessingDate() {
        return estimatedProcessingDate;
    }

    /**
     * @return Number of business days between the estimated processing date and the estimated settlement date. This does not take into account bank holidays or weekends.
     */
    @JsonProperty("businessDays")
    public int getBusinessDays() {
        return businessDays;
    }

    /**
     * @return Estimated payment time in days. This time takes into account bank holidays and weekends.
     */
    @JsonProperty("estimatedProcessingTime")
    public int getEstimatedProcessingTime() {
        return estimatedProcessingTime;
    }

    /**
     * @return Estimated date the payment will be or was settled. This is the same as the request's deductionDate plus the paymentTiming.
     */
    @JsonProperty("estimatedSettlementDate")
    public OffsetDateTime getEstimatedSettlementDate() {
        return estimatedSettlementDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculatePaymentTimingResponse && equalTo((CalculatePaymentTimingResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculatePaymentTimingResponse other) {
        return estimatedProcessingDate.equals(other.estimatedProcessingDate)
                && businessDays == other.businessDays
                && estimatedProcessingTime == other.estimatedProcessingTime
                && estimatedSettlementDate.equals(other.estimatedSettlementDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.estimatedProcessingDate,
                this.businessDays,
                this.estimatedProcessingTime,
                this.estimatedSettlementDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EstimatedProcessingDateStage builder() {
        return new Builder();
    }

    public interface EstimatedProcessingDateStage {
        BusinessDaysStage estimatedProcessingDate(OffsetDateTime estimatedProcessingDate);

        Builder from(CalculatePaymentTimingResponse other);
    }

    public interface BusinessDaysStage {
        EstimatedProcessingTimeStage businessDays(int businessDays);
    }

    public interface EstimatedProcessingTimeStage {
        EstimatedSettlementDateStage estimatedProcessingTime(int estimatedProcessingTime);
    }

    public interface EstimatedSettlementDateStage {
        _FinalStage estimatedSettlementDate(OffsetDateTime estimatedSettlementDate);
    }

    public interface _FinalStage {
        CalculatePaymentTimingResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EstimatedProcessingDateStage,
                    BusinessDaysStage,
                    EstimatedProcessingTimeStage,
                    EstimatedSettlementDateStage,
                    _FinalStage {
        private OffsetDateTime estimatedProcessingDate;

        private int businessDays;

        private int estimatedProcessingTime;

        private OffsetDateTime estimatedSettlementDate;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculatePaymentTimingResponse other) {
            estimatedProcessingDate(other.getEstimatedProcessingDate());
            businessDays(other.getBusinessDays());
            estimatedProcessingTime(other.getEstimatedProcessingTime());
            estimatedSettlementDate(other.getEstimatedSettlementDate());
            return this;
        }

        /**
         * <p>Estimated date the payment will be or was processed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("estimatedProcessingDate")
        public BusinessDaysStage estimatedProcessingDate(OffsetDateTime estimatedProcessingDate) {
            this.estimatedProcessingDate = estimatedProcessingDate;
            return this;
        }

        /**
         * <p>Number of business days between the estimated processing date and the estimated settlement date. This does not take into account bank holidays or weekends.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("businessDays")
        public EstimatedProcessingTimeStage businessDays(int businessDays) {
            this.businessDays = businessDays;
            return this;
        }

        /**
         * <p>Estimated payment time in days. This time takes into account bank holidays and weekends.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("estimatedProcessingTime")
        public EstimatedSettlementDateStage estimatedProcessingTime(int estimatedProcessingTime) {
            this.estimatedProcessingTime = estimatedProcessingTime;
            return this;
        }

        /**
         * <p>Estimated date the payment will be or was settled. This is the same as the request's deductionDate plus the paymentTiming.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("estimatedSettlementDate")
        public _FinalStage estimatedSettlementDate(OffsetDateTime estimatedSettlementDate) {
            this.estimatedSettlementDate = estimatedSettlementDate;
            return this;
        }

        @java.lang.Override
        public CalculatePaymentTimingResponse build() {
            return new CalculatePaymentTimingResponse(
                    estimatedProcessingDate,
                    businessDays,
                    estimatedProcessingTime,
                    estimatedSettlementDate,
                    additionalProperties);
        }
    }
}
