/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetemplate.document;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.DocumentResponse;
import com.mercoa.api.resources.emaillogtypes.types.EmailLogResponse;
import com.mercoa.api.resources.invoicetemplate.document.requests.GetDocumentsRequest;
import com.mercoa.api.resources.invoicetemplate.document.requests.UploadDocumentRequest;
import java.util.List;

public class DocumentClient {
    protected final ClientOptions clientOptions;

    private final RawDocumentClient rawClient;

    public DocumentClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawDocumentClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawDocumentClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public List<DocumentResponse> getAll(String invoiceTemplateId) {
        return this.rawClient.getAll(invoiceTemplateId).body();
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public List<DocumentResponse> getAll(String invoiceTemplateId, GetDocumentsRequest request) {
        return this.rawClient.getAll(invoiceTemplateId, request).body();
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public List<DocumentResponse> getAll(
            String invoiceTemplateId, GetDocumentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(invoiceTemplateId, request, requestOptions).body();
    }

    /**
     * Upload documents (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public void upload(String invoiceTemplateId, UploadDocumentRequest request) {
        this.rawClient.upload(invoiceTemplateId, request).body();
    }

    /**
     * Upload documents (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public void upload(String invoiceTemplateId, UploadDocumentRequest request, RequestOptions requestOptions) {
        this.rawClient.upload(invoiceTemplateId, request, requestOptions).body();
    }

    /**
     * Delete an attachment (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public void delete(String invoiceTemplateId, String documentId) {
        this.rawClient.delete(invoiceTemplateId, documentId).body();
    }

    /**
     * Delete an attachment (scanned/uploaded PDFs and images) associated with this invoice template
     */
    public void delete(String invoiceTemplateId, String documentId, RequestOptions requestOptions) {
        this.rawClient.delete(invoiceTemplateId, documentId, requestOptions).body();
    }

    /**
     * Generate a PDF of the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public DocumentResponse generateInvoicePdf(String invoiceTemplateId) {
        return this.rawClient.generateInvoicePdf(invoiceTemplateId).body();
    }

    /**
     * Generate a PDF of the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public DocumentResponse generateInvoicePdf(String invoiceTemplateId, RequestOptions requestOptions) {
        return this.rawClient
                .generateInvoicePdf(invoiceTemplateId, requestOptions)
                .body();
    }

    /**
     * Get a PDF of the check for the invoice. If the invoice does not have check as the disbursement method, an error will be returned. If the disbursement option for the check is set to 'MAIL', a void copy of the check will be returned. If the disbursement option for the check is set to 'PRINT', a printable check will be returned. If the invoice is NOT marked as PAID, the check will be a void copy.
     */
    public DocumentResponse generateCheckPdf(String invoiceTemplateId) {
        return this.rawClient.generateCheckPdf(invoiceTemplateId).body();
    }

    /**
     * Get a PDF of the check for the invoice. If the invoice does not have check as the disbursement method, an error will be returned. If the disbursement option for the check is set to 'MAIL', a void copy of the check will be returned. If the disbursement option for the check is set to 'PRINT', a printable check will be returned. If the invoice is NOT marked as PAID, the check will be a void copy.
     */
    public DocumentResponse generateCheckPdf(String invoiceTemplateId, RequestOptions requestOptions) {
        return this.rawClient
                .generateCheckPdf(invoiceTemplateId, requestOptions)
                .body();
    }

    /**
     * Get the email subject and body that was used to create this invoice.
     */
    public EmailLogResponse getSourceEmail(String invoiceTemplateId) {
        return this.rawClient.getSourceEmail(invoiceTemplateId).body();
    }

    /**
     * Get the email subject and body that was used to create this invoice.
     */
    public EmailLogResponse getSourceEmail(String invoiceTemplateId, RequestOptions requestOptions) {
        return this.rawClient.getSourceEmail(invoiceTemplateId, requestOptions).body();
    }
}
