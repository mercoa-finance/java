/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.invoicetemplate.approval.AsyncApprovalClient;
import com.mercoa.api.resources.invoicetemplate.document.AsyncDocumentClient;
import com.mercoa.api.resources.invoicetemplate.lineitem.AsyncLineItemClient;
import com.mercoa.api.resources.invoicetemplate.requests.GetAllInvoiceTemplatesRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceTemplateResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceTemplateCreationRequest;
import com.mercoa.api.resources.invoicetypes.types.InvoiceTemplateResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceTemplateUpdateRequest;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncInvoiceTemplateClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncLineItemClient> lineItemClient;

    protected final Supplier<AsyncApprovalClient> approvalClient;

    protected final Supplier<AsyncDocumentClient> documentClient;

    public AsyncInvoiceTemplateClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.lineItemClient = Suppliers.memoize(() -> new AsyncLineItemClient(clientOptions));
        this.approvalClient = Suppliers.memoize(() -> new AsyncApprovalClient(clientOptions));
        this.documentClient = Suppliers.memoize(() -> new AsyncDocumentClient(clientOptions));
    }

    /**
     * Search invoice templates for all entities in the organization
     */
    public CompletableFuture<FindInvoiceTemplateResponse> find() {
        return find(GetAllInvoiceTemplatesRequest.builder().build());
    }

    /**
     * Search invoice templates for all entities in the organization
     */
    public CompletableFuture<FindInvoiceTemplateResponse> find(GetAllInvoiceTemplatesRequest request) {
        return find(request, null);
    }

    /**
     * Search invoice templates for all entities in the organization
     */
    public CompletableFuture<FindInvoiceTemplateResponse> find(
            GetAllInvoiceTemplatesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice-templates");
        if (request.getEntityId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityId", request.getEntityId().get(), false);
        }
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get().toString(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get().toString(), false);
        }
        if (request.getDateType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "dateType", request.getDateType().get().toString(), false);
        }
        if (request.getOrderBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderBy", request.getOrderBy().get().toString(), false);
        }
        if (request.getOrderDirection().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderDirection", request.getOrderDirection().get().toString(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get().toString(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get().toString(), false);
        }
        if (request.getLineItemMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lineItemMetadata",
                    request.getLineItemMetadata().get().toString(),
                    false);
        }
        if (request.getLineItemGlAccountId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lineItemGlAccountId",
                    request.getLineItemGlAccountId().get(),
                    false);
        }
        if (request.getPayerId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "payerId", request.getPayerId().get(), false);
        }
        if (request.getVendorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "vendorId", request.getVendorId().get(), false);
        }
        if (request.getCreatorUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "creatorUserId", request.getCreatorUserId().get(), false);
        }
        if (request.getApproverId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverId", request.getApproverId().get(), false);
        }
        if (request.getApproverAction().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverAction", request.getApproverAction().get().toString(), false);
        }
        if (request.getInvoiceId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceId", request.getInvoiceId().get(), false);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get().toString(), false);
        }
        if (request.getPaymentType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentType", request.getPaymentType().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<FindInvoiceTemplateResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), FindInvoiceTemplateResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<InvoiceTemplateResponse> create() {
        return create(InvoiceTemplateCreationRequest.builder().build());
    }

    public CompletableFuture<InvoiceTemplateResponse> create(InvoiceTemplateCreationRequest request) {
        return create(request, null);
    }

    public CompletableFuture<InvoiceTemplateResponse> create(
            InvoiceTemplateCreationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice-template")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<InvoiceTemplateResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), InvoiceTemplateResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<InvoiceTemplateResponse> get(String invoiceTemplateId) {
        return get(invoiceTemplateId, null);
    }

    public CompletableFuture<InvoiceTemplateResponse> get(String invoiceTemplateId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice-template")
                .addPathSegment(invoiceTemplateId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<InvoiceTemplateResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), InvoiceTemplateResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<InvoiceTemplateResponse> update(String invoiceTemplateId) {
        return update(invoiceTemplateId, InvoiceTemplateUpdateRequest.builder().build());
    }

    public CompletableFuture<InvoiceTemplateResponse> update(
            String invoiceTemplateId, InvoiceTemplateUpdateRequest request) {
        return update(invoiceTemplateId, request, null);
    }

    public CompletableFuture<InvoiceTemplateResponse> update(
            String invoiceTemplateId, InvoiceTemplateUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice-template")
                .addPathSegment(invoiceTemplateId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<InvoiceTemplateResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), InvoiceTemplateResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Only invoice templates in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public CompletableFuture<Void> delete(String invoiceTemplateId) {
        return delete(invoiceTemplateId, null);
    }

    /**
     * Only invoice templates in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public CompletableFuture<Void> delete(String invoiceTemplateId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice-template")
                .addPathSegment(invoiceTemplateId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<Void> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(null);
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public AsyncLineItemClient lineItem() {
        return this.lineItemClient.get();
    }

    public AsyncApprovalClient approval() {
        return this.approvalClient.get();
    }

    public AsyncDocumentClient document() {
        return this.documentClient.get();
    }
}
