/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.oatfi.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OatfiUnderwritingCallbackBody.Builder.class)
public final class OatfiUnderwritingCallbackBody implements IOatfiWebhookBase {
    private final String type;

    private final OatfiUnderwritingData data;

    private final Map<String, Object> additionalProperties;

    private OatfiUnderwritingCallbackBody(
            String type, OatfiUnderwritingData data, Map<String, Object> additionalProperties) {
        this.type = type;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The OatFi event type
     */
    @JsonProperty("type")
    @java.lang.Override
    public String getType() {
        return type;
    }

    @JsonProperty("data")
    public OatfiUnderwritingData getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OatfiUnderwritingCallbackBody && equalTo((OatfiUnderwritingCallbackBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OatfiUnderwritingCallbackBody other) {
        return type.equals(other.type) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The OatFi event type</p>
         */
        DataStage type(@NotNull String type);

        Builder from(OatfiUnderwritingCallbackBody other);
    }

    public interface DataStage {
        _FinalStage data(@NotNull OatfiUnderwritingData data);
    }

    public interface _FinalStage {
        OatfiUnderwritingCallbackBody build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, DataStage, _FinalStage {
        private String type;

        private OatfiUnderwritingData data;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OatfiUnderwritingCallbackBody other) {
            type(other.getType());
            data(other.getData());
            return this;
        }

        /**
         * <p>The OatFi event type</p>
         * <p>The OatFi event type</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public DataStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("data")
        public _FinalStage data(@NotNull OatfiUnderwritingData data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        @java.lang.Override
        public OatfiUnderwritingCallbackBody build() {
            return new OatfiUnderwritingCallbackBody(type, data, additionalProperties);
        }
    }
}
