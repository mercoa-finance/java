/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.oatfi.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OatfiUnderwritingData.Builder.class)
public final class OatfiUnderwritingData {
    private final String productId;

    private final String businessExternalId;

    private final UnderwritingStatus status;

    private final Optional<Integer> creditLimit;

    private final Optional<Integer> sharedCreditLimit;

    private final Map<String, Object> additionalProperties;

    private OatfiUnderwritingData(
            String productId,
            String businessExternalId,
            UnderwritingStatus status,
            Optional<Integer> creditLimit,
            Optional<Integer> sharedCreditLimit,
            Map<String, Object> additionalProperties) {
        this.productId = productId;
        this.businessExternalId = businessExternalId;
        this.status = status;
        this.creditLimit = creditLimit;
        this.sharedCreditLimit = sharedCreditLimit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The OatFi product ID
     */
    @JsonProperty("productId")
    public String getProductId() {
        return productId;
    }

    /**
     * @return The external business ID
     */
    @JsonProperty("businessExternalId")
    public String getBusinessExternalId() {
        return businessExternalId;
    }

    /**
     * @return The underwriting status
     */
    @JsonProperty("status")
    public UnderwritingStatus getStatus() {
        return status;
    }

    /**
     * @return The approved credit limit in cents. Only present when status is APPROVED
     */
    @JsonProperty("creditLimit")
    public Optional<Integer> getCreditLimit() {
        return creditLimit;
    }

    /**
     * @return The shared credit limit in cents for products in a group. Only present when status is APPROVED
     */
    @JsonProperty("sharedCreditLimit")
    public Optional<Integer> getSharedCreditLimit() {
        return sharedCreditLimit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OatfiUnderwritingData && equalTo((OatfiUnderwritingData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OatfiUnderwritingData other) {
        return productId.equals(other.productId)
                && businessExternalId.equals(other.businessExternalId)
                && status.equals(other.status)
                && creditLimit.equals(other.creditLimit)
                && sharedCreditLimit.equals(other.sharedCreditLimit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.productId, this.businessExternalId, this.status, this.creditLimit, this.sharedCreditLimit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProductIdStage builder() {
        return new Builder();
    }

    public interface ProductIdStage {
        /**
         * <p>The OatFi product ID</p>
         */
        BusinessExternalIdStage productId(@NotNull String productId);

        Builder from(OatfiUnderwritingData other);
    }

    public interface BusinessExternalIdStage {
        /**
         * <p>The external business ID</p>
         */
        StatusStage businessExternalId(@NotNull String businessExternalId);
    }

    public interface StatusStage {
        /**
         * <p>The underwriting status</p>
         */
        _FinalStage status(@NotNull UnderwritingStatus status);
    }

    public interface _FinalStage {
        OatfiUnderwritingData build();

        /**
         * <p>The approved credit limit in cents. Only present when status is APPROVED</p>
         */
        _FinalStage creditLimit(Optional<Integer> creditLimit);

        _FinalStage creditLimit(Integer creditLimit);

        /**
         * <p>The shared credit limit in cents for products in a group. Only present when status is APPROVED</p>
         */
        _FinalStage sharedCreditLimit(Optional<Integer> sharedCreditLimit);

        _FinalStage sharedCreditLimit(Integer sharedCreditLimit);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProductIdStage, BusinessExternalIdStage, StatusStage, _FinalStage {
        private String productId;

        private String businessExternalId;

        private UnderwritingStatus status;

        private Optional<Integer> sharedCreditLimit = Optional.empty();

        private Optional<Integer> creditLimit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OatfiUnderwritingData other) {
            productId(other.getProductId());
            businessExternalId(other.getBusinessExternalId());
            status(other.getStatus());
            creditLimit(other.getCreditLimit());
            sharedCreditLimit(other.getSharedCreditLimit());
            return this;
        }

        /**
         * <p>The OatFi product ID</p>
         * <p>The OatFi product ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("productId")
        public BusinessExternalIdStage productId(@NotNull String productId) {
            this.productId = Objects.requireNonNull(productId, "productId must not be null");
            return this;
        }

        /**
         * <p>The external business ID</p>
         * <p>The external business ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("businessExternalId")
        public StatusStage businessExternalId(@NotNull String businessExternalId) {
            this.businessExternalId = Objects.requireNonNull(businessExternalId, "businessExternalId must not be null");
            return this;
        }

        /**
         * <p>The underwriting status</p>
         * <p>The underwriting status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull UnderwritingStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The shared credit limit in cents for products in a group. Only present when status is APPROVED</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sharedCreditLimit(Integer sharedCreditLimit) {
            this.sharedCreditLimit = Optional.ofNullable(sharedCreditLimit);
            return this;
        }

        /**
         * <p>The shared credit limit in cents for products in a group. Only present when status is APPROVED</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sharedCreditLimit", nulls = Nulls.SKIP)
        public _FinalStage sharedCreditLimit(Optional<Integer> sharedCreditLimit) {
            this.sharedCreditLimit = sharedCreditLimit;
            return this;
        }

        /**
         * <p>The approved credit limit in cents. Only present when status is APPROVED</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creditLimit(Integer creditLimit) {
            this.creditLimit = Optional.ofNullable(creditLimit);
            return this;
        }

        /**
         * <p>The approved credit limit in cents. Only present when status is APPROVED</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creditLimit", nulls = Nulls.SKIP)
        public _FinalStage creditLimit(Optional<Integer> creditLimit) {
            this.creditLimit = creditLimit;
            return this;
        }

        @java.lang.Override
        public OatfiUnderwritingData build() {
            return new OatfiUnderwritingData(
                    productId, businessExternalId, status, creditLimit, sharedCreditLimit, additionalProperties);
        }
    }
}
