/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.processinvoice.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessInvoiceRequest.Builder.class)
public final class ProcessInvoiceRequest {
    private final List<String> invoiceIds;

    private final Optional<Boolean> dryRun;

    private final Map<String, Object> additionalProperties;

    private ProcessInvoiceRequest(
            List<String> invoiceIds, Optional<Boolean> dryRun, Map<String, Object> additionalProperties) {
        this.invoiceIds = invoiceIds;
        this.dryRun = dryRun;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("invoiceIds")
    public List<String> getInvoiceIds() {
        return invoiceIds;
    }

    /**
     * @return If true, payment rails supporting dry runs will move money; if false, they will not. Defaults to true.
     */
    @JsonProperty("dryRun")
    public Optional<Boolean> getDryRun() {
        return dryRun;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessInvoiceRequest && equalTo((ProcessInvoiceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessInvoiceRequest other) {
        return invoiceIds.equals(other.invoiceIds) && dryRun.equals(other.dryRun);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.invoiceIds, this.dryRun);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> invoiceIds = new ArrayList<>();

        private Optional<Boolean> dryRun = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProcessInvoiceRequest other) {
            invoiceIds(other.getInvoiceIds());
            dryRun(other.getDryRun());
            return this;
        }

        @JsonSetter(value = "invoiceIds", nulls = Nulls.SKIP)
        public Builder invoiceIds(List<String> invoiceIds) {
            this.invoiceIds.clear();
            this.invoiceIds.addAll(invoiceIds);
            return this;
        }

        public Builder addInvoiceIds(String invoiceIds) {
            this.invoiceIds.add(invoiceIds);
            return this;
        }

        public Builder addAllInvoiceIds(List<String> invoiceIds) {
            this.invoiceIds.addAll(invoiceIds);
            return this;
        }

        /**
         * <p>If true, payment rails supporting dry runs will move money; if false, they will not. Defaults to true.</p>
         */
        @JsonSetter(value = "dryRun", nulls = Nulls.SKIP)
        public Builder dryRun(Optional<Boolean> dryRun) {
            this.dryRun = dryRun;
            return this;
        }

        public Builder dryRun(Boolean dryRun) {
            this.dryRun = Optional.ofNullable(dryRun);
            return this;
        }

        public ProcessInvoiceRequest build() {
            return new ProcessInvoiceRequest(invoiceIds, dryRun, additionalProperties);
        }
    }
}
