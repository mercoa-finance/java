/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CheckPaymentDestinationOptions.Builder.class)
public final class CheckPaymentDestinationOptions {
    private final Optional<CheckDeliveryMethod> delivery;

    private final Map<String, Object> additionalProperties;

    private CheckPaymentDestinationOptions(
            Optional<CheckDeliveryMethod> delivery, Map<String, Object> additionalProperties) {
        this.delivery = delivery;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Delivery method for check disbursements. Defaults to PRINT.
     */
    @JsonProperty("delivery")
    public Optional<CheckDeliveryMethod> getDelivery() {
        return delivery;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckPaymentDestinationOptions && equalTo((CheckPaymentDestinationOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckPaymentDestinationOptions other) {
        return delivery.equals(other.delivery);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.delivery);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CheckDeliveryMethod> delivery = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckPaymentDestinationOptions other) {
            delivery(other.getDelivery());
            return this;
        }

        @JsonSetter(value = "delivery", nulls = Nulls.SKIP)
        public Builder delivery(Optional<CheckDeliveryMethod> delivery) {
            this.delivery = delivery;
            return this;
        }

        public Builder delivery(CheckDeliveryMethod delivery) {
            this.delivery = Optional.of(delivery);
            return this;
        }

        public CheckPaymentDestinationOptions build() {
            return new CheckPaymentDestinationOptions(delivery, additionalProperties);
        }
    }
}
