/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BnplFees.Builder.class)
public final class BnplFees {
    private final int baseFeeAmount;

    private final double baseFeePercentage;

    private final Map<String, Object> additionalProperties;

    private BnplFees(int baseFeeAmount, double baseFeePercentage, Map<String, Object> additionalProperties) {
        this.baseFeeAmount = baseFeeAmount;
        this.baseFeePercentage = baseFeePercentage;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total fees in cents
     */
    @JsonProperty("baseFeeAmount")
    public int getBaseFeeAmount() {
        return baseFeeAmount;
    }

    /**
     * @return Fee percentage as a decimal (e.g., 1.4 for 1.4%)
     */
    @JsonProperty("baseFeePercentage")
    public double getBaseFeePercentage() {
        return baseFeePercentage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BnplFees && equalTo((BnplFees) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BnplFees other) {
        return baseFeeAmount == other.baseFeeAmount && baseFeePercentage == other.baseFeePercentage;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.baseFeeAmount, this.baseFeePercentage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BaseFeeAmountStage builder() {
        return new Builder();
    }

    public interface BaseFeeAmountStage {
        /**
         * <p>Total fees in cents</p>
         */
        BaseFeePercentageStage baseFeeAmount(int baseFeeAmount);

        Builder from(BnplFees other);
    }

    public interface BaseFeePercentageStage {
        /**
         * <p>Fee percentage as a decimal (e.g., 1.4 for 1.4%)</p>
         */
        _FinalStage baseFeePercentage(double baseFeePercentage);
    }

    public interface _FinalStage {
        BnplFees build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BaseFeeAmountStage, BaseFeePercentageStage, _FinalStage {
        private int baseFeeAmount;

        private double baseFeePercentage;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BnplFees other) {
            baseFeeAmount(other.getBaseFeeAmount());
            baseFeePercentage(other.getBaseFeePercentage());
            return this;
        }

        /**
         * <p>Total fees in cents</p>
         * <p>Total fees in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("baseFeeAmount")
        public BaseFeePercentageStage baseFeeAmount(int baseFeeAmount) {
            this.baseFeeAmount = baseFeeAmount;
            return this;
        }

        /**
         * <p>Fee percentage as a decimal (e.g., 1.4 for 1.4%)</p>
         * <p>Fee percentage as a decimal (e.g., 1.4 for 1.4%)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("baseFeePercentage")
        public _FinalStage baseFeePercentage(double baseFeePercentage) {
            this.baseFeePercentage = baseFeePercentage;
            return this;
        }

        @java.lang.Override
        public BnplFees build() {
            return new BnplFees(baseFeeAmount, baseFeePercentage, additionalProperties);
        }
    }
}
