/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApprovalSlot.Builder.class)
public final class ApprovalSlot {
    private final Optional<String> upstreamPolicyId;

    private final Optional<Boolean> upstreamPoliciesApproved;

    private final String approvalPolicyId;

    private final String approvalSlotId;

    private final Optional<String> assignedUserId;

    private final ApproverAction action;

    private final List<String> eligibleRoles;

    private final List<String> eligibleUserIds;

    private final OffsetDateTime date;

    private final Map<String, Object> additionalProperties;

    private ApprovalSlot(
            Optional<String> upstreamPolicyId,
            Optional<Boolean> upstreamPoliciesApproved,
            String approvalPolicyId,
            String approvalSlotId,
            Optional<String> assignedUserId,
            ApproverAction action,
            List<String> eligibleRoles,
            List<String> eligibleUserIds,
            OffsetDateTime date,
            Map<String, Object> additionalProperties) {
        this.upstreamPolicyId = upstreamPolicyId;
        this.upstreamPoliciesApproved = upstreamPoliciesApproved;
        this.approvalPolicyId = approvalPolicyId;
        this.approvalSlotId = approvalSlotId;
        this.assignedUserId = assignedUserId;
        this.action = action;
        this.eligibleRoles = eligibleRoles;
        this.eligibleUserIds = eligibleUserIds;
        this.date = date;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier for the upstream policy this slot is associated with.
     */
    @JsonProperty("upstreamPolicyId")
    public Optional<String> getUpstreamPolicyId() {
        return upstreamPolicyId;
    }

    /**
     * @return Whether all upstream policies are approved.
     */
    @JsonProperty("upstreamPoliciesApproved")
    public Optional<Boolean> getUpstreamPoliciesApproved() {
        return upstreamPoliciesApproved;
    }

    /**
     * @return The identifier for the approval policy this slot is associated with.
     */
    @JsonProperty("approvalPolicyId")
    public String getApprovalPolicyId() {
        return approvalPolicyId;
    }

    /**
     * @return The identifier for this approval slot
     */
    @JsonProperty("approvalSlotId")
    public String getApprovalSlotId() {
        return approvalSlotId;
    }

    /**
     * @return The ID of the user who is assigned to the approval slot. If undefined, the approval slot is assigned to all eligible approvers.
     */
    @JsonProperty("assignedUserId")
    public Optional<String> getAssignedUserId() {
        return assignedUserId;
    }

    @JsonProperty("action")
    public ApproverAction getAction() {
        return action;
    }

    @JsonProperty("eligibleRoles")
    public List<String> getEligibleRoles() {
        return eligibleRoles;
    }

    @JsonProperty("eligibleUserIds")
    public List<String> getEligibleUserIds() {
        return eligibleUserIds;
    }

    /**
     * @return Either the date the invoice was created, date the approver was assigned, or date of last action by approver, whichever is latest.
     */
    @JsonProperty("date")
    public OffsetDateTime getDate() {
        return date;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApprovalSlot && equalTo((ApprovalSlot) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApprovalSlot other) {
        return upstreamPolicyId.equals(other.upstreamPolicyId)
                && upstreamPoliciesApproved.equals(other.upstreamPoliciesApproved)
                && approvalPolicyId.equals(other.approvalPolicyId)
                && approvalSlotId.equals(other.approvalSlotId)
                && assignedUserId.equals(other.assignedUserId)
                && action.equals(other.action)
                && eligibleRoles.equals(other.eligibleRoles)
                && eligibleUserIds.equals(other.eligibleUserIds)
                && date.equals(other.date);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.upstreamPolicyId,
                this.upstreamPoliciesApproved,
                this.approvalPolicyId,
                this.approvalSlotId,
                this.assignedUserId,
                this.action,
                this.eligibleRoles,
                this.eligibleUserIds,
                this.date);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ApprovalPolicyIdStage builder() {
        return new Builder();
    }

    public interface ApprovalPolicyIdStage {
        ApprovalSlotIdStage approvalPolicyId(String approvalPolicyId);

        Builder from(ApprovalSlot other);
    }

    public interface ApprovalSlotIdStage {
        ActionStage approvalSlotId(String approvalSlotId);
    }

    public interface ActionStage {
        DateStage action(ApproverAction action);
    }

    public interface DateStage {
        _FinalStage date(OffsetDateTime date);
    }

    public interface _FinalStage {
        ApprovalSlot build();

        _FinalStage upstreamPolicyId(Optional<String> upstreamPolicyId);

        _FinalStage upstreamPolicyId(String upstreamPolicyId);

        _FinalStage upstreamPoliciesApproved(Optional<Boolean> upstreamPoliciesApproved);

        _FinalStage upstreamPoliciesApproved(Boolean upstreamPoliciesApproved);

        _FinalStage assignedUserId(Optional<String> assignedUserId);

        _FinalStage assignedUserId(String assignedUserId);

        _FinalStage eligibleRoles(List<String> eligibleRoles);

        _FinalStage addEligibleRoles(String eligibleRoles);

        _FinalStage addAllEligibleRoles(List<String> eligibleRoles);

        _FinalStage eligibleUserIds(List<String> eligibleUserIds);

        _FinalStage addEligibleUserIds(String eligibleUserIds);

        _FinalStage addAllEligibleUserIds(List<String> eligibleUserIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ApprovalPolicyIdStage, ApprovalSlotIdStage, ActionStage, DateStage, _FinalStage {
        private String approvalPolicyId;

        private String approvalSlotId;

        private ApproverAction action;

        private OffsetDateTime date;

        private List<String> eligibleUserIds = new ArrayList<>();

        private List<String> eligibleRoles = new ArrayList<>();

        private Optional<String> assignedUserId = Optional.empty();

        private Optional<Boolean> upstreamPoliciesApproved = Optional.empty();

        private Optional<String> upstreamPolicyId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApprovalSlot other) {
            upstreamPolicyId(other.getUpstreamPolicyId());
            upstreamPoliciesApproved(other.getUpstreamPoliciesApproved());
            approvalPolicyId(other.getApprovalPolicyId());
            approvalSlotId(other.getApprovalSlotId());
            assignedUserId(other.getAssignedUserId());
            action(other.getAction());
            eligibleRoles(other.getEligibleRoles());
            eligibleUserIds(other.getEligibleUserIds());
            date(other.getDate());
            return this;
        }

        /**
         * <p>The identifier for the approval policy this slot is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("approvalPolicyId")
        public ApprovalSlotIdStage approvalPolicyId(String approvalPolicyId) {
            this.approvalPolicyId = approvalPolicyId;
            return this;
        }

        /**
         * <p>The identifier for this approval slot</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("approvalSlotId")
        public ActionStage approvalSlotId(String approvalSlotId) {
            this.approvalSlotId = approvalSlotId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("action")
        public DateStage action(ApproverAction action) {
            this.action = action;
            return this;
        }

        /**
         * <p>Either the date the invoice was created, date the approver was assigned, or date of last action by approver, whichever is latest.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("date")
        public _FinalStage date(OffsetDateTime date) {
            this.date = date;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEligibleUserIds(List<String> eligibleUserIds) {
            this.eligibleUserIds.addAll(eligibleUserIds);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEligibleUserIds(String eligibleUserIds) {
            this.eligibleUserIds.add(eligibleUserIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eligibleUserIds", nulls = Nulls.SKIP)
        public _FinalStage eligibleUserIds(List<String> eligibleUserIds) {
            this.eligibleUserIds.clear();
            this.eligibleUserIds.addAll(eligibleUserIds);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEligibleRoles(List<String> eligibleRoles) {
            this.eligibleRoles.addAll(eligibleRoles);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEligibleRoles(String eligibleRoles) {
            this.eligibleRoles.add(eligibleRoles);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eligibleRoles", nulls = Nulls.SKIP)
        public _FinalStage eligibleRoles(List<String> eligibleRoles) {
            this.eligibleRoles.clear();
            this.eligibleRoles.addAll(eligibleRoles);
            return this;
        }

        /**
         * <p>The ID of the user who is assigned to the approval slot. If undefined, the approval slot is assigned to all eligible approvers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assignedUserId(String assignedUserId) {
            this.assignedUserId = Optional.ofNullable(assignedUserId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "assignedUserId", nulls = Nulls.SKIP)
        public _FinalStage assignedUserId(Optional<String> assignedUserId) {
            this.assignedUserId = assignedUserId;
            return this;
        }

        /**
         * <p>Whether all upstream policies are approved.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage upstreamPoliciesApproved(Boolean upstreamPoliciesApproved) {
            this.upstreamPoliciesApproved = Optional.ofNullable(upstreamPoliciesApproved);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "upstreamPoliciesApproved", nulls = Nulls.SKIP)
        public _FinalStage upstreamPoliciesApproved(Optional<Boolean> upstreamPoliciesApproved) {
            this.upstreamPoliciesApproved = upstreamPoliciesApproved;
            return this;
        }

        /**
         * <p>The identifier for the upstream policy this slot is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage upstreamPolicyId(String upstreamPolicyId) {
            this.upstreamPolicyId = Optional.ofNullable(upstreamPolicyId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "upstreamPolicyId", nulls = Nulls.SKIP)
        public _FinalStage upstreamPolicyId(Optional<String> upstreamPolicyId) {
            this.upstreamPolicyId = upstreamPolicyId;
            return this;
        }

        @java.lang.Override
        public ApprovalSlot build() {
            return new ApprovalSlot(
                    upstreamPolicyId,
                    upstreamPoliciesApproved,
                    approvalPolicyId,
                    approvalSlotId,
                    assignedUserId,
                    action,
                    eligibleRoles,
                    eligibleUserIds,
                    date,
                    additionalProperties);
        }
    }
}
