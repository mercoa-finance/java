/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UtilityPaymentDestinationOptions.Builder.class)
public final class UtilityPaymentDestinationOptions {
    private final String accountId;

    private final Map<String, Object> additionalProperties;

    private UtilityPaymentDestinationOptions(String accountId, Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID for the utility account to pay with. Links to accounts listed on payor/payee relationship.
     */
    @JsonProperty("accountId")
    public String getAccountId() {
        return accountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UtilityPaymentDestinationOptions && equalTo((UtilityPaymentDestinationOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UtilityPaymentDestinationOptions other) {
        return accountId.equals(other.accountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        /**
         * <p>The ID for the utility account to pay with. Links to accounts listed on payor/payee relationship.</p>
         */
        _FinalStage accountId(@NotNull String accountId);

        Builder from(UtilityPaymentDestinationOptions other);
    }

    public interface _FinalStage {
        UtilityPaymentDestinationOptions build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountIdStage, _FinalStage {
        private String accountId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UtilityPaymentDestinationOptions other) {
            accountId(other.getAccountId());
            return this;
        }

        /**
         * <p>The ID for the utility account to pay with. Links to accounts listed on payor/payee relationship.</p>
         * <p>The ID for the utility account to pay with. Links to accounts listed on payor/payee relationship.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accountId")
        public _FinalStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        @java.lang.Override
        public UtilityPaymentDestinationOptions build() {
            return new UtilityPaymentDestinationOptions(accountId, additionalProperties);
        }
    }
}
