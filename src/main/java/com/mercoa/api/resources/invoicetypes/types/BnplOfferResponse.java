/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BnplOfferResponse.Builder.class)
public final class BnplOfferResponse {
    private final int invoiceAmount;

    private final int totalRepaymentAmount;

    private final String currency;

    private final int downPaymentAmount;

    private final int numberOfPayments;

    private final String firstPaymentDate;

    private final String finalPaymentDate;

    private final BnplFees fees;

    private final Optional<String> termsLink;

    private final List<BnplInstallment> installments;

    private final BnplDayOfWeek paymentDayOfWeek;

    private final int installmentAmount;

    private final String financeFeeRate;

    private final Map<String, Object> additionalProperties;

    private BnplOfferResponse(
            int invoiceAmount,
            int totalRepaymentAmount,
            String currency,
            int downPaymentAmount,
            int numberOfPayments,
            String firstPaymentDate,
            String finalPaymentDate,
            BnplFees fees,
            Optional<String> termsLink,
            List<BnplInstallment> installments,
            BnplDayOfWeek paymentDayOfWeek,
            int installmentAmount,
            String financeFeeRate,
            Map<String, Object> additionalProperties) {
        this.invoiceAmount = invoiceAmount;
        this.totalRepaymentAmount = totalRepaymentAmount;
        this.currency = currency;
        this.downPaymentAmount = downPaymentAmount;
        this.numberOfPayments = numberOfPayments;
        this.firstPaymentDate = firstPaymentDate;
        this.finalPaymentDate = finalPaymentDate;
        this.fees = fees;
        this.termsLink = termsLink;
        this.installments = installments;
        this.paymentDayOfWeek = paymentDayOfWeek;
        this.installmentAmount = installmentAmount;
        this.financeFeeRate = financeFeeRate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total amount of the invoice in cents.
     */
    @JsonProperty("invoiceAmount")
    public int getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     * @return Total amount to be repaid, including fees. In cents.
     */
    @JsonProperty("totalRepaymentAmount")
    public int getTotalRepaymentAmount() {
        return totalRepaymentAmount;
    }

    /**
     * @return The currency code for the amount
     */
    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    /**
     * @return The down payment amount in cents
     */
    @JsonProperty("downPaymentAmount")
    public int getDownPaymentAmount() {
        return downPaymentAmount;
    }

    /**
     * @return The number of payments/installments
     */
    @JsonProperty("numberOfPayments")
    public int getNumberOfPayments() {
        return numberOfPayments;
    }

    /**
     * @return The date of the first payment in YYYY-MM-DD format
     */
    @JsonProperty("firstPaymentDate")
    public String getFirstPaymentDate() {
        return firstPaymentDate;
    }

    /**
     * @return The date of the final payment in YYYY-MM-DD format
     */
    @JsonProperty("finalPaymentDate")
    public String getFinalPaymentDate() {
        return finalPaymentDate;
    }

    /**
     * @return The fees associated with the offer
     */
    @JsonProperty("fees")
    public BnplFees getFees() {
        return fees;
    }

    /**
     * @return A link to the terms and conditions for the offer
     */
    @JsonProperty("termsLink")
    public Optional<String> getTermsLink() {
        return termsLink;
    }

    /**
     * @return A list of all installments, including down payment.
     */
    @JsonProperty("installments")
    public List<BnplInstallment> getInstallments() {
        return installments;
    }

    /**
     * @return The day of the week for payments, e.g. &quot;Wednesday&quot;
     */
    @JsonProperty("paymentDayOfWeek")
    public BnplDayOfWeek getPaymentDayOfWeek() {
        return paymentDayOfWeek;
    }

    /**
     * @return The amount for each regular installment. The last installment may have a different amount. In cents.
     */
    @JsonProperty("installmentAmount")
    public int getInstallmentAmount() {
        return installmentAmount;
    }

    /**
     * @return e.g. &quot;1.5% per 28 days&quot;
     */
    @JsonProperty("financeFeeRate")
    public String getFinanceFeeRate() {
        return financeFeeRate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BnplOfferResponse && equalTo((BnplOfferResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BnplOfferResponse other) {
        return invoiceAmount == other.invoiceAmount
                && totalRepaymentAmount == other.totalRepaymentAmount
                && currency.equals(other.currency)
                && downPaymentAmount == other.downPaymentAmount
                && numberOfPayments == other.numberOfPayments
                && firstPaymentDate.equals(other.firstPaymentDate)
                && finalPaymentDate.equals(other.finalPaymentDate)
                && fees.equals(other.fees)
                && termsLink.equals(other.termsLink)
                && installments.equals(other.installments)
                && paymentDayOfWeek.equals(other.paymentDayOfWeek)
                && installmentAmount == other.installmentAmount
                && financeFeeRate.equals(other.financeFeeRate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.invoiceAmount,
                this.totalRepaymentAmount,
                this.currency,
                this.downPaymentAmount,
                this.numberOfPayments,
                this.firstPaymentDate,
                this.finalPaymentDate,
                this.fees,
                this.termsLink,
                this.installments,
                this.paymentDayOfWeek,
                this.installmentAmount,
                this.financeFeeRate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceAmountStage builder() {
        return new Builder();
    }

    public interface InvoiceAmountStage {
        /**
         * <p>The total amount of the invoice in cents.</p>
         */
        TotalRepaymentAmountStage invoiceAmount(int invoiceAmount);

        Builder from(BnplOfferResponse other);
    }

    public interface TotalRepaymentAmountStage {
        /**
         * <p>Total amount to be repaid, including fees. In cents.</p>
         */
        CurrencyStage totalRepaymentAmount(int totalRepaymentAmount);
    }

    public interface CurrencyStage {
        /**
         * <p>The currency code for the amount</p>
         */
        DownPaymentAmountStage currency(@NotNull String currency);
    }

    public interface DownPaymentAmountStage {
        /**
         * <p>The down payment amount in cents</p>
         */
        NumberOfPaymentsStage downPaymentAmount(int downPaymentAmount);
    }

    public interface NumberOfPaymentsStage {
        /**
         * <p>The number of payments/installments</p>
         */
        FirstPaymentDateStage numberOfPayments(int numberOfPayments);
    }

    public interface FirstPaymentDateStage {
        /**
         * <p>The date of the first payment in YYYY-MM-DD format</p>
         */
        FinalPaymentDateStage firstPaymentDate(@NotNull String firstPaymentDate);
    }

    public interface FinalPaymentDateStage {
        /**
         * <p>The date of the final payment in YYYY-MM-DD format</p>
         */
        FeesStage finalPaymentDate(@NotNull String finalPaymentDate);
    }

    public interface FeesStage {
        /**
         * <p>The fees associated with the offer</p>
         */
        PaymentDayOfWeekStage fees(@NotNull BnplFees fees);
    }

    public interface PaymentDayOfWeekStage {
        /**
         * <p>The day of the week for payments, e.g. &quot;Wednesday&quot;</p>
         */
        InstallmentAmountStage paymentDayOfWeek(@NotNull BnplDayOfWeek paymentDayOfWeek);
    }

    public interface InstallmentAmountStage {
        /**
         * <p>The amount for each regular installment. The last installment may have a different amount. In cents.</p>
         */
        FinanceFeeRateStage installmentAmount(int installmentAmount);
    }

    public interface FinanceFeeRateStage {
        /**
         * <p>e.g. &quot;1.5% per 28 days&quot;</p>
         */
        _FinalStage financeFeeRate(@NotNull String financeFeeRate);
    }

    public interface _FinalStage {
        BnplOfferResponse build();

        /**
         * <p>A link to the terms and conditions for the offer</p>
         */
        _FinalStage termsLink(Optional<String> termsLink);

        _FinalStage termsLink(String termsLink);

        /**
         * <p>A list of all installments, including down payment.</p>
         */
        _FinalStage installments(List<BnplInstallment> installments);

        _FinalStage addInstallments(BnplInstallment installments);

        _FinalStage addAllInstallments(List<BnplInstallment> installments);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements InvoiceAmountStage,
                    TotalRepaymentAmountStage,
                    CurrencyStage,
                    DownPaymentAmountStage,
                    NumberOfPaymentsStage,
                    FirstPaymentDateStage,
                    FinalPaymentDateStage,
                    FeesStage,
                    PaymentDayOfWeekStage,
                    InstallmentAmountStage,
                    FinanceFeeRateStage,
                    _FinalStage {
        private int invoiceAmount;

        private int totalRepaymentAmount;

        private String currency;

        private int downPaymentAmount;

        private int numberOfPayments;

        private String firstPaymentDate;

        private String finalPaymentDate;

        private BnplFees fees;

        private BnplDayOfWeek paymentDayOfWeek;

        private int installmentAmount;

        private String financeFeeRate;

        private List<BnplInstallment> installments = new ArrayList<>();

        private Optional<String> termsLink = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BnplOfferResponse other) {
            invoiceAmount(other.getInvoiceAmount());
            totalRepaymentAmount(other.getTotalRepaymentAmount());
            currency(other.getCurrency());
            downPaymentAmount(other.getDownPaymentAmount());
            numberOfPayments(other.getNumberOfPayments());
            firstPaymentDate(other.getFirstPaymentDate());
            finalPaymentDate(other.getFinalPaymentDate());
            fees(other.getFees());
            termsLink(other.getTermsLink());
            installments(other.getInstallments());
            paymentDayOfWeek(other.getPaymentDayOfWeek());
            installmentAmount(other.getInstallmentAmount());
            financeFeeRate(other.getFinanceFeeRate());
            return this;
        }

        /**
         * <p>The total amount of the invoice in cents.</p>
         * <p>The total amount of the invoice in cents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceAmount")
        public TotalRepaymentAmountStage invoiceAmount(int invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        /**
         * <p>Total amount to be repaid, including fees. In cents.</p>
         * <p>Total amount to be repaid, including fees. In cents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalRepaymentAmount")
        public CurrencyStage totalRepaymentAmount(int totalRepaymentAmount) {
            this.totalRepaymentAmount = totalRepaymentAmount;
            return this;
        }

        /**
         * <p>The currency code for the amount</p>
         * <p>The currency code for the amount</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("currency")
        public DownPaymentAmountStage currency(@NotNull String currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        /**
         * <p>The down payment amount in cents</p>
         * <p>The down payment amount in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("downPaymentAmount")
        public NumberOfPaymentsStage downPaymentAmount(int downPaymentAmount) {
            this.downPaymentAmount = downPaymentAmount;
            return this;
        }

        /**
         * <p>The number of payments/installments</p>
         * <p>The number of payments/installments</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("numberOfPayments")
        public FirstPaymentDateStage numberOfPayments(int numberOfPayments) {
            this.numberOfPayments = numberOfPayments;
            return this;
        }

        /**
         * <p>The date of the first payment in YYYY-MM-DD format</p>
         * <p>The date of the first payment in YYYY-MM-DD format</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("firstPaymentDate")
        public FinalPaymentDateStage firstPaymentDate(@NotNull String firstPaymentDate) {
            this.firstPaymentDate = Objects.requireNonNull(firstPaymentDate, "firstPaymentDate must not be null");
            return this;
        }

        /**
         * <p>The date of the final payment in YYYY-MM-DD format</p>
         * <p>The date of the final payment in YYYY-MM-DD format</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("finalPaymentDate")
        public FeesStage finalPaymentDate(@NotNull String finalPaymentDate) {
            this.finalPaymentDate = Objects.requireNonNull(finalPaymentDate, "finalPaymentDate must not be null");
            return this;
        }

        /**
         * <p>The fees associated with the offer</p>
         * <p>The fees associated with the offer</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fees")
        public PaymentDayOfWeekStage fees(@NotNull BnplFees fees) {
            this.fees = Objects.requireNonNull(fees, "fees must not be null");
            return this;
        }

        /**
         * <p>The day of the week for payments, e.g. &quot;Wednesday&quot;</p>
         * <p>The day of the week for payments, e.g. &quot;Wednesday&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDayOfWeek")
        public InstallmentAmountStage paymentDayOfWeek(@NotNull BnplDayOfWeek paymentDayOfWeek) {
            this.paymentDayOfWeek = Objects.requireNonNull(paymentDayOfWeek, "paymentDayOfWeek must not be null");
            return this;
        }

        /**
         * <p>The amount for each regular installment. The last installment may have a different amount. In cents.</p>
         * <p>The amount for each regular installment. The last installment may have a different amount. In cents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("installmentAmount")
        public FinanceFeeRateStage installmentAmount(int installmentAmount) {
            this.installmentAmount = installmentAmount;
            return this;
        }

        /**
         * <p>e.g. &quot;1.5% per 28 days&quot;</p>
         * <p>e.g. &quot;1.5% per 28 days&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("financeFeeRate")
        public _FinalStage financeFeeRate(@NotNull String financeFeeRate) {
            this.financeFeeRate = Objects.requireNonNull(financeFeeRate, "financeFeeRate must not be null");
            return this;
        }

        /**
         * <p>A list of all installments, including down payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllInstallments(List<BnplInstallment> installments) {
            if (installments != null) {
                this.installments.addAll(installments);
            }
            return this;
        }

        /**
         * <p>A list of all installments, including down payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addInstallments(BnplInstallment installments) {
            this.installments.add(installments);
            return this;
        }

        /**
         * <p>A list of all installments, including down payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "installments", nulls = Nulls.SKIP)
        public _FinalStage installments(List<BnplInstallment> installments) {
            this.installments.clear();
            this.installments.addAll(installments);
            return this;
        }

        /**
         * <p>A link to the terms and conditions for the offer</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage termsLink(String termsLink) {
            this.termsLink = Optional.ofNullable(termsLink);
            return this;
        }

        /**
         * <p>A link to the terms and conditions for the offer</p>
         */
        @java.lang.Override
        @JsonSetter(value = "termsLink", nulls = Nulls.SKIP)
        public _FinalStage termsLink(Optional<String> termsLink) {
            this.termsLink = termsLink;
            return this;
        }

        @java.lang.Override
        public BnplOfferResponse build() {
            return new BnplOfferResponse(
                    invoiceAmount,
                    totalRepaymentAmount,
                    currency,
                    downPaymentAmount,
                    numberOfPayments,
                    firstPaymentDate,
                    finalPaymentDate,
                    fees,
                    termsLink,
                    installments,
                    paymentDayOfWeek,
                    installmentAmount,
                    financeFeeRate,
                    additionalProperties);
        }
    }
}
