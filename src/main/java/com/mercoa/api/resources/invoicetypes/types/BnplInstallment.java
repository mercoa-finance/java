/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BnplInstallment.Builder.class)
public final class BnplInstallment {
    private final int number;

    private final String dueDate;

    private final int amount;

    private final BnplInstallmentType type;

    private final Map<String, Object> additionalProperties;

    private BnplInstallment(
            int number,
            String dueDate,
            int amount,
            BnplInstallmentType type,
            Map<String, Object> additionalProperties) {
        this.number = number;
        this.dueDate = dueDate;
        this.amount = amount;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("number")
    public int getNumber() {
        return number;
    }

    @JsonProperty("dueDate")
    public String getDueDate() {
        return dueDate;
    }

    @JsonProperty("amount")
    public int getAmount() {
        return amount;
    }

    @JsonProperty("type")
    public BnplInstallmentType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BnplInstallment && equalTo((BnplInstallment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BnplInstallment other) {
        return number == other.number
                && dueDate.equals(other.dueDate)
                && amount == other.amount
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.number, this.dueDate, this.amount, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NumberStage builder() {
        return new Builder();
    }

    public interface NumberStage {
        DueDateStage number(int number);

        Builder from(BnplInstallment other);
    }

    public interface DueDateStage {
        AmountStage dueDate(@NotNull String dueDate);
    }

    public interface AmountStage {
        TypeStage amount(int amount);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull BnplInstallmentType type);
    }

    public interface _FinalStage {
        BnplInstallment build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NumberStage, DueDateStage, AmountStage, TypeStage, _FinalStage {
        private int number;

        private String dueDate;

        private int amount;

        private BnplInstallmentType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BnplInstallment other) {
            number(other.getNumber());
            dueDate(other.getDueDate());
            amount(other.getAmount());
            type(other.getType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("number")
        public DueDateStage number(int number) {
            this.number = number;
            return this;
        }

        @java.lang.Override
        @JsonSetter("dueDate")
        public AmountStage dueDate(@NotNull String dueDate) {
            this.dueDate = Objects.requireNonNull(dueDate, "dueDate must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public TypeStage amount(int amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull BnplInstallmentType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public BnplInstallment build() {
            return new BnplInstallment(number, dueDate, amount, type, additionalProperties);
        }
    }
}
