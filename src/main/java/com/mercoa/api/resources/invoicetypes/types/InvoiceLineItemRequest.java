/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InvoiceLineItemRequest.Builder.class)
public final class InvoiceLineItemRequest {
    private final Optional<String> id;

    private final double amount;

    private final Optional<CurrencyCode> currency;

    private final String description;

    private final Optional<String> name;

    private final Optional<Integer> quantity;

    private final Optional<Double> unitPrice;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<Map<String, String>> metadata;

    private final Optional<String> glAccountId;

    private final Map<String, Object> additionalProperties;

    private InvoiceLineItemRequest(
            Optional<String> id,
            double amount,
            Optional<CurrencyCode> currency,
            String description,
            Optional<String> name,
            Optional<Integer> quantity,
            Optional<Double> unitPrice,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<Map<String, String>> metadata,
            Optional<String> glAccountId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.amount = amount;
        this.currency = currency;
        this.description = description;
        this.name = name;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.metadata = metadata;
        this.glAccountId = glAccountId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If provided, will overwrite line item on the invoice with this ID. If not provided, will create a new line item.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return Total amount of line item in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("quantity")
    public Optional<Integer> getQuantity() {
        return quantity;
    }

    /**
     * @return Unit price of the line item in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("unitPrice")
    public Optional<Double> getUnitPrice() {
        return unitPrice;
    }

    @JsonProperty("serviceStartDate")
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    /**
     * @return ID of general ledger account associated with this line item.
     */
    @JsonProperty("glAccountId")
    public Optional<String> getGlAccountId() {
        return glAccountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceLineItemRequest && equalTo((InvoiceLineItemRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceLineItemRequest other) {
        return id.equals(other.id)
                && amount == other.amount
                && currency.equals(other.currency)
                && description.equals(other.description)
                && name.equals(other.name)
                && quantity.equals(other.quantity)
                && unitPrice.equals(other.unitPrice)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && metadata.equals(other.metadata)
                && glAccountId.equals(other.glAccountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.amount,
                this.currency,
                this.description,
                this.name,
                this.quantity,
                this.unitPrice,
                this.serviceStartDate,
                this.serviceEndDate,
                this.metadata,
                this.glAccountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        DescriptionStage amount(double amount);

        Builder from(InvoiceLineItemRequest other);
    }

    public interface DescriptionStage {
        _FinalStage description(String description);
    }

    public interface _FinalStage {
        InvoiceLineItemRequest build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage quantity(Optional<Integer> quantity);

        _FinalStage quantity(Integer quantity);

        _FinalStage unitPrice(Optional<Double> unitPrice);

        _FinalStage unitPrice(Double unitPrice);

        _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate);

        _FinalStage serviceStartDate(OffsetDateTime serviceStartDate);

        _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate);

        _FinalStage serviceEndDate(OffsetDateTime serviceEndDate);

        _FinalStage metadata(Optional<Map<String, String>> metadata);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage glAccountId(Optional<String> glAccountId);

        _FinalStage glAccountId(String glAccountId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, DescriptionStage, _FinalStage {
        private double amount;

        private String description;

        private Optional<String> glAccountId = Optional.empty();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<Double> unitPrice = Optional.empty();

        private Optional<Integer> quantity = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceLineItemRequest other) {
            id(other.getId());
            amount(other.getAmount());
            currency(other.getCurrency());
            description(other.getDescription());
            name(other.getName());
            quantity(other.getQuantity());
            unitPrice(other.getUnitPrice());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            metadata(other.getMetadata());
            glAccountId(other.getGlAccountId());
            return this;
        }

        /**
         * <p>Total amount of line item in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public DescriptionStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("description")
        public _FinalStage description(String description) {
            this.description = description;
            return this;
        }

        /**
         * <p>ID of general ledger account associated with this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage glAccountId(String glAccountId) {
            this.glAccountId = Optional.of(glAccountId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "glAccountId", nulls = Nulls.SKIP)
        public _FinalStage glAccountId(Optional<String> glAccountId) {
            this.glAccountId = glAccountId;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.of(serviceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.of(serviceStartDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        /**
         * <p>Unit price of the line item in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage unitPrice(Double unitPrice) {
            this.unitPrice = Optional.of(unitPrice);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "unitPrice", nulls = Nulls.SKIP)
        public _FinalStage unitPrice(Optional<Double> unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        @java.lang.Override
        public _FinalStage quantity(Integer quantity) {
            this.quantity = Optional.of(quantity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public _FinalStage quantity(Optional<Integer> quantity) {
            this.quantity = quantity;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.of(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>If provided, will overwrite line item on the invoice with this ID. If not provided, will create a new line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.of(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public InvoiceLineItemRequest build() {
            return new InvoiceLineItemRequest(
                    id,
                    amount,
                    currency,
                    description,
                    name,
                    quantity,
                    unitPrice,
                    serviceStartDate,
                    serviceEndDate,
                    metadata,
                    glAccountId,
                    additionalProperties);
        }
    }
}
