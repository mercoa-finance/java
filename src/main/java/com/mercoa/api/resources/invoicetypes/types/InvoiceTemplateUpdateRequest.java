/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceTemplateUpdateRequest.Builder.class)
public final class InvoiceTemplateUpdateRequest implements IInvoiceTemplateRequestBase {
    private final Optional<InvoiceStatus> status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<String> payerId;

    private final Optional<String> paymentSourceId;

    private final Optional<String> vendorId;

    private final Optional<String> paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final Optional<List<ApprovalSlotAssignment>> approvers;

    private final Optional<Map<String, String>> metadata;

    private final Optional<String> document;

    private final Optional<String> creatorUserId;

    private final Optional<InvoiceFeesRequest> fees;

    private final Optional<Boolean> batchPayment;

    private final Optional<PaymentSchedule> paymentSchedule;

    private final Optional<Double> taxAmount;

    private final Optional<Double> shippingAmount;

    private final Optional<List<InvoiceLineItemUpdateRequest>> lineItems;

    private final Optional<String> creatorEntityId;

    private final Map<String, Object> additionalProperties;

    private InvoiceTemplateUpdateRequest(
            Optional<InvoiceStatus> status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> dueDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<String> payerId,
            Optional<String> paymentSourceId,
            Optional<String> vendorId,
            Optional<String> paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            Optional<List<ApprovalSlotAssignment>> approvers,
            Optional<Map<String, String>> metadata,
            Optional<String> document,
            Optional<String> creatorUserId,
            Optional<InvoiceFeesRequest> fees,
            Optional<Boolean> batchPayment,
            Optional<PaymentSchedule> paymentSchedule,
            Optional<Double> taxAmount,
            Optional<Double> shippingAmount,
            Optional<List<InvoiceLineItemUpdateRequest>> lineItems,
            Optional<String> creatorEntityId,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.deductionDate = deductionDate;
        this.dueDate = dueDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.payerId = payerId;
        this.paymentSourceId = paymentSourceId;
        this.vendorId = vendorId;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.approvers = approvers;
        this.metadata = metadata;
        this.document = document;
        this.creatorUserId = creatorUserId;
        this.fees = fees;
        this.batchPayment = batchPayment;
        this.paymentSchedule = paymentSchedule;
        this.taxAmount = taxAmount;
        this.shippingAmount = shippingAmount;
        this.lineItems = lineItems;
        this.creatorEntityId = creatorEntityId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    @java.lang.Override
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    @java.lang.Override
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    @java.lang.Override
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Initial date when funds are scheduled to be deducted from payer's account.
     */
    @JsonProperty("deductionDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    @JsonProperty("invoiceNumber")
    @java.lang.Override
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Note to self or memo on invoice.
     */
    @JsonProperty("noteToSelf")
    @java.lang.Override
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("serviceStartDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    /**
     * @return ID or foreign ID of the payer of this invoice.
     */
    @JsonProperty("payerId")
    @java.lang.Override
    public Optional<String> getPayerId() {
        return payerId;
    }

    /**
     * @return ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.
     */
    @JsonProperty("paymentSourceId")
    @java.lang.Override
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    /**
     * @return ID or foreign ID of the vendor of this invoice.
     */
    @JsonProperty("vendorId")
    @java.lang.Override
    public Optional<String> getVendorId() {
        return vendorId;
    }

    /**
     * @return ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.
     */
    @JsonProperty("paymentDestinationId")
    @java.lang.Override
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    /**
     * @return Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.
     */
    @JsonProperty("paymentDestinationOptions")
    @java.lang.Override
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    /**
     * @return Set approvers for this invoice.
     */
    @JsonProperty("approvers")
    @java.lang.Override
    public Optional<List<ApprovalSlotAssignment>> getApprovers() {
        return approvers;
    }

    /**
     * @return Metadata associated with this invoice.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    /**
     * @return Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB.
     */
    @JsonProperty("document")
    @java.lang.Override
    public Optional<String> getDocument() {
        return document;
    }

    /**
     * @return User ID or Foreign ID of entity user who created this invoice.
     */
    @JsonProperty("creatorUserId")
    @java.lang.Override
    public Optional<String> getCreatorUserId() {
        return creatorUserId;
    }

    /**
     * @return If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.
     */
    @JsonProperty("fees")
    @java.lang.Override
    public Optional<InvoiceFeesRequest> getFees() {
        return fees;
    }

    /**
     * @return If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.
     */
    @JsonProperty("batchPayment")
    @java.lang.Override
    public Optional<Boolean> getBatchPayment() {
        return batchPayment;
    }

    /**
     * @return If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.
     */
    @JsonProperty("paymentSchedule")
    @java.lang.Override
    public Optional<PaymentSchedule> getPaymentSchedule() {
        return paymentSchedule;
    }

    /**
     * @return Tax amount for this invoice.
     */
    @JsonProperty("taxAmount")
    @java.lang.Override
    public Optional<Double> getTaxAmount() {
        return taxAmount;
    }

    /**
     * @return Shipping amount for this invoice.
     */
    @JsonProperty("shippingAmount")
    @java.lang.Override
    public Optional<Double> getShippingAmount() {
        return shippingAmount;
    }

    @JsonProperty("lineItems")
    public Optional<List<InvoiceLineItemUpdateRequest>> getLineItems() {
        return lineItems;
    }

    /**
     * @return ID or foreign ID of entity who created this invoice.
     */
    @JsonProperty("creatorEntityId")
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceTemplateUpdateRequest && equalTo((InvoiceTemplateUpdateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceTemplateUpdateRequest other) {
        return status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && deductionDate.equals(other.deductionDate)
                && dueDate.equals(other.dueDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && payerId.equals(other.payerId)
                && paymentSourceId.equals(other.paymentSourceId)
                && vendorId.equals(other.vendorId)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && approvers.equals(other.approvers)
                && metadata.equals(other.metadata)
                && document.equals(other.document)
                && creatorUserId.equals(other.creatorUserId)
                && fees.equals(other.fees)
                && batchPayment.equals(other.batchPayment)
                && paymentSchedule.equals(other.paymentSchedule)
                && taxAmount.equals(other.taxAmount)
                && shippingAmount.equals(other.shippingAmount)
                && lineItems.equals(other.lineItems)
                && creatorEntityId.equals(other.creatorEntityId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.deductionDate,
                this.dueDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.serviceStartDate,
                this.serviceEndDate,
                this.payerId,
                this.paymentSourceId,
                this.vendorId,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.approvers,
                this.metadata,
                this.document,
                this.creatorUserId,
                this.fees,
                this.batchPayment,
                this.paymentSchedule,
                this.taxAmount,
                this.shippingAmount,
                this.lineItems,
                this.creatorEntityId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<InvoiceStatus> status = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<List<ApprovalSlotAssignment>> approvers = Optional.empty();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<String> document = Optional.empty();

        private Optional<String> creatorUserId = Optional.empty();

        private Optional<InvoiceFeesRequest> fees = Optional.empty();

        private Optional<Boolean> batchPayment = Optional.empty();

        private Optional<PaymentSchedule> paymentSchedule = Optional.empty();

        private Optional<Double> taxAmount = Optional.empty();

        private Optional<Double> shippingAmount = Optional.empty();

        private Optional<List<InvoiceLineItemUpdateRequest>> lineItems = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceTemplateUpdateRequest other) {
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            deductionDate(other.getDeductionDate());
            dueDate(other.getDueDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            payerId(other.getPayerId());
            paymentSourceId(other.getPaymentSourceId());
            vendorId(other.getVendorId());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            approvers(other.getApprovers());
            metadata(other.getMetadata());
            document(other.getDocument());
            creatorUserId(other.getCreatorUserId());
            fees(other.getFees());
            batchPayment(other.getBatchPayment());
            paymentSchedule(other.getPaymentSchedule());
            taxAmount(other.getTaxAmount());
            shippingAmount(other.getShippingAmount());
            lineItems(other.getLineItems());
            creatorEntityId(other.getCreatorEntityId());
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(InvoiceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         */
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public Builder invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        public Builder invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Initial date when funds are scheduled to be deducted from payer's account.</p>
         */
        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public Builder deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        public Builder deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.ofNullable(deductionDate);
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         */
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        /**
         * <p>Note to self or memo on invoice.</p>
         */
        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public Builder noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        public Builder noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.ofNullable(noteToSelf);
            return this;
        }

        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public Builder serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        public Builder serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.ofNullable(serviceStartDate);
            return this;
        }

        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public Builder serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        public Builder serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.ofNullable(serviceEndDate);
            return this;
        }

        /**
         * <p>ID or foreign ID of the payer of this invoice.</p>
         */
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public Builder payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        public Builder payerId(String payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        /**
         * <p>ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.</p>
         */
        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public Builder paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        public Builder paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.ofNullable(paymentSourceId);
            return this;
        }

        /**
         * <p>ID or foreign ID of the vendor of this invoice.</p>
         */
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(String vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        /**
         * <p>ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.</p>
         */
        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public Builder paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        public Builder paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.ofNullable(paymentDestinationId);
            return this;
        }

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         */
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public Builder paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        public Builder paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.ofNullable(paymentDestinationOptions);
            return this;
        }

        /**
         * <p>Set approvers for this invoice.</p>
         */
        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public Builder approvers(Optional<List<ApprovalSlotAssignment>> approvers) {
            this.approvers = approvers;
            return this;
        }

        public Builder approvers(List<ApprovalSlotAssignment> approvers) {
            this.approvers = Optional.ofNullable(approvers);
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB.</p>
         */
        @JsonSetter(value = "document", nulls = Nulls.SKIP)
        public Builder document(Optional<String> document) {
            this.document = document;
            return this;
        }

        public Builder document(String document) {
            this.document = Optional.ofNullable(document);
            return this;
        }

        /**
         * <p>User ID or Foreign ID of entity user who created this invoice.</p>
         */
        @JsonSetter(value = "creatorUserId", nulls = Nulls.SKIP)
        public Builder creatorUserId(Optional<String> creatorUserId) {
            this.creatorUserId = creatorUserId;
            return this;
        }

        public Builder creatorUserId(String creatorUserId) {
            this.creatorUserId = Optional.ofNullable(creatorUserId);
            return this;
        }

        /**
         * <p>If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.</p>
         */
        @JsonSetter(value = "fees", nulls = Nulls.SKIP)
        public Builder fees(Optional<InvoiceFeesRequest> fees) {
            this.fees = fees;
            return this;
        }

        public Builder fees(InvoiceFeesRequest fees) {
            this.fees = Optional.ofNullable(fees);
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.</p>
         */
        @JsonSetter(value = "batchPayment", nulls = Nulls.SKIP)
        public Builder batchPayment(Optional<Boolean> batchPayment) {
            this.batchPayment = batchPayment;
            return this;
        }

        public Builder batchPayment(Boolean batchPayment) {
            this.batchPayment = Optional.ofNullable(batchPayment);
            return this;
        }

        /**
         * <p>If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.</p>
         */
        @JsonSetter(value = "paymentSchedule", nulls = Nulls.SKIP)
        public Builder paymentSchedule(Optional<PaymentSchedule> paymentSchedule) {
            this.paymentSchedule = paymentSchedule;
            return this;
        }

        public Builder paymentSchedule(PaymentSchedule paymentSchedule) {
            this.paymentSchedule = Optional.ofNullable(paymentSchedule);
            return this;
        }

        /**
         * <p>Tax amount for this invoice.</p>
         */
        @JsonSetter(value = "taxAmount", nulls = Nulls.SKIP)
        public Builder taxAmount(Optional<Double> taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        public Builder taxAmount(Double taxAmount) {
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        /**
         * <p>Shipping amount for this invoice.</p>
         */
        @JsonSetter(value = "shippingAmount", nulls = Nulls.SKIP)
        public Builder shippingAmount(Optional<Double> shippingAmount) {
            this.shippingAmount = shippingAmount;
            return this;
        }

        public Builder shippingAmount(Double shippingAmount) {
            this.shippingAmount = Optional.ofNullable(shippingAmount);
            return this;
        }

        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public Builder lineItems(Optional<List<InvoiceLineItemUpdateRequest>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        public Builder lineItems(List<InvoiceLineItemUpdateRequest> lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        /**
         * <p>ID or foreign ID of entity who created this invoice.</p>
         */
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public Builder creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        public Builder creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        public InvoiceTemplateUpdateRequest build() {
            return new InvoiceTemplateUpdateRequest(
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    deductionDate,
                    dueDate,
                    invoiceNumber,
                    noteToSelf,
                    serviceStartDate,
                    serviceEndDate,
                    payerId,
                    paymentSourceId,
                    vendorId,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    approvers,
                    metadata,
                    document,
                    creatorUserId,
                    fees,
                    batchPayment,
                    paymentSchedule,
                    taxAmount,
                    shippingAmount,
                    lineItems,
                    creatorEntityId,
                    additionalProperties);
        }
    }
}
