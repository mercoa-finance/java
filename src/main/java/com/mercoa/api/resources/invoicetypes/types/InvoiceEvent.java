/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceEvent.Builder.class)
public final class InvoiceEvent {
    private final String id;

    private final InvoiceUpdateRequest data;

    private final List<String> webhookIds;

    private final Optional<InvoiceStatus> status;

    private final Optional<String> userId;

    private final Optional<String> ipAddress;

    private final OffsetDateTime createdAt;

    private final Map<String, Object> additionalProperties;

    private InvoiceEvent(
            String id,
            InvoiceUpdateRequest data,
            List<String> webhookIds,
            Optional<InvoiceStatus> status,
            Optional<String> userId,
            Optional<String> ipAddress,
            OffsetDateTime createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.data = data;
        this.webhookIds = webhookIds;
        this.status = status;
        this.userId = userId;
        this.ipAddress = ipAddress;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the event
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The data related to the invoice update
     */
    @JsonProperty("data")
    public InvoiceUpdateRequest getData() {
        return data;
    }

    /**
     * @return The list of webhook IDs associated with this event
     */
    @JsonProperty("webhookIds")
    public List<String> getWebhookIds() {
        return webhookIds;
    }

    /**
     * @return The current status of the invoice event
     */
    @JsonProperty("status")
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return The ID of the user who triggered this event
     */
    @JsonProperty("userId")
    public Optional<String> getUserId() {
        return userId;
    }

    /**
     * @return The IP address of the user who triggered the event
     */
    @JsonProperty("ipAddress")
    public Optional<String> getIpAddress() {
        return ipAddress;
    }

    /**
     * @return The timestamp when the event was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceEvent && equalTo((InvoiceEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceEvent other) {
        return id.equals(other.id)
                && data.equals(other.data)
                && webhookIds.equals(other.webhookIds)
                && status.equals(other.status)
                && userId.equals(other.userId)
                && ipAddress.equals(other.ipAddress)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.data, this.webhookIds, this.status, this.userId, this.ipAddress, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The ID of the event</p>
         */
        DataStage id(@NotNull String id);

        Builder from(InvoiceEvent other);
    }

    public interface DataStage {
        /**
         * <p>The data related to the invoice update</p>
         */
        CreatedAtStage data(@NotNull InvoiceUpdateRequest data);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the event was created</p>
         */
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        InvoiceEvent build();

        /**
         * <p>The list of webhook IDs associated with this event</p>
         */
        _FinalStage webhookIds(List<String> webhookIds);

        _FinalStage addWebhookIds(String webhookIds);

        _FinalStage addAllWebhookIds(List<String> webhookIds);

        /**
         * <p>The current status of the invoice event</p>
         */
        _FinalStage status(Optional<InvoiceStatus> status);

        _FinalStage status(InvoiceStatus status);

        /**
         * <p>The ID of the user who triggered this event</p>
         */
        _FinalStage userId(Optional<String> userId);

        _FinalStage userId(String userId);

        /**
         * <p>The IP address of the user who triggered the event</p>
         */
        _FinalStage ipAddress(Optional<String> ipAddress);

        _FinalStage ipAddress(String ipAddress);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, DataStage, CreatedAtStage, _FinalStage {
        private String id;

        private InvoiceUpdateRequest data;

        private OffsetDateTime createdAt;

        private Optional<String> ipAddress = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<InvoiceStatus> status = Optional.empty();

        private List<String> webhookIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceEvent other) {
            id(other.getId());
            data(other.getData());
            webhookIds(other.getWebhookIds());
            status(other.getStatus());
            userId(other.getUserId());
            ipAddress(other.getIpAddress());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The ID of the event</p>
         * <p>The ID of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public DataStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The data related to the invoice update</p>
         * <p>The data related to the invoice update</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("data")
        public CreatedAtStage data(@NotNull InvoiceUpdateRequest data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the event was created</p>
         * <p>The timestamp when the event was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The IP address of the user who triggered the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        /**
         * <p>The IP address of the user who triggered the event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ipAddress", nulls = Nulls.SKIP)
        public _FinalStage ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        /**
         * <p>The ID of the user who triggered this event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userId(String userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * <p>The ID of the user who triggered this event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public _FinalStage userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>The current status of the invoice event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(InvoiceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The current status of the invoice event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllWebhookIds(List<String> webhookIds) {
            if (webhookIds != null) {
                this.webhookIds.addAll(webhookIds);
            }
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addWebhookIds(String webhookIds) {
            this.webhookIds.add(webhookIds);
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webhookIds", nulls = Nulls.SKIP)
        public _FinalStage webhookIds(List<String> webhookIds) {
            this.webhookIds.clear();
            this.webhookIds.addAll(webhookIds);
            return this;
        }

        @java.lang.Override
        public InvoiceEvent build() {
            return new InvoiceEvent(id, data, webhookIds, status, userId, ipAddress, createdAt, additionalProperties);
        }
    }
}
