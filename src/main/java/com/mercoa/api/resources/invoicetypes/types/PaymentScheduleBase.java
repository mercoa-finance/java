/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentScheduleBase.Builder.class)
public final class PaymentScheduleBase implements IPaymentScheduleBase {
    private final Optional<Integer> repeatEvery;

    private final Optional<PaymentScheduleEndCondition> ends;

    private final Map<String, Object> additionalProperties;

    private PaymentScheduleBase(
            Optional<Integer> repeatEvery,
            Optional<PaymentScheduleEndCondition> ends,
            Map<String, Object> additionalProperties) {
        this.repeatEvery = repeatEvery;
        this.ends = ends;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.
     */
    @JsonProperty("repeatEvery")
    @java.lang.Override
    public Optional<Integer> getRepeatEvery() {
        return repeatEvery;
    }

    /**
     * @return When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified
     */
    @JsonProperty("ends")
    @java.lang.Override
    public Optional<PaymentScheduleEndCondition> getEnds() {
        return ends;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentScheduleBase && equalTo((PaymentScheduleBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentScheduleBase other) {
        return repeatEvery.equals(other.repeatEvery) && ends.equals(other.ends);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.repeatEvery, this.ends);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> repeatEvery = Optional.empty();

        private Optional<PaymentScheduleEndCondition> ends = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaymentScheduleBase other) {
            repeatEvery(other.getRepeatEvery());
            ends(other.getEnds());
            return this;
        }

        @JsonSetter(value = "repeatEvery", nulls = Nulls.SKIP)
        public Builder repeatEvery(Optional<Integer> repeatEvery) {
            this.repeatEvery = repeatEvery;
            return this;
        }

        public Builder repeatEvery(Integer repeatEvery) {
            this.repeatEvery = Optional.ofNullable(repeatEvery);
            return this;
        }

        @JsonSetter(value = "ends", nulls = Nulls.SKIP)
        public Builder ends(Optional<PaymentScheduleEndCondition> ends) {
            this.ends = ends;
            return this;
        }

        public Builder ends(PaymentScheduleEndCondition ends) {
            this.ends = Optional.ofNullable(ends);
            return this;
        }

        public PaymentScheduleBase build() {
            return new PaymentScheduleBase(repeatEvery, ends, additionalProperties);
        }
    }
}
