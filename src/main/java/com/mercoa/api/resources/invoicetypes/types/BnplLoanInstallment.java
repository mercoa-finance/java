/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BnplLoanInstallment.Builder.class)
public final class BnplLoanInstallment {
    private final int number;

    private final int startDate;

    private final int dueDate;

    private final int maturityDate;

    private final int outstandingBalance;

    private final int amount;

    private final BnplLoanStatus status;

    private final BnplInstallmentType type;

    private final BnplInstallmentTotalPaid totalPaid;

    private final Map<String, Object> additionalProperties;

    private BnplLoanInstallment(
            int number,
            int startDate,
            int dueDate,
            int maturityDate,
            int outstandingBalance,
            int amount,
            BnplLoanStatus status,
            BnplInstallmentType type,
            BnplInstallmentTotalPaid totalPaid,
            Map<String, Object> additionalProperties) {
        this.number = number;
        this.startDate = startDate;
        this.dueDate = dueDate;
        this.maturityDate = maturityDate;
        this.outstandingBalance = outstandingBalance;
        this.amount = amount;
        this.status = status;
        this.type = type;
        this.totalPaid = totalPaid;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Installment number (0 for down payment)
     */
    @JsonProperty("number")
    public int getNumber() {
        return number;
    }

    /**
     * @return Start date as timestamp in milliseconds
     */
    @JsonProperty("startDate")
    public int getStartDate() {
        return startDate;
    }

    /**
     * @return Due date as timestamp in milliseconds
     */
    @JsonProperty("dueDate")
    public int getDueDate() {
        return dueDate;
    }

    /**
     * @return Maturity date as timestamp in milliseconds
     */
    @JsonProperty("maturityDate")
    public int getMaturityDate() {
        return maturityDate;
    }

    /**
     * @return Outstanding balance for this installment in cents
     */
    @JsonProperty("outstandingBalance")
    public int getOutstandingBalance() {
        return outstandingBalance;
    }

    /**
     * @return Total amount for this installment in cents
     */
    @JsonProperty("amount")
    public int getAmount() {
        return amount;
    }

    /**
     * @return Status of this installment
     */
    @JsonProperty("status")
    public BnplLoanStatus getStatus() {
        return status;
    }

    /**
     * @return Type of installment
     */
    @JsonProperty("type")
    public BnplInstallmentType getType() {
        return type;
    }

    /**
     * @return Total amounts paid for this installment
     */
    @JsonProperty("totalPaid")
    public BnplInstallmentTotalPaid getTotalPaid() {
        return totalPaid;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BnplLoanInstallment && equalTo((BnplLoanInstallment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BnplLoanInstallment other) {
        return number == other.number
                && startDate == other.startDate
                && dueDate == other.dueDate
                && maturityDate == other.maturityDate
                && outstandingBalance == other.outstandingBalance
                && amount == other.amount
                && status.equals(other.status)
                && type.equals(other.type)
                && totalPaid.equals(other.totalPaid);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.number,
                this.startDate,
                this.dueDate,
                this.maturityDate,
                this.outstandingBalance,
                this.amount,
                this.status,
                this.type,
                this.totalPaid);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NumberStage builder() {
        return new Builder();
    }

    public interface NumberStage {
        /**
         * <p>Installment number (0 for down payment)</p>
         */
        StartDateStage number(int number);

        Builder from(BnplLoanInstallment other);
    }

    public interface StartDateStage {
        /**
         * <p>Start date as timestamp in milliseconds</p>
         */
        DueDateStage startDate(int startDate);
    }

    public interface DueDateStage {
        /**
         * <p>Due date as timestamp in milliseconds</p>
         */
        MaturityDateStage dueDate(int dueDate);
    }

    public interface MaturityDateStage {
        /**
         * <p>Maturity date as timestamp in milliseconds</p>
         */
        OutstandingBalanceStage maturityDate(int maturityDate);
    }

    public interface OutstandingBalanceStage {
        /**
         * <p>Outstanding balance for this installment in cents</p>
         */
        AmountStage outstandingBalance(int outstandingBalance);
    }

    public interface AmountStage {
        /**
         * <p>Total amount for this installment in cents</p>
         */
        StatusStage amount(int amount);
    }

    public interface StatusStage {
        /**
         * <p>Status of this installment</p>
         */
        TypeStage status(@NotNull BnplLoanStatus status);
    }

    public interface TypeStage {
        /**
         * <p>Type of installment</p>
         */
        TotalPaidStage type(@NotNull BnplInstallmentType type);
    }

    public interface TotalPaidStage {
        /**
         * <p>Total amounts paid for this installment</p>
         */
        _FinalStage totalPaid(@NotNull BnplInstallmentTotalPaid totalPaid);
    }

    public interface _FinalStage {
        BnplLoanInstallment build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NumberStage,
                    StartDateStage,
                    DueDateStage,
                    MaturityDateStage,
                    OutstandingBalanceStage,
                    AmountStage,
                    StatusStage,
                    TypeStage,
                    TotalPaidStage,
                    _FinalStage {
        private int number;

        private int startDate;

        private int dueDate;

        private int maturityDate;

        private int outstandingBalance;

        private int amount;

        private BnplLoanStatus status;

        private BnplInstallmentType type;

        private BnplInstallmentTotalPaid totalPaid;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BnplLoanInstallment other) {
            number(other.getNumber());
            startDate(other.getStartDate());
            dueDate(other.getDueDate());
            maturityDate(other.getMaturityDate());
            outstandingBalance(other.getOutstandingBalance());
            amount(other.getAmount());
            status(other.getStatus());
            type(other.getType());
            totalPaid(other.getTotalPaid());
            return this;
        }

        /**
         * <p>Installment number (0 for down payment)</p>
         * <p>Installment number (0 for down payment)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("number")
        public StartDateStage number(int number) {
            this.number = number;
            return this;
        }

        /**
         * <p>Start date as timestamp in milliseconds</p>
         * <p>Start date as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("startDate")
        public DueDateStage startDate(int startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * <p>Due date as timestamp in milliseconds</p>
         * <p>Due date as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dueDate")
        public MaturityDateStage dueDate(int dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>Maturity date as timestamp in milliseconds</p>
         * <p>Maturity date as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("maturityDate")
        public OutstandingBalanceStage maturityDate(int maturityDate) {
            this.maturityDate = maturityDate;
            return this;
        }

        /**
         * <p>Outstanding balance for this installment in cents</p>
         * <p>Outstanding balance for this installment in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("outstandingBalance")
        public AmountStage outstandingBalance(int outstandingBalance) {
            this.outstandingBalance = outstandingBalance;
            return this;
        }

        /**
         * <p>Total amount for this installment in cents</p>
         * <p>Total amount for this installment in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public StatusStage amount(int amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>Status of this installment</p>
         * <p>Status of this installment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public TypeStage status(@NotNull BnplLoanStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Type of installment</p>
         * <p>Type of installment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public TotalPaidStage type(@NotNull BnplInstallmentType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Total amounts paid for this installment</p>
         * <p>Total amounts paid for this installment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalPaid")
        public _FinalStage totalPaid(@NotNull BnplInstallmentTotalPaid totalPaid) {
            this.totalPaid = Objects.requireNonNull(totalPaid, "totalPaid must not be null");
            return this;
        }

        @java.lang.Override
        public BnplLoanInstallment build() {
            return new BnplLoanInstallment(
                    number,
                    startDate,
                    dueDate,
                    maturityDate,
                    outstandingBalance,
                    amount,
                    status,
                    type,
                    totalPaid,
                    additionalProperties);
        }
    }
}
