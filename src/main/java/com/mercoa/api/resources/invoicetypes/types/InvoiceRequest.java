/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InvoiceRequest.Builder.class)
public final class InvoiceRequest {
    private final Optional<InvoiceStatus> status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> settlementDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<String> payerId;

    private final Optional<String> paymentSourceId;

    private final Optional<PaymentSourceOptions> paymentSourceOptions;

    private final Optional<List<ApprovalSlotAssignment>> approvers;

    private final Optional<String> vendorId;

    private final Optional<String> paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final Optional<List<InvoiceLineItemRequest>> lineItems;

    private final Optional<Map<String, String>> metadata;

    private final Optional<String> foreignId;

    private final Optional<String> uploadedImage;

    private final Optional<String> creatorEntityId;

    private final Optional<String> creatorUserId;

    private final Map<String, Object> additionalProperties;

    private InvoiceRequest(
            Optional<InvoiceStatus> status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> settlementDate,
            Optional<OffsetDateTime> dueDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<String> payerId,
            Optional<String> paymentSourceId,
            Optional<PaymentSourceOptions> paymentSourceOptions,
            Optional<List<ApprovalSlotAssignment>> approvers,
            Optional<String> vendorId,
            Optional<String> paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            Optional<List<InvoiceLineItemRequest>> lineItems,
            Optional<Map<String, String>> metadata,
            Optional<String> foreignId,
            Optional<String> uploadedImage,
            Optional<String> creatorEntityId,
            Optional<String> creatorUserId,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.deductionDate = deductionDate;
        this.settlementDate = settlementDate;
        this.dueDate = dueDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.payerId = payerId;
        this.paymentSourceId = paymentSourceId;
        this.paymentSourceOptions = paymentSourceOptions;
        this.approvers = approvers;
        this.vendorId = vendorId;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.lineItems = lineItems;
        this.metadata = metadata;
        this.foreignId = foreignId;
        this.uploadedImage = uploadedImage;
        this.creatorEntityId = creatorEntityId;
        this.creatorUserId = creatorUserId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Date when funds will be deducted from payer's account.
     */
    @JsonProperty("deductionDate")
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return Date of funds settlement.
     */
    @JsonProperty("settlementDate")
    public Optional<OffsetDateTime> getSettlementDate() {
        return settlementDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    @JsonProperty("invoiceNumber")
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Note to self or memo on invoice.
     */
    @JsonProperty("noteToSelf")
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("serviceStartDate")
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    @JsonProperty("payerId")
    public Optional<String> getPayerId() {
        return payerId;
    }

    /**
     * @return ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.
     */
    @JsonProperty("paymentSourceId")
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    /**
     * @return Options for the payment source. Depending on the payment source, this may include things such as ACH speed.
     */
    @JsonProperty("paymentSourceOptions")
    public Optional<PaymentSourceOptions> getPaymentSourceOptions() {
        return paymentSourceOptions;
    }

    /**
     * @return Set approvers for this invoice.
     */
    @JsonProperty("approvers")
    public Optional<List<ApprovalSlotAssignment>> getApprovers() {
        return approvers;
    }

    @JsonProperty("vendorId")
    public Optional<String> getVendorId() {
        return vendorId;
    }

    /**
     * @return ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.
     */
    @JsonProperty("paymentDestinationId")
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    /**
     * @return Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.
     */
    @JsonProperty("paymentDestinationOptions")
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    @JsonProperty("lineItems")
    public Optional<List<InvoiceLineItemRequest>> getLineItems() {
        return lineItems;
    }

    /**
     * @return Metadata associated with this invoice. You can specify up to 10 keys, with key names up to 40 characters long and values up to 200 characters long.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    /**
     * @return The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.
     */
    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    /**
     * @return Base64 encoded image or PDF of invoice. PNG, JPG, and PDF are supported. 10MB max.
     */
    @JsonProperty("uploadedImage")
    public Optional<String> getUploadedImage() {
        return uploadedImage;
    }

    /**
     * @return ID of entity who created this invoice.
     */
    @JsonProperty("creatorEntityId")
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    /**
     * @return ID of entity user who created this invoice.
     */
    @JsonProperty("creatorUserId")
    public Optional<String> getCreatorUserId() {
        return creatorUserId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceRequest && equalTo((InvoiceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceRequest other) {
        return status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && deductionDate.equals(other.deductionDate)
                && settlementDate.equals(other.settlementDate)
                && dueDate.equals(other.dueDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && payerId.equals(other.payerId)
                && paymentSourceId.equals(other.paymentSourceId)
                && paymentSourceOptions.equals(other.paymentSourceOptions)
                && approvers.equals(other.approvers)
                && vendorId.equals(other.vendorId)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && lineItems.equals(other.lineItems)
                && metadata.equals(other.metadata)
                && foreignId.equals(other.foreignId)
                && uploadedImage.equals(other.uploadedImage)
                && creatorEntityId.equals(other.creatorEntityId)
                && creatorUserId.equals(other.creatorUserId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.deductionDate,
                this.settlementDate,
                this.dueDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.serviceStartDate,
                this.serviceEndDate,
                this.payerId,
                this.paymentSourceId,
                this.paymentSourceOptions,
                this.approvers,
                this.vendorId,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.lineItems,
                this.metadata,
                this.foreignId,
                this.uploadedImage,
                this.creatorEntityId,
                this.creatorUserId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<InvoiceStatus> status = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> settlementDate = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<PaymentSourceOptions> paymentSourceOptions = Optional.empty();

        private Optional<List<ApprovalSlotAssignment>> approvers = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<List<InvoiceLineItemRequest>> lineItems = Optional.empty();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<String> foreignId = Optional.empty();

        private Optional<String> uploadedImage = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Optional<String> creatorUserId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceRequest other) {
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            deductionDate(other.getDeductionDate());
            settlementDate(other.getSettlementDate());
            dueDate(other.getDueDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            payerId(other.getPayerId());
            paymentSourceId(other.getPaymentSourceId());
            paymentSourceOptions(other.getPaymentSourceOptions());
            approvers(other.getApprovers());
            vendorId(other.getVendorId());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            lineItems(other.getLineItems());
            metadata(other.getMetadata());
            foreignId(other.getForeignId());
            uploadedImage(other.getUploadedImage());
            creatorEntityId(other.getCreatorEntityId());
            creatorUserId(other.getCreatorUserId());
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(InvoiceStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Double amount) {
            this.amount = Optional.of(amount);
            return this;
        }

        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(CurrencyCode currency) {
            this.currency = Optional.of(currency);
            return this;
        }

        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public Builder invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        public Builder invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.of(invoiceDate);
            return this;
        }

        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public Builder deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        public Builder deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.of(deductionDate);
            return this;
        }

        @JsonSetter(value = "settlementDate", nulls = Nulls.SKIP)
        public Builder settlementDate(Optional<OffsetDateTime> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        public Builder settlementDate(OffsetDateTime settlementDate) {
            this.settlementDate = Optional.of(settlementDate);
            return this;
        }

        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.of(dueDate);
            return this;
        }

        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.of(invoiceNumber);
            return this;
        }

        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public Builder noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        public Builder noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.of(noteToSelf);
            return this;
        }

        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public Builder serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        public Builder serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.of(serviceStartDate);
            return this;
        }

        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public Builder serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        public Builder serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.of(serviceEndDate);
            return this;
        }

        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public Builder payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        public Builder payerId(String payerId) {
            this.payerId = Optional.of(payerId);
            return this;
        }

        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public Builder paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        public Builder paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.of(paymentSourceId);
            return this;
        }

        @JsonSetter(value = "paymentSourceOptions", nulls = Nulls.SKIP)
        public Builder paymentSourceOptions(Optional<PaymentSourceOptions> paymentSourceOptions) {
            this.paymentSourceOptions = paymentSourceOptions;
            return this;
        }

        public Builder paymentSourceOptions(PaymentSourceOptions paymentSourceOptions) {
            this.paymentSourceOptions = Optional.of(paymentSourceOptions);
            return this;
        }

        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public Builder approvers(Optional<List<ApprovalSlotAssignment>> approvers) {
            this.approvers = approvers;
            return this;
        }

        public Builder approvers(List<ApprovalSlotAssignment> approvers) {
            this.approvers = Optional.of(approvers);
            return this;
        }

        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(String vendorId) {
            this.vendorId = Optional.of(vendorId);
            return this;
        }

        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public Builder paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        public Builder paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.of(paymentDestinationId);
            return this;
        }

        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public Builder paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        public Builder paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.of(paymentDestinationOptions);
            return this;
        }

        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public Builder lineItems(Optional<List<InvoiceLineItemRequest>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        public Builder lineItems(List<InvoiceLineItemRequest> lineItems) {
            this.lineItems = Optional.of(lineItems);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.of(foreignId);
            return this;
        }

        @JsonSetter(value = "uploadedImage", nulls = Nulls.SKIP)
        public Builder uploadedImage(Optional<String> uploadedImage) {
            this.uploadedImage = uploadedImage;
            return this;
        }

        public Builder uploadedImage(String uploadedImage) {
            this.uploadedImage = Optional.of(uploadedImage);
            return this;
        }

        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public Builder creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        public Builder creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.of(creatorEntityId);
            return this;
        }

        @JsonSetter(value = "creatorUserId", nulls = Nulls.SKIP)
        public Builder creatorUserId(Optional<String> creatorUserId) {
            this.creatorUserId = creatorUserId;
            return this;
        }

        public Builder creatorUserId(String creatorUserId) {
            this.creatorUserId = Optional.of(creatorUserId);
            return this;
        }

        public InvoiceRequest build() {
            return new InvoiceRequest(
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    deductionDate,
                    settlementDate,
                    dueDate,
                    invoiceNumber,
                    noteToSelf,
                    serviceStartDate,
                    serviceEndDate,
                    payerId,
                    paymentSourceId,
                    paymentSourceOptions,
                    approvers,
                    vendorId,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    lineItems,
                    metadata,
                    foreignId,
                    uploadedImage,
                    creatorEntityId,
                    creatorUserId,
                    additionalProperties);
        }
    }
}
