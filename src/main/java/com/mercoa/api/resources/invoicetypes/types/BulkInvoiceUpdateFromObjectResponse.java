/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkInvoiceUpdateFromObjectResponse.Builder.class)
public final class BulkInvoiceUpdateFromObjectResponse {
    private final Optional<String> id;

    private final Optional<String> foreignId;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private BulkInvoiceUpdateFromObjectResponse(
            Optional<String> id,
            Optional<String> foreignId,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.foreignId = foreignId;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the invoice that was updated. If the invoice was not updated, this will be undefined
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return If provided, this is the foreign ID of the invoice that was updated.
     */
    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    /**
     * @return The error message if the invoice was not updated
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkInvoiceUpdateFromObjectResponse
                && equalTo((BulkInvoiceUpdateFromObjectResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkInvoiceUpdateFromObjectResponse other) {
        return id.equals(other.id) && foreignId.equals(other.foreignId) && error.equals(other.error);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.foreignId, this.error);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> foreignId = Optional.empty();

        private Optional<String> error = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkInvoiceUpdateFromObjectResponse other) {
            id(other.getId());
            foreignId(other.getForeignId());
            error(other.getError());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        public BulkInvoiceUpdateFromObjectResponse build() {
            return new BulkInvoiceUpdateFromObjectResponse(id, foreignId, error, additionalProperties);
        }
    }
}
