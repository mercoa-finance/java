/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.entitytypes.types.ApprovalPolicyResponse;
import com.mercoa.api.resources.entitytypes.types.CounterpartyResponse;
import com.mercoa.api.resources.entitytypes.types.EntityUserResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceTemplateResponse.Builder.class)
public final class InvoiceTemplateResponse implements IInvoiceResponseBase {
    private final InvoiceStatus status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> nextDeductionDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<String> payerId;

    private final Optional<CounterpartyResponse> payer;

    private final Optional<PaymentMethodResponse> paymentSource;

    private final Optional<String> paymentSourceId;

    private final Optional<String> vendorId;

    private final Optional<CounterpartyResponse> vendor;

    private final Optional<PaymentMethodResponse> paymentDestination;

    private final Optional<String> paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final boolean paymentDestinationConfirmed;

    private final Optional<Boolean> batchPayment;

    private final boolean hasDocuments;

    private final boolean hasSourceEmail;

    private final Optional<List<InvoiceLineItemResponse>> lineItems;

    private final Optional<Double> taxAmount;

    private final Optional<Double> shippingAmount;

    private final List<ApprovalSlot> approvers;

    private final List<ApprovalPolicyResponse> approvalPolicy;

    private final Map<String, String> metadata;

    private final Optional<String> creatorEntityId;

    private final Optional<EntityUserResponse> creatorUser;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<List<CommentResponse>> comments;

    private final Optional<InvoiceFeesResponse> fees;

    private final Optional<PaymentSchedule> paymentSchedule;

    private final Optional<String> ocrJobId;

    private final String id;

    private final Map<String, Object> additionalProperties;

    private InvoiceTemplateResponse(
            InvoiceStatus status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> nextDeductionDate,
            Optional<OffsetDateTime> dueDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<String> payerId,
            Optional<CounterpartyResponse> payer,
            Optional<PaymentMethodResponse> paymentSource,
            Optional<String> paymentSourceId,
            Optional<String> vendorId,
            Optional<CounterpartyResponse> vendor,
            Optional<PaymentMethodResponse> paymentDestination,
            Optional<String> paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            boolean paymentDestinationConfirmed,
            Optional<Boolean> batchPayment,
            boolean hasDocuments,
            boolean hasSourceEmail,
            Optional<List<InvoiceLineItemResponse>> lineItems,
            Optional<Double> taxAmount,
            Optional<Double> shippingAmount,
            List<ApprovalSlot> approvers,
            List<ApprovalPolicyResponse> approvalPolicy,
            Map<String, String> metadata,
            Optional<String> creatorEntityId,
            Optional<EntityUserResponse> creatorUser,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<List<CommentResponse>> comments,
            Optional<InvoiceFeesResponse> fees,
            Optional<PaymentSchedule> paymentSchedule,
            Optional<String> ocrJobId,
            String id,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.deductionDate = deductionDate;
        this.nextDeductionDate = nextDeductionDate;
        this.dueDate = dueDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.payerId = payerId;
        this.payer = payer;
        this.paymentSource = paymentSource;
        this.paymentSourceId = paymentSourceId;
        this.vendorId = vendorId;
        this.vendor = vendor;
        this.paymentDestination = paymentDestination;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.paymentDestinationConfirmed = paymentDestinationConfirmed;
        this.batchPayment = batchPayment;
        this.hasDocuments = hasDocuments;
        this.hasSourceEmail = hasSourceEmail;
        this.lineItems = lineItems;
        this.taxAmount = taxAmount;
        this.shippingAmount = shippingAmount;
        this.approvers = approvers;
        this.approvalPolicy = approvalPolicy;
        this.metadata = metadata;
        this.creatorEntityId = creatorEntityId;
        this.creatorUser = creatorUser;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.comments = comments;
        this.fees = fees;
        this.paymentSchedule = paymentSchedule;
        this.ocrJobId = ocrJobId;
        this.id = id;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    @java.lang.Override
    public InvoiceStatus getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units
     */
    @JsonProperty("amount")
    @java.lang.Override
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    @java.lang.Override
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Initial date when funds are scheduled to be deducted from payer's account. The actual deduction date may differ from this date, and will be reflected in the processedAt field.
     */
    @JsonProperty("deductionDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return For invoice templates, this is the date when the next recurring payment will be scheduled.
     */
    @JsonProperty("nextDeductionDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getNextDeductionDate() {
        return nextDeductionDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    @JsonProperty("invoiceNumber")
    @java.lang.Override
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonProperty("noteToSelf")
    @java.lang.Override
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("serviceStartDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    @JsonProperty("payerId")
    @java.lang.Override
    public Optional<String> getPayerId() {
        return payerId;
    }

    @JsonProperty("payer")
    @java.lang.Override
    public Optional<CounterpartyResponse> getPayer() {
        return payer;
    }

    @JsonProperty("paymentSource")
    @java.lang.Override
    public Optional<PaymentMethodResponse> getPaymentSource() {
        return paymentSource;
    }

    @JsonProperty("paymentSourceId")
    @java.lang.Override
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    @JsonProperty("vendorId")
    @java.lang.Override
    public Optional<String> getVendorId() {
        return vendorId;
    }

    @JsonProperty("vendor")
    @java.lang.Override
    public Optional<CounterpartyResponse> getVendor() {
        return vendor;
    }

    @JsonProperty("paymentDestination")
    @java.lang.Override
    public Optional<PaymentMethodResponse> getPaymentDestination() {
        return paymentDestination;
    }

    @JsonProperty("paymentDestinationId")
    @java.lang.Override
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    @JsonProperty("paymentDestinationOptions")
    @java.lang.Override
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    /**
     * @return True if the payment destination has been confirmed by the vendor. False if the payment destination has been set (for example, a check to an address) but has not been confirmed by the vendor.
     */
    @JsonProperty("paymentDestinationConfirmed")
    @java.lang.Override
    public boolean getPaymentDestinationConfirmed() {
        return paymentDestinationConfirmed;
    }

    /**
     * @return If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.
     */
    @JsonProperty("batchPayment")
    @java.lang.Override
    public Optional<Boolean> getBatchPayment() {
        return batchPayment;
    }

    /**
     * @return True if the invoice has documents attached.
     */
    @JsonProperty("hasDocuments")
    @java.lang.Override
    public boolean getHasDocuments() {
        return hasDocuments;
    }

    /**
     * @return True if the invoice was created by an incoming email.
     */
    @JsonProperty("hasSourceEmail")
    @java.lang.Override
    public boolean getHasSourceEmail() {
        return hasSourceEmail;
    }

    @JsonProperty("lineItems")
    @java.lang.Override
    public Optional<List<InvoiceLineItemResponse>> getLineItems() {
        return lineItems;
    }

    /**
     * @return Tax amount for this invoice.
     */
    @JsonProperty("taxAmount")
    @java.lang.Override
    public Optional<Double> getTaxAmount() {
        return taxAmount;
    }

    /**
     * @return Shipping amount for this invoice.
     */
    @JsonProperty("shippingAmount")
    @java.lang.Override
    public Optional<Double> getShippingAmount() {
        return shippingAmount;
    }

    @JsonProperty("approvers")
    @java.lang.Override
    public List<ApprovalSlot> getApprovers() {
        return approvers;
    }

    @JsonProperty("approvalPolicy")
    @java.lang.Override
    public List<ApprovalPolicyResponse> getApprovalPolicy() {
        return approvalPolicy;
    }

    /**
     * @return Metadata associated with this invoice.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return The ID of the entity who created this invoice.
     */
    @JsonProperty("creatorEntityId")
    @java.lang.Override
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    /**
     * @return Entity user who created this invoice.
     */
    @JsonProperty("creatorUser")
    @java.lang.Override
    public Optional<EntityUserResponse> getCreatorUser() {
        return creatorUser;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("comments")
    @java.lang.Override
    public Optional<List<CommentResponse>> getComments() {
        return comments;
    }

    /**
     * @return Fees associated with this invoice.
     */
    @JsonProperty("fees")
    @java.lang.Override
    public Optional<InvoiceFeesResponse> getFees() {
        return fees;
    }

    /**
     * @return If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.
     */
    @JsonProperty("paymentSchedule")
    @java.lang.Override
    public Optional<PaymentSchedule> getPaymentSchedule() {
        return paymentSchedule;
    }

    /**
     * @return ID of the OCR job that processed this invoice.
     */
    @JsonProperty("ocrJobId")
    @java.lang.Override
    public Optional<String> getOcrJobId() {
        return ocrJobId;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceTemplateResponse && equalTo((InvoiceTemplateResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceTemplateResponse other) {
        return status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && deductionDate.equals(other.deductionDate)
                && nextDeductionDate.equals(other.nextDeductionDate)
                && dueDate.equals(other.dueDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && payerId.equals(other.payerId)
                && payer.equals(other.payer)
                && paymentSource.equals(other.paymentSource)
                && paymentSourceId.equals(other.paymentSourceId)
                && vendorId.equals(other.vendorId)
                && vendor.equals(other.vendor)
                && paymentDestination.equals(other.paymentDestination)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && paymentDestinationConfirmed == other.paymentDestinationConfirmed
                && batchPayment.equals(other.batchPayment)
                && hasDocuments == other.hasDocuments
                && hasSourceEmail == other.hasSourceEmail
                && lineItems.equals(other.lineItems)
                && taxAmount.equals(other.taxAmount)
                && shippingAmount.equals(other.shippingAmount)
                && approvers.equals(other.approvers)
                && approvalPolicy.equals(other.approvalPolicy)
                && metadata.equals(other.metadata)
                && creatorEntityId.equals(other.creatorEntityId)
                && creatorUser.equals(other.creatorUser)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && comments.equals(other.comments)
                && fees.equals(other.fees)
                && paymentSchedule.equals(other.paymentSchedule)
                && ocrJobId.equals(other.ocrJobId)
                && id.equals(other.id);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.deductionDate,
                this.nextDeductionDate,
                this.dueDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.serviceStartDate,
                this.serviceEndDate,
                this.payerId,
                this.payer,
                this.paymentSource,
                this.paymentSourceId,
                this.vendorId,
                this.vendor,
                this.paymentDestination,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.paymentDestinationConfirmed,
                this.batchPayment,
                this.hasDocuments,
                this.hasSourceEmail,
                this.lineItems,
                this.taxAmount,
                this.shippingAmount,
                this.approvers,
                this.approvalPolicy,
                this.metadata,
                this.creatorEntityId,
                this.creatorUser,
                this.createdAt,
                this.updatedAt,
                this.comments,
                this.fees,
                this.paymentSchedule,
                this.ocrJobId,
                this.id);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        PaymentDestinationConfirmedStage status(@NotNull InvoiceStatus status);

        Builder from(InvoiceTemplateResponse other);
    }

    public interface PaymentDestinationConfirmedStage {
        HasDocumentsStage paymentDestinationConfirmed(boolean paymentDestinationConfirmed);
    }

    public interface HasDocumentsStage {
        HasSourceEmailStage hasDocuments(boolean hasDocuments);
    }

    public interface HasSourceEmailStage {
        CreatedAtStage hasSourceEmail(boolean hasSourceEmail);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        IdStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface IdStage {
        _FinalStage id(@NotNull String id);
    }

    public interface _FinalStage {
        InvoiceTemplateResponse build();

        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);

        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate);

        _FinalStage invoiceDate(OffsetDateTime invoiceDate);

        _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate);

        _FinalStage deductionDate(OffsetDateTime deductionDate);

        _FinalStage nextDeductionDate(Optional<OffsetDateTime> nextDeductionDate);

        _FinalStage nextDeductionDate(OffsetDateTime nextDeductionDate);

        _FinalStage dueDate(Optional<OffsetDateTime> dueDate);

        _FinalStage dueDate(OffsetDateTime dueDate);

        _FinalStage invoiceNumber(Optional<String> invoiceNumber);

        _FinalStage invoiceNumber(String invoiceNumber);

        _FinalStage noteToSelf(Optional<String> noteToSelf);

        _FinalStage noteToSelf(String noteToSelf);

        _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate);

        _FinalStage serviceStartDate(OffsetDateTime serviceStartDate);

        _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate);

        _FinalStage serviceEndDate(OffsetDateTime serviceEndDate);

        _FinalStage payerId(Optional<String> payerId);

        _FinalStage payerId(String payerId);

        _FinalStage payer(Optional<CounterpartyResponse> payer);

        _FinalStage payer(CounterpartyResponse payer);

        _FinalStage paymentSource(Optional<PaymentMethodResponse> paymentSource);

        _FinalStage paymentSource(PaymentMethodResponse paymentSource);

        _FinalStage paymentSourceId(Optional<String> paymentSourceId);

        _FinalStage paymentSourceId(String paymentSourceId);

        _FinalStage vendorId(Optional<String> vendorId);

        _FinalStage vendorId(String vendorId);

        _FinalStage vendor(Optional<CounterpartyResponse> vendor);

        _FinalStage vendor(CounterpartyResponse vendor);

        _FinalStage paymentDestination(Optional<PaymentMethodResponse> paymentDestination);

        _FinalStage paymentDestination(PaymentMethodResponse paymentDestination);

        _FinalStage paymentDestinationId(Optional<String> paymentDestinationId);

        _FinalStage paymentDestinationId(String paymentDestinationId);

        _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions);

        _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions);

        _FinalStage batchPayment(Optional<Boolean> batchPayment);

        _FinalStage batchPayment(Boolean batchPayment);

        _FinalStage lineItems(Optional<List<InvoiceLineItemResponse>> lineItems);

        _FinalStage lineItems(List<InvoiceLineItemResponse> lineItems);

        _FinalStage taxAmount(Optional<Double> taxAmount);

        _FinalStage taxAmount(Double taxAmount);

        _FinalStage shippingAmount(Optional<Double> shippingAmount);

        _FinalStage shippingAmount(Double shippingAmount);

        _FinalStage approvers(List<ApprovalSlot> approvers);

        _FinalStage addApprovers(ApprovalSlot approvers);

        _FinalStage addAllApprovers(List<ApprovalSlot> approvers);

        _FinalStage approvalPolicy(List<ApprovalPolicyResponse> approvalPolicy);

        _FinalStage addApprovalPolicy(ApprovalPolicyResponse approvalPolicy);

        _FinalStage addAllApprovalPolicy(List<ApprovalPolicyResponse> approvalPolicy);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        _FinalStage creatorEntityId(Optional<String> creatorEntityId);

        _FinalStage creatorEntityId(String creatorEntityId);

        _FinalStage creatorUser(Optional<EntityUserResponse> creatorUser);

        _FinalStage creatorUser(EntityUserResponse creatorUser);

        _FinalStage comments(Optional<List<CommentResponse>> comments);

        _FinalStage comments(List<CommentResponse> comments);

        _FinalStage fees(Optional<InvoiceFeesResponse> fees);

        _FinalStage fees(InvoiceFeesResponse fees);

        _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule);

        _FinalStage paymentSchedule(PaymentSchedule paymentSchedule);

        _FinalStage ocrJobId(Optional<String> ocrJobId);

        _FinalStage ocrJobId(String ocrJobId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatusStage,
                    PaymentDestinationConfirmedStage,
                    HasDocumentsStage,
                    HasSourceEmailStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    IdStage,
                    _FinalStage {
        private InvoiceStatus status;

        private boolean paymentDestinationConfirmed;

        private boolean hasDocuments;

        private boolean hasSourceEmail;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String id;

        private Optional<String> ocrJobId = Optional.empty();

        private Optional<PaymentSchedule> paymentSchedule = Optional.empty();

        private Optional<InvoiceFeesResponse> fees = Optional.empty();

        private Optional<List<CommentResponse>> comments = Optional.empty();

        private Optional<EntityUserResponse> creatorUser = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private List<ApprovalPolicyResponse> approvalPolicy = new ArrayList<>();

        private List<ApprovalSlot> approvers = new ArrayList<>();

        private Optional<Double> shippingAmount = Optional.empty();

        private Optional<Double> taxAmount = Optional.empty();

        private Optional<List<InvoiceLineItemResponse>> lineItems = Optional.empty();

        private Optional<Boolean> batchPayment = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<PaymentMethodResponse> paymentDestination = Optional.empty();

        private Optional<CounterpartyResponse> vendor = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<PaymentMethodResponse> paymentSource = Optional.empty();

        private Optional<CounterpartyResponse> payer = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<OffsetDateTime> nextDeductionDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceTemplateResponse other) {
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            deductionDate(other.getDeductionDate());
            nextDeductionDate(other.getNextDeductionDate());
            dueDate(other.getDueDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            payerId(other.getPayerId());
            payer(other.getPayer());
            paymentSource(other.getPaymentSource());
            paymentSourceId(other.getPaymentSourceId());
            vendorId(other.getVendorId());
            vendor(other.getVendor());
            paymentDestination(other.getPaymentDestination());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            paymentDestinationConfirmed(other.getPaymentDestinationConfirmed());
            batchPayment(other.getBatchPayment());
            hasDocuments(other.getHasDocuments());
            hasSourceEmail(other.getHasSourceEmail());
            lineItems(other.getLineItems());
            taxAmount(other.getTaxAmount());
            shippingAmount(other.getShippingAmount());
            approvers(other.getApprovers());
            approvalPolicy(other.getApprovalPolicy());
            metadata(other.getMetadata());
            creatorEntityId(other.getCreatorEntityId());
            creatorUser(other.getCreatorUser());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            comments(other.getComments());
            fees(other.getFees());
            paymentSchedule(other.getPaymentSchedule());
            ocrJobId(other.getOcrJobId());
            id(other.getId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public PaymentDestinationConfirmedStage status(@NotNull InvoiceStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>True if the payment destination has been confirmed by the vendor. False if the payment destination has been set (for example, a check to an address) but has not been confirmed by the vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDestinationConfirmed")
        public HasDocumentsStage paymentDestinationConfirmed(boolean paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = paymentDestinationConfirmed;
            return this;
        }

        /**
         * <p>True if the invoice has documents attached.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasDocuments")
        public HasSourceEmailStage hasDocuments(boolean hasDocuments) {
            this.hasDocuments = hasDocuments;
            return this;
        }

        /**
         * <p>True if the invoice was created by an incoming email.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasSourceEmail")
        public CreatedAtStage hasSourceEmail(boolean hasSourceEmail) {
            this.hasSourceEmail = hasSourceEmail;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public IdStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>ID of the OCR job that processed this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrJobId(String ocrJobId) {
            this.ocrJobId = Optional.ofNullable(ocrJobId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ocrJobId", nulls = Nulls.SKIP)
        public _FinalStage ocrJobId(Optional<String> ocrJobId) {
            this.ocrJobId = ocrJobId;
            return this;
        }

        /**
         * <p>If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentSchedule(PaymentSchedule paymentSchedule) {
            this.paymentSchedule = Optional.ofNullable(paymentSchedule);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSchedule", nulls = Nulls.SKIP)
        public _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule) {
            this.paymentSchedule = paymentSchedule;
            return this;
        }

        /**
         * <p>Fees associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fees(InvoiceFeesResponse fees) {
            this.fees = Optional.ofNullable(fees);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fees", nulls = Nulls.SKIP)
        public _FinalStage fees(Optional<InvoiceFeesResponse> fees) {
            this.fees = fees;
            return this;
        }

        @java.lang.Override
        public _FinalStage comments(List<CommentResponse> comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "comments", nulls = Nulls.SKIP)
        public _FinalStage comments(Optional<List<CommentResponse>> comments) {
            this.comments = comments;
            return this;
        }

        /**
         * <p>Entity user who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorUser(EntityUserResponse creatorUser) {
            this.creatorUser = Optional.ofNullable(creatorUser);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creatorUser", nulls = Nulls.SKIP)
        public _FinalStage creatorUser(Optional<EntityUserResponse> creatorUser) {
            this.creatorUser = creatorUser;
            return this;
        }

        /**
         * <p>The ID of the entity who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public _FinalStage creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllApprovalPolicy(List<ApprovalPolicyResponse> approvalPolicy) {
            this.approvalPolicy.addAll(approvalPolicy);
            return this;
        }

        @java.lang.Override
        public _FinalStage addApprovalPolicy(ApprovalPolicyResponse approvalPolicy) {
            this.approvalPolicy.add(approvalPolicy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "approvalPolicy", nulls = Nulls.SKIP)
        public _FinalStage approvalPolicy(List<ApprovalPolicyResponse> approvalPolicy) {
            this.approvalPolicy.clear();
            this.approvalPolicy.addAll(approvalPolicy);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllApprovers(List<ApprovalSlot> approvers) {
            this.approvers.addAll(approvers);
            return this;
        }

        @java.lang.Override
        public _FinalStage addApprovers(ApprovalSlot approvers) {
            this.approvers.add(approvers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public _FinalStage approvers(List<ApprovalSlot> approvers) {
            this.approvers.clear();
            this.approvers.addAll(approvers);
            return this;
        }

        /**
         * <p>Shipping amount for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shippingAmount(Double shippingAmount) {
            this.shippingAmount = Optional.ofNullable(shippingAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "shippingAmount", nulls = Nulls.SKIP)
        public _FinalStage shippingAmount(Optional<Double> shippingAmount) {
            this.shippingAmount = shippingAmount;
            return this;
        }

        /**
         * <p>Tax amount for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage taxAmount(Double taxAmount) {
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "taxAmount", nulls = Nulls.SKIP)
        public _FinalStage taxAmount(Optional<Double> taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage lineItems(List<InvoiceLineItemResponse> lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public _FinalStage lineItems(Optional<List<InvoiceLineItemResponse>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchPayment(Boolean batchPayment) {
            this.batchPayment = Optional.ofNullable(batchPayment);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "batchPayment", nulls = Nulls.SKIP)
        public _FinalStage batchPayment(Optional<Boolean> batchPayment) {
            this.batchPayment = batchPayment;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.ofNullable(paymentDestinationOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.ofNullable(paymentDestinationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestination(PaymentMethodResponse paymentDestination) {
            this.paymentDestination = Optional.ofNullable(paymentDestination);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestination", nulls = Nulls.SKIP)
        public _FinalStage paymentDestination(Optional<PaymentMethodResponse> paymentDestination) {
            this.paymentDestination = paymentDestination;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendor(CounterpartyResponse vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendor", nulls = Nulls.SKIP)
        public _FinalStage vendor(Optional<CounterpartyResponse> vendor) {
            this.vendor = vendor;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorId(String vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.ofNullable(paymentSourceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public _FinalStage paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSource(PaymentMethodResponse paymentSource) {
            this.paymentSource = Optional.ofNullable(paymentSource);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSource", nulls = Nulls.SKIP)
        public _FinalStage paymentSource(Optional<PaymentMethodResponse> paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }

        @java.lang.Override
        public _FinalStage payer(CounterpartyResponse payer) {
            this.payer = Optional.ofNullable(payer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payer", nulls = Nulls.SKIP)
        public _FinalStage payer(Optional<CounterpartyResponse> payer) {
            this.payer = payer;
            return this;
        }

        @java.lang.Override
        public _FinalStage payerId(String payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public _FinalStage payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.ofNullable(serviceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.ofNullable(serviceStartDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.ofNullable(noteToSelf);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public _FinalStage noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public _FinalStage invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public _FinalStage dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>For invoice templates, this is the date when the next recurring payment will be scheduled.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nextDeductionDate(OffsetDateTime nextDeductionDate) {
            this.nextDeductionDate = Optional.ofNullable(nextDeductionDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nextDeductionDate", nulls = Nulls.SKIP)
        public _FinalStage nextDeductionDate(Optional<OffsetDateTime> nextDeductionDate) {
            this.nextDeductionDate = nextDeductionDate;
            return this;
        }

        /**
         * <p>Initial date when funds are scheduled to be deducted from payer's account. The actual deduction date may differ from this date, and will be reflected in the processedAt field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.ofNullable(deductionDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Total amount of invoice in major units</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public InvoiceTemplateResponse build() {
            return new InvoiceTemplateResponse(
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    deductionDate,
                    nextDeductionDate,
                    dueDate,
                    invoiceNumber,
                    noteToSelf,
                    serviceStartDate,
                    serviceEndDate,
                    payerId,
                    payer,
                    paymentSource,
                    paymentSourceId,
                    vendorId,
                    vendor,
                    paymentDestination,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    paymentDestinationConfirmed,
                    batchPayment,
                    hasDocuments,
                    hasSourceEmail,
                    lineItems,
                    taxAmount,
                    shippingAmount,
                    approvers,
                    approvalPolicy,
                    metadata,
                    creatorEntityId,
                    creatorUser,
                    createdAt,
                    updatedAt,
                    comments,
                    fees,
                    paymentSchedule,
                    ocrJobId,
                    id,
                    additionalProperties);
        }
    }
}
