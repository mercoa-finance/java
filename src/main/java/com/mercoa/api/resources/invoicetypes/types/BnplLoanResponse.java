/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BnplLoanResponse.Builder.class)
public final class BnplLoanResponse {
    private final String loanId;

    private final String businessExternalId;

    private final int dueDate;

    private final int originalPrincipalBalance;

    private final int drawDate;

    private final int repaidAmount;

    private final String paymentMethodId;

    private final String repaymentMethodId;

    private final BnplLoanStatus status;

    private final BnplOutstandingBalance outstandingBalance;

    private final Optional<String> termsAgreementFile;

    private final Optional<String> invoiceUrl;

    private final int invoiceAmount;

    private final String invoiceExternalId;

    private final int invoiceDueDate;

    private final int downPaymentAmount;

    private final List<BnplLoanInstallment> installments;

    private final BnplCadence cadence;

    private final double baseFeeRate;

    private final Map<String, Object> additionalProperties;

    private BnplLoanResponse(
            String loanId,
            String businessExternalId,
            int dueDate,
            int originalPrincipalBalance,
            int drawDate,
            int repaidAmount,
            String paymentMethodId,
            String repaymentMethodId,
            BnplLoanStatus status,
            BnplOutstandingBalance outstandingBalance,
            Optional<String> termsAgreementFile,
            Optional<String> invoiceUrl,
            int invoiceAmount,
            String invoiceExternalId,
            int invoiceDueDate,
            int downPaymentAmount,
            List<BnplLoanInstallment> installments,
            BnplCadence cadence,
            double baseFeeRate,
            Map<String, Object> additionalProperties) {
        this.loanId = loanId;
        this.businessExternalId = businessExternalId;
        this.dueDate = dueDate;
        this.originalPrincipalBalance = originalPrincipalBalance;
        this.drawDate = drawDate;
        this.repaidAmount = repaidAmount;
        this.paymentMethodId = paymentMethodId;
        this.repaymentMethodId = repaymentMethodId;
        this.status = status;
        this.outstandingBalance = outstandingBalance;
        this.termsAgreementFile = termsAgreementFile;
        this.invoiceUrl = invoiceUrl;
        this.invoiceAmount = invoiceAmount;
        this.invoiceExternalId = invoiceExternalId;
        this.invoiceDueDate = invoiceDueDate;
        this.downPaymentAmount = downPaymentAmount;
        this.installments = installments;
        this.cadence = cadence;
        this.baseFeeRate = baseFeeRate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for the loan
     */
    @JsonProperty("loanId")
    public String getLoanId() {
        return loanId;
    }

    /**
     * @return The external ID of the business entity
     */
    @JsonProperty("businessExternalId")
    public String getBusinessExternalId() {
        return businessExternalId;
    }

    /**
     * @return The final due date as timestamp in milliseconds
     */
    @JsonProperty("dueDate")
    public int getDueDate() {
        return dueDate;
    }

    /**
     * @return The original principal balance in cents
     */
    @JsonProperty("originalPrincipalBalance")
    public int getOriginalPrincipalBalance() {
        return originalPrincipalBalance;
    }

    /**
     * @return The date the loan was drawn as timestamp in milliseconds
     */
    @JsonProperty("drawDate")
    public int getDrawDate() {
        return drawDate;
    }

    /**
     * @return The total amount repaid in cents
     */
    @JsonProperty("repaidAmount")
    public int getRepaidAmount() {
        return repaidAmount;
    }

    /**
     * @return The ID of the payment method used
     */
    @JsonProperty("paymentMethodId")
    public String getPaymentMethodId() {
        return paymentMethodId;
    }

    /**
     * @return The ID of the repayment method
     */
    @JsonProperty("repaymentMethodId")
    public String getRepaymentMethodId() {
        return repaymentMethodId;
    }

    /**
     * @return The current status of the loan
     */
    @JsonProperty("status")
    public BnplLoanStatus getStatus() {
        return status;
    }

    /**
     * @return The current outstanding balance breakdown
     */
    @JsonProperty("outstandingBalance")
    public BnplOutstandingBalance getOutstandingBalance() {
        return outstandingBalance;
    }

    /**
     * @return URL to the terms agreement file
     */
    @JsonProperty("termsAgreementFile")
    public Optional<String> getTermsAgreementFile() {
        return termsAgreementFile;
    }

    /**
     * @return URL to the invoice PDF
     */
    @JsonProperty("invoiceUrl")
    public Optional<String> getInvoiceUrl() {
        return invoiceUrl;
    }

    /**
     * @return The original invoice amount in cents
     */
    @JsonProperty("invoiceAmount")
    public int getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     * @return The external ID of the associated invoice
     */
    @JsonProperty("invoiceExternalId")
    public String getInvoiceExternalId() {
        return invoiceExternalId;
    }

    /**
     * @return The original invoice due date as timestamp in milliseconds
     */
    @JsonProperty("invoiceDueDate")
    public int getInvoiceDueDate() {
        return invoiceDueDate;
    }

    /**
     * @return The down payment amount in cents
     */
    @JsonProperty("downPaymentAmount")
    public int getDownPaymentAmount() {
        return downPaymentAmount;
    }

    /**
     * @return List of all installments for this loan
     */
    @JsonProperty("installments")
    public List<BnplLoanInstallment> getInstallments() {
        return installments;
    }

    /**
     * @return The payment cadence for the loan
     */
    @JsonProperty("cadence")
    public BnplCadence getCadence() {
        return cadence;
    }

    /**
     * @return The base fee rate as a percentage
     */
    @JsonProperty("baseFeeRate")
    public double getBaseFeeRate() {
        return baseFeeRate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BnplLoanResponse && equalTo((BnplLoanResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BnplLoanResponse other) {
        return loanId.equals(other.loanId)
                && businessExternalId.equals(other.businessExternalId)
                && dueDate == other.dueDate
                && originalPrincipalBalance == other.originalPrincipalBalance
                && drawDate == other.drawDate
                && repaidAmount == other.repaidAmount
                && paymentMethodId.equals(other.paymentMethodId)
                && repaymentMethodId.equals(other.repaymentMethodId)
                && status.equals(other.status)
                && outstandingBalance.equals(other.outstandingBalance)
                && termsAgreementFile.equals(other.termsAgreementFile)
                && invoiceUrl.equals(other.invoiceUrl)
                && invoiceAmount == other.invoiceAmount
                && invoiceExternalId.equals(other.invoiceExternalId)
                && invoiceDueDate == other.invoiceDueDate
                && downPaymentAmount == other.downPaymentAmount
                && installments.equals(other.installments)
                && cadence.equals(other.cadence)
                && baseFeeRate == other.baseFeeRate;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.loanId,
                this.businessExternalId,
                this.dueDate,
                this.originalPrincipalBalance,
                this.drawDate,
                this.repaidAmount,
                this.paymentMethodId,
                this.repaymentMethodId,
                this.status,
                this.outstandingBalance,
                this.termsAgreementFile,
                this.invoiceUrl,
                this.invoiceAmount,
                this.invoiceExternalId,
                this.invoiceDueDate,
                this.downPaymentAmount,
                this.installments,
                this.cadence,
                this.baseFeeRate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LoanIdStage builder() {
        return new Builder();
    }

    public interface LoanIdStage {
        /**
         * <p>The unique identifier for the loan</p>
         */
        BusinessExternalIdStage loanId(@NotNull String loanId);

        Builder from(BnplLoanResponse other);
    }

    public interface BusinessExternalIdStage {
        /**
         * <p>The external ID of the business entity</p>
         */
        DueDateStage businessExternalId(@NotNull String businessExternalId);
    }

    public interface DueDateStage {
        /**
         * <p>The final due date as timestamp in milliseconds</p>
         */
        OriginalPrincipalBalanceStage dueDate(int dueDate);
    }

    public interface OriginalPrincipalBalanceStage {
        /**
         * <p>The original principal balance in cents</p>
         */
        DrawDateStage originalPrincipalBalance(int originalPrincipalBalance);
    }

    public interface DrawDateStage {
        /**
         * <p>The date the loan was drawn as timestamp in milliseconds</p>
         */
        RepaidAmountStage drawDate(int drawDate);
    }

    public interface RepaidAmountStage {
        /**
         * <p>The total amount repaid in cents</p>
         */
        PaymentMethodIdStage repaidAmount(int repaidAmount);
    }

    public interface PaymentMethodIdStage {
        /**
         * <p>The ID of the payment method used</p>
         */
        RepaymentMethodIdStage paymentMethodId(@NotNull String paymentMethodId);
    }

    public interface RepaymentMethodIdStage {
        /**
         * <p>The ID of the repayment method</p>
         */
        StatusStage repaymentMethodId(@NotNull String repaymentMethodId);
    }

    public interface StatusStage {
        /**
         * <p>The current status of the loan</p>
         */
        OutstandingBalanceStage status(@NotNull BnplLoanStatus status);
    }

    public interface OutstandingBalanceStage {
        /**
         * <p>The current outstanding balance breakdown</p>
         */
        InvoiceAmountStage outstandingBalance(@NotNull BnplOutstandingBalance outstandingBalance);
    }

    public interface InvoiceAmountStage {
        /**
         * <p>The original invoice amount in cents</p>
         */
        InvoiceExternalIdStage invoiceAmount(int invoiceAmount);
    }

    public interface InvoiceExternalIdStage {
        /**
         * <p>The external ID of the associated invoice</p>
         */
        InvoiceDueDateStage invoiceExternalId(@NotNull String invoiceExternalId);
    }

    public interface InvoiceDueDateStage {
        /**
         * <p>The original invoice due date as timestamp in milliseconds</p>
         */
        DownPaymentAmountStage invoiceDueDate(int invoiceDueDate);
    }

    public interface DownPaymentAmountStage {
        /**
         * <p>The down payment amount in cents</p>
         */
        CadenceStage downPaymentAmount(int downPaymentAmount);
    }

    public interface CadenceStage {
        /**
         * <p>The payment cadence for the loan</p>
         */
        BaseFeeRateStage cadence(@NotNull BnplCadence cadence);
    }

    public interface BaseFeeRateStage {
        /**
         * <p>The base fee rate as a percentage</p>
         */
        _FinalStage baseFeeRate(double baseFeeRate);
    }

    public interface _FinalStage {
        BnplLoanResponse build();

        /**
         * <p>URL to the terms agreement file</p>
         */
        _FinalStage termsAgreementFile(Optional<String> termsAgreementFile);

        _FinalStage termsAgreementFile(String termsAgreementFile);

        /**
         * <p>URL to the invoice PDF</p>
         */
        _FinalStage invoiceUrl(Optional<String> invoiceUrl);

        _FinalStage invoiceUrl(String invoiceUrl);

        /**
         * <p>List of all installments for this loan</p>
         */
        _FinalStage installments(List<BnplLoanInstallment> installments);

        _FinalStage addInstallments(BnplLoanInstallment installments);

        _FinalStage addAllInstallments(List<BnplLoanInstallment> installments);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements LoanIdStage,
                    BusinessExternalIdStage,
                    DueDateStage,
                    OriginalPrincipalBalanceStage,
                    DrawDateStage,
                    RepaidAmountStage,
                    PaymentMethodIdStage,
                    RepaymentMethodIdStage,
                    StatusStage,
                    OutstandingBalanceStage,
                    InvoiceAmountStage,
                    InvoiceExternalIdStage,
                    InvoiceDueDateStage,
                    DownPaymentAmountStage,
                    CadenceStage,
                    BaseFeeRateStage,
                    _FinalStage {
        private String loanId;

        private String businessExternalId;

        private int dueDate;

        private int originalPrincipalBalance;

        private int drawDate;

        private int repaidAmount;

        private String paymentMethodId;

        private String repaymentMethodId;

        private BnplLoanStatus status;

        private BnplOutstandingBalance outstandingBalance;

        private int invoiceAmount;

        private String invoiceExternalId;

        private int invoiceDueDate;

        private int downPaymentAmount;

        private BnplCadence cadence;

        private double baseFeeRate;

        private List<BnplLoanInstallment> installments = new ArrayList<>();

        private Optional<String> invoiceUrl = Optional.empty();

        private Optional<String> termsAgreementFile = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BnplLoanResponse other) {
            loanId(other.getLoanId());
            businessExternalId(other.getBusinessExternalId());
            dueDate(other.getDueDate());
            originalPrincipalBalance(other.getOriginalPrincipalBalance());
            drawDate(other.getDrawDate());
            repaidAmount(other.getRepaidAmount());
            paymentMethodId(other.getPaymentMethodId());
            repaymentMethodId(other.getRepaymentMethodId());
            status(other.getStatus());
            outstandingBalance(other.getOutstandingBalance());
            termsAgreementFile(other.getTermsAgreementFile());
            invoiceUrl(other.getInvoiceUrl());
            invoiceAmount(other.getInvoiceAmount());
            invoiceExternalId(other.getInvoiceExternalId());
            invoiceDueDate(other.getInvoiceDueDate());
            downPaymentAmount(other.getDownPaymentAmount());
            installments(other.getInstallments());
            cadence(other.getCadence());
            baseFeeRate(other.getBaseFeeRate());
            return this;
        }

        /**
         * <p>The unique identifier for the loan</p>
         * <p>The unique identifier for the loan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("loanId")
        public BusinessExternalIdStage loanId(@NotNull String loanId) {
            this.loanId = Objects.requireNonNull(loanId, "loanId must not be null");
            return this;
        }

        /**
         * <p>The external ID of the business entity</p>
         * <p>The external ID of the business entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("businessExternalId")
        public DueDateStage businessExternalId(@NotNull String businessExternalId) {
            this.businessExternalId = Objects.requireNonNull(businessExternalId, "businessExternalId must not be null");
            return this;
        }

        /**
         * <p>The final due date as timestamp in milliseconds</p>
         * <p>The final due date as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dueDate")
        public OriginalPrincipalBalanceStage dueDate(int dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>The original principal balance in cents</p>
         * <p>The original principal balance in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("originalPrincipalBalance")
        public DrawDateStage originalPrincipalBalance(int originalPrincipalBalance) {
            this.originalPrincipalBalance = originalPrincipalBalance;
            return this;
        }

        /**
         * <p>The date the loan was drawn as timestamp in milliseconds</p>
         * <p>The date the loan was drawn as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("drawDate")
        public RepaidAmountStage drawDate(int drawDate) {
            this.drawDate = drawDate;
            return this;
        }

        /**
         * <p>The total amount repaid in cents</p>
         * <p>The total amount repaid in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("repaidAmount")
        public PaymentMethodIdStage repaidAmount(int repaidAmount) {
            this.repaidAmount = repaidAmount;
            return this;
        }

        /**
         * <p>The ID of the payment method used</p>
         * <p>The ID of the payment method used</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentMethodId")
        public RepaymentMethodIdStage paymentMethodId(@NotNull String paymentMethodId) {
            this.paymentMethodId = Objects.requireNonNull(paymentMethodId, "paymentMethodId must not be null");
            return this;
        }

        /**
         * <p>The ID of the repayment method</p>
         * <p>The ID of the repayment method</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("repaymentMethodId")
        public StatusStage repaymentMethodId(@NotNull String repaymentMethodId) {
            this.repaymentMethodId = Objects.requireNonNull(repaymentMethodId, "repaymentMethodId must not be null");
            return this;
        }

        /**
         * <p>The current status of the loan</p>
         * <p>The current status of the loan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public OutstandingBalanceStage status(@NotNull BnplLoanStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The current outstanding balance breakdown</p>
         * <p>The current outstanding balance breakdown</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("outstandingBalance")
        public InvoiceAmountStage outstandingBalance(@NotNull BnplOutstandingBalance outstandingBalance) {
            this.outstandingBalance = Objects.requireNonNull(outstandingBalance, "outstandingBalance must not be null");
            return this;
        }

        /**
         * <p>The original invoice amount in cents</p>
         * <p>The original invoice amount in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceAmount")
        public InvoiceExternalIdStage invoiceAmount(int invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        /**
         * <p>The external ID of the associated invoice</p>
         * <p>The external ID of the associated invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceExternalId")
        public InvoiceDueDateStage invoiceExternalId(@NotNull String invoiceExternalId) {
            this.invoiceExternalId = Objects.requireNonNull(invoiceExternalId, "invoiceExternalId must not be null");
            return this;
        }

        /**
         * <p>The original invoice due date as timestamp in milliseconds</p>
         * <p>The original invoice due date as timestamp in milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceDueDate")
        public DownPaymentAmountStage invoiceDueDate(int invoiceDueDate) {
            this.invoiceDueDate = invoiceDueDate;
            return this;
        }

        /**
         * <p>The down payment amount in cents</p>
         * <p>The down payment amount in cents</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("downPaymentAmount")
        public CadenceStage downPaymentAmount(int downPaymentAmount) {
            this.downPaymentAmount = downPaymentAmount;
            return this;
        }

        /**
         * <p>The payment cadence for the loan</p>
         * <p>The payment cadence for the loan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cadence")
        public BaseFeeRateStage cadence(@NotNull BnplCadence cadence) {
            this.cadence = Objects.requireNonNull(cadence, "cadence must not be null");
            return this;
        }

        /**
         * <p>The base fee rate as a percentage</p>
         * <p>The base fee rate as a percentage</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("baseFeeRate")
        public _FinalStage baseFeeRate(double baseFeeRate) {
            this.baseFeeRate = baseFeeRate;
            return this;
        }

        /**
         * <p>List of all installments for this loan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllInstallments(List<BnplLoanInstallment> installments) {
            if (installments != null) {
                this.installments.addAll(installments);
            }
            return this;
        }

        /**
         * <p>List of all installments for this loan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addInstallments(BnplLoanInstallment installments) {
            this.installments.add(installments);
            return this;
        }

        /**
         * <p>List of all installments for this loan</p>
         */
        @java.lang.Override
        @JsonSetter(value = "installments", nulls = Nulls.SKIP)
        public _FinalStage installments(List<BnplLoanInstallment> installments) {
            this.installments.clear();
            this.installments.addAll(installments);
            return this;
        }

        /**
         * <p>URL to the invoice PDF</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceUrl(String invoiceUrl) {
            this.invoiceUrl = Optional.ofNullable(invoiceUrl);
            return this;
        }

        /**
         * <p>URL to the invoice PDF</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceUrl", nulls = Nulls.SKIP)
        public _FinalStage invoiceUrl(Optional<String> invoiceUrl) {
            this.invoiceUrl = invoiceUrl;
            return this;
        }

        /**
         * <p>URL to the terms agreement file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage termsAgreementFile(String termsAgreementFile) {
            this.termsAgreementFile = Optional.ofNullable(termsAgreementFile);
            return this;
        }

        /**
         * <p>URL to the terms agreement file</p>
         */
        @java.lang.Override
        @JsonSetter(value = "termsAgreementFile", nulls = Nulls.SKIP)
        public _FinalStage termsAgreementFile(Optional<String> termsAgreementFile) {
            this.termsAgreementFile = termsAgreementFile;
            return this;
        }

        @java.lang.Override
        public BnplLoanResponse build() {
            return new BnplLoanResponse(
                    loanId,
                    businessExternalId,
                    dueDate,
                    originalPrincipalBalance,
                    drawDate,
                    repaidAmount,
                    paymentMethodId,
                    repaymentMethodId,
                    status,
                    outstandingBalance,
                    termsAgreementFile,
                    invoiceUrl,
                    invoiceAmount,
                    invoiceExternalId,
                    invoiceDueDate,
                    downPaymentAmount,
                    installments,
                    cadence,
                    baseFeeRate,
                    additionalProperties);
        }
    }
}
