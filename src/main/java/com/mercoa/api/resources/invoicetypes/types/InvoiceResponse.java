/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.entitytypes.types.ApprovalPolicyResponse;
import com.mercoa.api.resources.entitytypes.types.EntityResponse;
import com.mercoa.api.resources.entitytypes.types.EntityUserResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InvoiceResponse.Builder.class)
public final class InvoiceResponse {
    private final String id;

    private final InvoiceStatus status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> settlementDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<String> payerId;

    private final Optional<EntityResponse> payer;

    private final Optional<PaymentMethodResponse> paymentSource;

    private final Optional<String> paymentSourceId;

    private final Optional<String> vendorId;

    private final Optional<EntityResponse> vendor;

    private final Optional<PaymentMethodResponse> paymentDestination;

    private final Optional<String> paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final boolean paymentDestinationConfirmed;

    private final boolean hasDocuments;

    private final Optional<List<CommentResponse>> comments;

    private final Optional<List<InvoiceLineItemResponse>> lineItems;

    private final List<ApprovalSlot> approvers;

    private final List<ApprovalPolicyResponse> approvalPolicy;

    private final Map<String, String> metadata;

    private final Optional<String> foreignId;

    private final Optional<EntityUserResponse> creatorUser;

    private final Optional<InvoiceFailureType> failureType;

    private final Optional<OffsetDateTime> processedAt;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<InvoiceFeesResponse> fees;

    private final Map<String, Object> additionalProperties;

    private InvoiceResponse(
            String id,
            InvoiceStatus status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> settlementDate,
            Optional<OffsetDateTime> dueDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<String> payerId,
            Optional<EntityResponse> payer,
            Optional<PaymentMethodResponse> paymentSource,
            Optional<String> paymentSourceId,
            Optional<String> vendorId,
            Optional<EntityResponse> vendor,
            Optional<PaymentMethodResponse> paymentDestination,
            Optional<String> paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            boolean paymentDestinationConfirmed,
            boolean hasDocuments,
            Optional<List<CommentResponse>> comments,
            Optional<List<InvoiceLineItemResponse>> lineItems,
            List<ApprovalSlot> approvers,
            List<ApprovalPolicyResponse> approvalPolicy,
            Map<String, String> metadata,
            Optional<String> foreignId,
            Optional<EntityUserResponse> creatorUser,
            Optional<InvoiceFailureType> failureType,
            Optional<OffsetDateTime> processedAt,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<InvoiceFeesResponse> fees,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.deductionDate = deductionDate;
        this.settlementDate = settlementDate;
        this.dueDate = dueDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.payerId = payerId;
        this.payer = payer;
        this.paymentSource = paymentSource;
        this.paymentSourceId = paymentSourceId;
        this.vendorId = vendorId;
        this.vendor = vendor;
        this.paymentDestination = paymentDestination;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.paymentDestinationConfirmed = paymentDestinationConfirmed;
        this.hasDocuments = hasDocuments;
        this.comments = comments;
        this.lineItems = lineItems;
        this.approvers = approvers;
        this.approvalPolicy = approvalPolicy;
        this.metadata = metadata;
        this.foreignId = foreignId;
        this.creatorUser = creatorUser;
        this.failureType = failureType;
        this.processedAt = processedAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.fees = fees;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("status")
    public InvoiceStatus getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Date when funds will be deducted from payer's account.
     */
    @JsonProperty("deductionDate")
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return Date of funds settlement.
     */
    @JsonProperty("settlementDate")
    public Optional<OffsetDateTime> getSettlementDate() {
        return settlementDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    @JsonProperty("invoiceNumber")
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonProperty("noteToSelf")
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("serviceStartDate")
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    @JsonProperty("payerId")
    public Optional<String> getPayerId() {
        return payerId;
    }

    @JsonProperty("payer")
    public Optional<EntityResponse> getPayer() {
        return payer;
    }

    @JsonProperty("paymentSource")
    public Optional<PaymentMethodResponse> getPaymentSource() {
        return paymentSource;
    }

    @JsonProperty("paymentSourceId")
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    @JsonProperty("vendorId")
    public Optional<String> getVendorId() {
        return vendorId;
    }

    @JsonProperty("vendor")
    public Optional<EntityResponse> getVendor() {
        return vendor;
    }

    @JsonProperty("paymentDestination")
    public Optional<PaymentMethodResponse> getPaymentDestination() {
        return paymentDestination;
    }

    @JsonProperty("paymentDestinationId")
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    @JsonProperty("paymentDestinationOptions")
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    /**
     * @return True if the payment destination has been confirmed by the vendor. False if the payment destination has been set (for example, a check to an address) but has not been confirmed by the vendor.
     */
    @JsonProperty("paymentDestinationConfirmed")
    public boolean getPaymentDestinationConfirmed() {
        return paymentDestinationConfirmed;
    }

    /**
     * @return True if the invoice has documents attached.
     */
    @JsonProperty("hasDocuments")
    public boolean getHasDocuments() {
        return hasDocuments;
    }

    @JsonProperty("comments")
    public Optional<List<CommentResponse>> getComments() {
        return comments;
    }

    @JsonProperty("lineItems")
    public Optional<List<InvoiceLineItemResponse>> getLineItems() {
        return lineItems;
    }

    @JsonProperty("approvers")
    public List<ApprovalSlot> getApprovers() {
        return approvers;
    }

    @JsonProperty("approvalPolicy")
    public List<ApprovalPolicyResponse> getApprovalPolicy() {
        return approvalPolicy;
    }

    /**
     * @return Metadata associated with this invoice.
     */
    @JsonProperty("metadata")
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.
     */
    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    /**
     * @return Entity user who created this invoice.
     */
    @JsonProperty("creatorUser")
    public Optional<EntityUserResponse> getCreatorUser() {
        return creatorUser;
    }

    /**
     * @return If the invoice failed to be paid, this field will be populated with the type of failure.
     */
    @JsonProperty("failureType")
    public Optional<InvoiceFailureType> getFailureType() {
        return failureType;
    }

    @JsonProperty("processedAt")
    public Optional<OffsetDateTime> getProcessedAt() {
        return processedAt;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Fees associated with this invoice.
     */
    @JsonProperty("fees")
    public Optional<InvoiceFeesResponse> getFees() {
        return fees;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceResponse && equalTo((InvoiceResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceResponse other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && deductionDate.equals(other.deductionDate)
                && settlementDate.equals(other.settlementDate)
                && dueDate.equals(other.dueDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && payerId.equals(other.payerId)
                && payer.equals(other.payer)
                && paymentSource.equals(other.paymentSource)
                && paymentSourceId.equals(other.paymentSourceId)
                && vendorId.equals(other.vendorId)
                && vendor.equals(other.vendor)
                && paymentDestination.equals(other.paymentDestination)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && paymentDestinationConfirmed == other.paymentDestinationConfirmed
                && hasDocuments == other.hasDocuments
                && comments.equals(other.comments)
                && lineItems.equals(other.lineItems)
                && approvers.equals(other.approvers)
                && approvalPolicy.equals(other.approvalPolicy)
                && metadata.equals(other.metadata)
                && foreignId.equals(other.foreignId)
                && creatorUser.equals(other.creatorUser)
                && failureType.equals(other.failureType)
                && processedAt.equals(other.processedAt)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && fees.equals(other.fees);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.deductionDate,
                this.settlementDate,
                this.dueDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.serviceStartDate,
                this.serviceEndDate,
                this.payerId,
                this.payer,
                this.paymentSource,
                this.paymentSourceId,
                this.vendorId,
                this.vendor,
                this.paymentDestination,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.paymentDestinationConfirmed,
                this.hasDocuments,
                this.comments,
                this.lineItems,
                this.approvers,
                this.approvalPolicy,
                this.metadata,
                this.foreignId,
                this.creatorUser,
                this.failureType,
                this.processedAt,
                this.createdAt,
                this.updatedAt,
                this.fees);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        StatusStage id(String id);

        Builder from(InvoiceResponse other);
    }

    public interface StatusStage {
        PaymentDestinationConfirmedStage status(InvoiceStatus status);
    }

    public interface PaymentDestinationConfirmedStage {
        HasDocumentsStage paymentDestinationConfirmed(boolean paymentDestinationConfirmed);
    }

    public interface HasDocumentsStage {
        CreatedAtStage hasDocuments(boolean hasDocuments);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        InvoiceResponse build();

        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);

        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate);

        _FinalStage invoiceDate(OffsetDateTime invoiceDate);

        _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate);

        _FinalStage deductionDate(OffsetDateTime deductionDate);

        _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate);

        _FinalStage settlementDate(OffsetDateTime settlementDate);

        _FinalStage dueDate(Optional<OffsetDateTime> dueDate);

        _FinalStage dueDate(OffsetDateTime dueDate);

        _FinalStage invoiceNumber(Optional<String> invoiceNumber);

        _FinalStage invoiceNumber(String invoiceNumber);

        _FinalStage noteToSelf(Optional<String> noteToSelf);

        _FinalStage noteToSelf(String noteToSelf);

        _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate);

        _FinalStage serviceStartDate(OffsetDateTime serviceStartDate);

        _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate);

        _FinalStage serviceEndDate(OffsetDateTime serviceEndDate);

        _FinalStage payerId(Optional<String> payerId);

        _FinalStage payerId(String payerId);

        _FinalStage payer(Optional<EntityResponse> payer);

        _FinalStage payer(EntityResponse payer);

        _FinalStage paymentSource(Optional<PaymentMethodResponse> paymentSource);

        _FinalStage paymentSource(PaymentMethodResponse paymentSource);

        _FinalStage paymentSourceId(Optional<String> paymentSourceId);

        _FinalStage paymentSourceId(String paymentSourceId);

        _FinalStage vendorId(Optional<String> vendorId);

        _FinalStage vendorId(String vendorId);

        _FinalStage vendor(Optional<EntityResponse> vendor);

        _FinalStage vendor(EntityResponse vendor);

        _FinalStage paymentDestination(Optional<PaymentMethodResponse> paymentDestination);

        _FinalStage paymentDestination(PaymentMethodResponse paymentDestination);

        _FinalStage paymentDestinationId(Optional<String> paymentDestinationId);

        _FinalStage paymentDestinationId(String paymentDestinationId);

        _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions);

        _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions);

        _FinalStage comments(Optional<List<CommentResponse>> comments);

        _FinalStage comments(List<CommentResponse> comments);

        _FinalStage lineItems(Optional<List<InvoiceLineItemResponse>> lineItems);

        _FinalStage lineItems(List<InvoiceLineItemResponse> lineItems);

        _FinalStage approvers(List<ApprovalSlot> approvers);

        _FinalStage addApprovers(ApprovalSlot approvers);

        _FinalStage addAllApprovers(List<ApprovalSlot> approvers);

        _FinalStage approvalPolicy(List<ApprovalPolicyResponse> approvalPolicy);

        _FinalStage addApprovalPolicy(ApprovalPolicyResponse approvalPolicy);

        _FinalStage addAllApprovalPolicy(List<ApprovalPolicyResponse> approvalPolicy);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        _FinalStage foreignId(Optional<String> foreignId);

        _FinalStage foreignId(String foreignId);

        _FinalStage creatorUser(Optional<EntityUserResponse> creatorUser);

        _FinalStage creatorUser(EntityUserResponse creatorUser);

        _FinalStage failureType(Optional<InvoiceFailureType> failureType);

        _FinalStage failureType(InvoiceFailureType failureType);

        _FinalStage processedAt(Optional<OffsetDateTime> processedAt);

        _FinalStage processedAt(OffsetDateTime processedAt);

        _FinalStage fees(Optional<InvoiceFeesResponse> fees);

        _FinalStage fees(InvoiceFeesResponse fees);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    StatusStage,
                    PaymentDestinationConfirmedStage,
                    HasDocumentsStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String id;

        private InvoiceStatus status;

        private boolean paymentDestinationConfirmed;

        private boolean hasDocuments;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<InvoiceFeesResponse> fees = Optional.empty();

        private Optional<OffsetDateTime> processedAt = Optional.empty();

        private Optional<InvoiceFailureType> failureType = Optional.empty();

        private Optional<EntityUserResponse> creatorUser = Optional.empty();

        private Optional<String> foreignId = Optional.empty();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private List<ApprovalPolicyResponse> approvalPolicy = new ArrayList<>();

        private List<ApprovalSlot> approvers = new ArrayList<>();

        private Optional<List<InvoiceLineItemResponse>> lineItems = Optional.empty();

        private Optional<List<CommentResponse>> comments = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<PaymentMethodResponse> paymentDestination = Optional.empty();

        private Optional<EntityResponse> vendor = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<PaymentMethodResponse> paymentSource = Optional.empty();

        private Optional<EntityResponse> payer = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<OffsetDateTime> settlementDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceResponse other) {
            id(other.getId());
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            deductionDate(other.getDeductionDate());
            settlementDate(other.getSettlementDate());
            dueDate(other.getDueDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            payerId(other.getPayerId());
            payer(other.getPayer());
            paymentSource(other.getPaymentSource());
            paymentSourceId(other.getPaymentSourceId());
            vendorId(other.getVendorId());
            vendor(other.getVendor());
            paymentDestination(other.getPaymentDestination());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            paymentDestinationConfirmed(other.getPaymentDestinationConfirmed());
            hasDocuments(other.getHasDocuments());
            comments(other.getComments());
            lineItems(other.getLineItems());
            approvers(other.getApprovers());
            approvalPolicy(other.getApprovalPolicy());
            metadata(other.getMetadata());
            foreignId(other.getForeignId());
            creatorUser(other.getCreatorUser());
            failureType(other.getFailureType());
            processedAt(other.getProcessedAt());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            fees(other.getFees());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public PaymentDestinationConfirmedStage status(InvoiceStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>True if the payment destination has been confirmed by the vendor. False if the payment destination has been set (for example, a check to an address) but has not been confirmed by the vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDestinationConfirmed")
        public HasDocumentsStage paymentDestinationConfirmed(boolean paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = paymentDestinationConfirmed;
            return this;
        }

        /**
         * <p>True if the invoice has documents attached.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasDocuments")
        public CreatedAtStage hasDocuments(boolean hasDocuments) {
            this.hasDocuments = hasDocuments;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>Fees associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fees(InvoiceFeesResponse fees) {
            this.fees = Optional.of(fees);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fees", nulls = Nulls.SKIP)
        public _FinalStage fees(Optional<InvoiceFeesResponse> fees) {
            this.fees = fees;
            return this;
        }

        @java.lang.Override
        public _FinalStage processedAt(OffsetDateTime processedAt) {
            this.processedAt = Optional.of(processedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "processedAt", nulls = Nulls.SKIP)
        public _FinalStage processedAt(Optional<OffsetDateTime> processedAt) {
            this.processedAt = processedAt;
            return this;
        }

        /**
         * <p>If the invoice failed to be paid, this field will be populated with the type of failure.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureType(InvoiceFailureType failureType) {
            this.failureType = Optional.of(failureType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "failureType", nulls = Nulls.SKIP)
        public _FinalStage failureType(Optional<InvoiceFailureType> failureType) {
            this.failureType = failureType;
            return this;
        }

        /**
         * <p>Entity user who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorUser(EntityUserResponse creatorUser) {
            this.creatorUser = Optional.of(creatorUser);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creatorUser", nulls = Nulls.SKIP)
        public _FinalStage creatorUser(Optional<EntityUserResponse> creatorUser) {
            this.creatorUser = creatorUser;
            return this;
        }

        /**
         * <p>The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage foreignId(String foreignId) {
            this.foreignId = Optional.of(foreignId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public _FinalStage foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllApprovalPolicy(List<ApprovalPolicyResponse> approvalPolicy) {
            this.approvalPolicy.addAll(approvalPolicy);
            return this;
        }

        @java.lang.Override
        public _FinalStage addApprovalPolicy(ApprovalPolicyResponse approvalPolicy) {
            this.approvalPolicy.add(approvalPolicy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "approvalPolicy", nulls = Nulls.SKIP)
        public _FinalStage approvalPolicy(List<ApprovalPolicyResponse> approvalPolicy) {
            this.approvalPolicy.clear();
            this.approvalPolicy.addAll(approvalPolicy);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllApprovers(List<ApprovalSlot> approvers) {
            this.approvers.addAll(approvers);
            return this;
        }

        @java.lang.Override
        public _FinalStage addApprovers(ApprovalSlot approvers) {
            this.approvers.add(approvers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public _FinalStage approvers(List<ApprovalSlot> approvers) {
            this.approvers.clear();
            this.approvers.addAll(approvers);
            return this;
        }

        @java.lang.Override
        public _FinalStage lineItems(List<InvoiceLineItemResponse> lineItems) {
            this.lineItems = Optional.of(lineItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public _FinalStage lineItems(Optional<List<InvoiceLineItemResponse>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        @java.lang.Override
        public _FinalStage comments(List<CommentResponse> comments) {
            this.comments = Optional.of(comments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "comments", nulls = Nulls.SKIP)
        public _FinalStage comments(Optional<List<CommentResponse>> comments) {
            this.comments = comments;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.of(paymentDestinationOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.of(paymentDestinationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestination(PaymentMethodResponse paymentDestination) {
            this.paymentDestination = Optional.of(paymentDestination);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestination", nulls = Nulls.SKIP)
        public _FinalStage paymentDestination(Optional<PaymentMethodResponse> paymentDestination) {
            this.paymentDestination = paymentDestination;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendor(EntityResponse vendor) {
            this.vendor = Optional.of(vendor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendor", nulls = Nulls.SKIP)
        public _FinalStage vendor(Optional<EntityResponse> vendor) {
            this.vendor = vendor;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorId(String vendorId) {
            this.vendorId = Optional.of(vendorId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.of(paymentSourceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public _FinalStage paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSource(PaymentMethodResponse paymentSource) {
            this.paymentSource = Optional.of(paymentSource);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSource", nulls = Nulls.SKIP)
        public _FinalStage paymentSource(Optional<PaymentMethodResponse> paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }

        @java.lang.Override
        public _FinalStage payer(EntityResponse payer) {
            this.payer = Optional.of(payer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payer", nulls = Nulls.SKIP)
        public _FinalStage payer(Optional<EntityResponse> payer) {
            this.payer = payer;
            return this;
        }

        @java.lang.Override
        public _FinalStage payerId(String payerId) {
            this.payerId = Optional.of(payerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public _FinalStage payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.of(serviceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.of(serviceStartDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.of(noteToSelf);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public _FinalStage noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.of(invoiceNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public _FinalStage invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.of(dueDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public _FinalStage dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>Date of funds settlement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage settlementDate(OffsetDateTime settlementDate) {
            this.settlementDate = Optional.of(settlementDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "settlementDate", nulls = Nulls.SKIP)
        public _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        /**
         * <p>Date when funds will be deducted from payer's account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.of(deductionDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.of(invoiceDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.of(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Total amount of invoice in major units</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.of(amount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public InvoiceResponse build() {
            return new InvoiceResponse(
                    id,
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    deductionDate,
                    settlementDate,
                    dueDate,
                    invoiceNumber,
                    noteToSelf,
                    serviceStartDate,
                    serviceEndDate,
                    payerId,
                    payer,
                    paymentSource,
                    paymentSourceId,
                    vendorId,
                    vendor,
                    paymentDestination,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    paymentDestinationConfirmed,
                    hasDocuments,
                    comments,
                    lineItems,
                    approvers,
                    approvalPolicy,
                    metadata,
                    foreignId,
                    creatorUser,
                    failureType,
                    processedAt,
                    createdAt,
                    updatedAt,
                    fees,
                    additionalProperties);
        }
    }
}
