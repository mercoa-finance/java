/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceFeesResponse.Builder.class)
public final class InvoiceFeesResponse {
    private final double sourcePaymentMethodFee;

    private final double sourcePlatformMarkupFee;

    private final double destinationPaymentMethodFee;

    private final double destinationPlatformMarkupFee;

    private final Map<String, Object> additionalProperties;

    private InvoiceFeesResponse(
            double sourcePaymentMethodFee,
            double sourcePlatformMarkupFee,
            double destinationPaymentMethodFee,
            double destinationPlatformMarkupFee,
            Map<String, Object> additionalProperties) {
        this.sourcePaymentMethodFee = sourcePaymentMethodFee;
        this.sourcePlatformMarkupFee = sourcePlatformMarkupFee;
        this.destinationPaymentMethodFee = destinationPaymentMethodFee;
        this.destinationPlatformMarkupFee = destinationPlatformMarkupFee;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Fee charged to the platform (C1) for processing the source payment method. For example, credit card interchange and acquiring fees.
     */
    @JsonProperty("sourcePaymentMethodFee")
    public double getSourcePaymentMethodFee() {
        return sourcePaymentMethodFee;
    }

    /**
     * @return Fee charged to the payer (C2).
     */
    @JsonProperty("sourcePlatformMarkupFee")
    public double getSourcePlatformMarkupFee() {
        return sourcePlatformMarkupFee;
    }

    /**
     * @return Fee charged to the platform (C1) for processing the destination payment method. For example, postage for a check payment.
     */
    @JsonProperty("destinationPaymentMethodFee")
    public double getDestinationPaymentMethodFee() {
        return destinationPaymentMethodFee;
    }

    /**
     * @return Fee charged to the payee (C3).
     */
    @JsonProperty("destinationPlatformMarkupFee")
    public double getDestinationPlatformMarkupFee() {
        return destinationPlatformMarkupFee;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceFeesResponse && equalTo((InvoiceFeesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceFeesResponse other) {
        return sourcePaymentMethodFee == other.sourcePaymentMethodFee
                && sourcePlatformMarkupFee == other.sourcePlatformMarkupFee
                && destinationPaymentMethodFee == other.destinationPaymentMethodFee
                && destinationPlatformMarkupFee == other.destinationPlatformMarkupFee;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sourcePaymentMethodFee,
                this.sourcePlatformMarkupFee,
                this.destinationPaymentMethodFee,
                this.destinationPlatformMarkupFee);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourcePaymentMethodFeeStage builder() {
        return new Builder();
    }

    public interface SourcePaymentMethodFeeStage {
        /**
         * <p>Fee charged to the platform (C1) for processing the source payment method. For example, credit card interchange and acquiring fees.</p>
         */
        SourcePlatformMarkupFeeStage sourcePaymentMethodFee(double sourcePaymentMethodFee);

        Builder from(InvoiceFeesResponse other);
    }

    public interface SourcePlatformMarkupFeeStage {
        /**
         * <p>Fee charged to the payer (C2).</p>
         */
        DestinationPaymentMethodFeeStage sourcePlatformMarkupFee(double sourcePlatformMarkupFee);
    }

    public interface DestinationPaymentMethodFeeStage {
        /**
         * <p>Fee charged to the platform (C1) for processing the destination payment method. For example, postage for a check payment.</p>
         */
        DestinationPlatformMarkupFeeStage destinationPaymentMethodFee(double destinationPaymentMethodFee);
    }

    public interface DestinationPlatformMarkupFeeStage {
        /**
         * <p>Fee charged to the payee (C3).</p>
         */
        _FinalStage destinationPlatformMarkupFee(double destinationPlatformMarkupFee);
    }

    public interface _FinalStage {
        InvoiceFeesResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements SourcePaymentMethodFeeStage,
                    SourcePlatformMarkupFeeStage,
                    DestinationPaymentMethodFeeStage,
                    DestinationPlatformMarkupFeeStage,
                    _FinalStage {
        private double sourcePaymentMethodFee;

        private double sourcePlatformMarkupFee;

        private double destinationPaymentMethodFee;

        private double destinationPlatformMarkupFee;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceFeesResponse other) {
            sourcePaymentMethodFee(other.getSourcePaymentMethodFee());
            sourcePlatformMarkupFee(other.getSourcePlatformMarkupFee());
            destinationPaymentMethodFee(other.getDestinationPaymentMethodFee());
            destinationPlatformMarkupFee(other.getDestinationPlatformMarkupFee());
            return this;
        }

        /**
         * <p>Fee charged to the platform (C1) for processing the source payment method. For example, credit card interchange and acquiring fees.</p>
         * <p>Fee charged to the platform (C1) for processing the source payment method. For example, credit card interchange and acquiring fees.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sourcePaymentMethodFee")
        public SourcePlatformMarkupFeeStage sourcePaymentMethodFee(double sourcePaymentMethodFee) {
            this.sourcePaymentMethodFee = sourcePaymentMethodFee;
            return this;
        }

        /**
         * <p>Fee charged to the payer (C2).</p>
         * <p>Fee charged to the payer (C2).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sourcePlatformMarkupFee")
        public DestinationPaymentMethodFeeStage sourcePlatformMarkupFee(double sourcePlatformMarkupFee) {
            this.sourcePlatformMarkupFee = sourcePlatformMarkupFee;
            return this;
        }

        /**
         * <p>Fee charged to the platform (C1) for processing the destination payment method. For example, postage for a check payment.</p>
         * <p>Fee charged to the platform (C1) for processing the destination payment method. For example, postage for a check payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("destinationPaymentMethodFee")
        public DestinationPlatformMarkupFeeStage destinationPaymentMethodFee(double destinationPaymentMethodFee) {
            this.destinationPaymentMethodFee = destinationPaymentMethodFee;
            return this;
        }

        /**
         * <p>Fee charged to the payee (C3).</p>
         * <p>Fee charged to the payee (C3).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("destinationPlatformMarkupFee")
        public _FinalStage destinationPlatformMarkupFee(double destinationPlatformMarkupFee) {
            this.destinationPlatformMarkupFee = destinationPlatformMarkupFee;
            return this;
        }

        @java.lang.Override
        public InvoiceFeesResponse build() {
            return new InvoiceFeesResponse(
                    sourcePaymentMethodFee,
                    sourcePlatformMarkupFee,
                    destinationPaymentMethodFee,
                    destinationPlatformMarkupFee,
                    additionalProperties);
        }
    }
}
