/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceUpdateRequestWithId.Builder.class)
public final class InvoiceUpdateRequestWithId implements IInvoiceUpdateRequest, IInvoiceRequestBase {
    private final Optional<List<InvoiceLineItemUpdateRequest>> lineItems;

    private final Optional<String> creatorEntityId;

    private final Optional<InvoiceStatus> status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> settlementDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<Integer> netTerms;

    private final Optional<String> payerId;

    private final Optional<String> paymentSourceId;

    private final Optional<PaymentSourceOptions> paymentSourceOptions;

    private final Optional<String> vendorId;

    private final Optional<String> paymentDestinationId;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final Optional<List<ApprovalSlotAssignment>> approvers;

    private final Optional<Map<String, String>> metadata;

    private final Optional<String> foreignId;

    private final Optional<String> document;

    private final Optional<String> uploadedImage;

    private final Optional<String> creatorUserId;

    private final Optional<InvoiceFailureType> failureType;

    private final Optional<InvoiceFeesRequest> fees;

    private final Optional<Boolean> batchPayment;

    private final Optional<PaymentSchedule> paymentSchedule;

    private final Optional<List<String>> vendorCreditIds;

    private final Optional<Double> taxAmount;

    private final Optional<Double> shippingAmount;

    private final Optional<String> ocrJobId;

    private final Optional<Boolean> paymentDestinationConfirmed;

    private final String invoiceId;

    private final Map<String, Object> additionalProperties;

    private InvoiceUpdateRequestWithId(
            Optional<List<InvoiceLineItemUpdateRequest>> lineItems,
            Optional<String> creatorEntityId,
            Optional<InvoiceStatus> status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> settlementDate,
            Optional<OffsetDateTime> dueDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<Integer> netTerms,
            Optional<String> payerId,
            Optional<String> paymentSourceId,
            Optional<PaymentSourceOptions> paymentSourceOptions,
            Optional<String> vendorId,
            Optional<String> paymentDestinationId,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            Optional<List<ApprovalSlotAssignment>> approvers,
            Optional<Map<String, String>> metadata,
            Optional<String> foreignId,
            Optional<String> document,
            Optional<String> uploadedImage,
            Optional<String> creatorUserId,
            Optional<InvoiceFailureType> failureType,
            Optional<InvoiceFeesRequest> fees,
            Optional<Boolean> batchPayment,
            Optional<PaymentSchedule> paymentSchedule,
            Optional<List<String>> vendorCreditIds,
            Optional<Double> taxAmount,
            Optional<Double> shippingAmount,
            Optional<String> ocrJobId,
            Optional<Boolean> paymentDestinationConfirmed,
            String invoiceId,
            Map<String, Object> additionalProperties) {
        this.lineItems = lineItems;
        this.creatorEntityId = creatorEntityId;
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.deductionDate = deductionDate;
        this.settlementDate = settlementDate;
        this.dueDate = dueDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.netTerms = netTerms;
        this.payerId = payerId;
        this.paymentSourceId = paymentSourceId;
        this.paymentSourceOptions = paymentSourceOptions;
        this.vendorId = vendorId;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.approvers = approvers;
        this.metadata = metadata;
        this.foreignId = foreignId;
        this.document = document;
        this.uploadedImage = uploadedImage;
        this.creatorUserId = creatorUserId;
        this.failureType = failureType;
        this.fees = fees;
        this.batchPayment = batchPayment;
        this.paymentSchedule = paymentSchedule;
        this.vendorCreditIds = vendorCreditIds;
        this.taxAmount = taxAmount;
        this.shippingAmount = shippingAmount;
        this.ocrJobId = ocrJobId;
        this.paymentDestinationConfirmed = paymentDestinationConfirmed;
        this.invoiceId = invoiceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lineItems")
    @java.lang.Override
    public Optional<List<InvoiceLineItemUpdateRequest>> getLineItems() {
        return lineItems;
    }

    /**
     * @return ID or foreign ID of entity who created this invoice. If creating a payable invoice (AP), this must be the same as the payerId. If creating a receivable invoice (AR), this must be the same as the vendorId.
     */
    @JsonProperty("creatorEntityId")
    @java.lang.Override
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    @JsonProperty("status")
    @java.lang.Override
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    @java.lang.Override
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    @java.lang.Override
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Initial date when funds are scheduled to be deducted from payer's account.
     */
    @JsonProperty("deductionDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return Date of funds settlement.
     */
    @JsonProperty("settlementDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getSettlementDate() {
        return settlementDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    @JsonProperty("invoiceNumber")
    @java.lang.Override
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Note to self or memo on invoice.
     */
    @JsonProperty("noteToSelf")
    @java.lang.Override
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("serviceStartDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    @java.lang.Override
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    /**
     * @return Net terms in days. Must be a positive number.
     */
    @JsonProperty("netTerms")
    @java.lang.Override
    public Optional<Integer> getNetTerms() {
        return netTerms;
    }

    /**
     * @return ID or foreign ID of the payer of this invoice.
     */
    @JsonProperty("payerId")
    @java.lang.Override
    public Optional<String> getPayerId() {
        return payerId;
    }

    /**
     * @return ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.
     */
    @JsonProperty("paymentSourceId")
    @java.lang.Override
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    /**
     * @return Options for the payment source. Depending on the payment source, this may include things such as BNPL configuration.
     */
    @JsonProperty("paymentSourceOptions")
    @java.lang.Override
    public Optional<PaymentSourceOptions> getPaymentSourceOptions() {
        return paymentSourceOptions;
    }

    /**
     * @return ID or foreign ID of the vendor of this invoice.
     */
    @JsonProperty("vendorId")
    @java.lang.Override
    public Optional<String> getVendorId() {
        return vendorId;
    }

    /**
     * @return ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.
     */
    @JsonProperty("paymentDestinationId")
    @java.lang.Override
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    /**
     * @return Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.
     */
    @JsonProperty("paymentDestinationOptions")
    @java.lang.Override
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    /**
     * @return Set approvers for this invoice.
     */
    @JsonProperty("approvers")
    @java.lang.Override
    public Optional<List<ApprovalSlotAssignment>> getApprovers() {
        return approvers;
    }

    /**
     * @return Metadata associated with this invoice.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    /**
     * @return The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.
     */
    @JsonProperty("foreignId")
    @java.lang.Override
    public Optional<String> getForeignId() {
        return foreignId;
    }

    /**
     * @return Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB. If the invoice already has a document, this will add a new document to the invoice.
     */
    @JsonProperty("document")
    @java.lang.Override
    public Optional<String> getDocument() {
        return document;
    }

    /**
     * @return DEPRECATED. Use document field instead.
     */
    @JsonProperty("uploadedImage")
    @java.lang.Override
    public Optional<String> getUploadedImage() {
        return uploadedImage;
    }

    /**
     * @return User ID or Foreign ID of entity user who created this invoice.
     */
    @JsonProperty("creatorUserId")
    @java.lang.Override
    public Optional<String> getCreatorUserId() {
        return creatorUserId;
    }

    /**
     * @return If the invoice failed to be paid, indicate the failure reason. Only applicable for invoices with custom payment methods.
     */
    @JsonProperty("failureType")
    @java.lang.Override
    public Optional<InvoiceFailureType> getFailureType() {
        return failureType;
    }

    /**
     * @return If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.
     */
    @JsonProperty("fees")
    @java.lang.Override
    public Optional<InvoiceFeesRequest> getFees() {
        return fees;
    }

    /**
     * @return If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.
     */
    @JsonProperty("batchPayment")
    @java.lang.Override
    public Optional<Boolean> getBatchPayment() {
        return batchPayment;
    }

    /**
     * @return If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.
     */
    @JsonProperty("paymentSchedule")
    @java.lang.Override
    public Optional<PaymentSchedule> getPaymentSchedule() {
        return paymentSchedule;
    }

    /**
     * @return The IDs of the vendor credits to be applied to this invoice. Passing this field will un-apply any previously applied vendor credits.
     */
    @JsonProperty("vendorCreditIds")
    @java.lang.Override
    public Optional<List<String>> getVendorCreditIds() {
        return vendorCreditIds;
    }

    /**
     * @return Tax amount for this invoice.
     */
    @JsonProperty("taxAmount")
    @java.lang.Override
    public Optional<Double> getTaxAmount() {
        return taxAmount;
    }

    /**
     * @return Shipping amount for this invoice.
     */
    @JsonProperty("shippingAmount")
    @java.lang.Override
    public Optional<Double> getShippingAmount() {
        return shippingAmount;
    }

    /**
     * @return ID of the OCR job that processed this invoice.
     */
    @JsonProperty("ocrJobId")
    @java.lang.Override
    public Optional<String> getOcrJobId() {
        return ocrJobId;
    }

    /**
     * @return Set to true if the payment destination has been confirmed by the vendor or if the payment destination should default to the selected payment destination on the vendor portal.
     */
    @JsonProperty("paymentDestinationConfirmed")
    @java.lang.Override
    public Optional<Boolean> getPaymentDestinationConfirmed() {
        return paymentDestinationConfirmed;
    }

    /**
     * @return The ID or foreign ID of the invoice to update
     */
    @JsonProperty("invoiceId")
    public String getInvoiceId() {
        return invoiceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceUpdateRequestWithId && equalTo((InvoiceUpdateRequestWithId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceUpdateRequestWithId other) {
        return lineItems.equals(other.lineItems)
                && creatorEntityId.equals(other.creatorEntityId)
                && status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && deductionDate.equals(other.deductionDate)
                && settlementDate.equals(other.settlementDate)
                && dueDate.equals(other.dueDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && netTerms.equals(other.netTerms)
                && payerId.equals(other.payerId)
                && paymentSourceId.equals(other.paymentSourceId)
                && paymentSourceOptions.equals(other.paymentSourceOptions)
                && vendorId.equals(other.vendorId)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && approvers.equals(other.approvers)
                && metadata.equals(other.metadata)
                && foreignId.equals(other.foreignId)
                && document.equals(other.document)
                && uploadedImage.equals(other.uploadedImage)
                && creatorUserId.equals(other.creatorUserId)
                && failureType.equals(other.failureType)
                && fees.equals(other.fees)
                && batchPayment.equals(other.batchPayment)
                && paymentSchedule.equals(other.paymentSchedule)
                && vendorCreditIds.equals(other.vendorCreditIds)
                && taxAmount.equals(other.taxAmount)
                && shippingAmount.equals(other.shippingAmount)
                && ocrJobId.equals(other.ocrJobId)
                && paymentDestinationConfirmed.equals(other.paymentDestinationConfirmed)
                && invoiceId.equals(other.invoiceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.lineItems,
                this.creatorEntityId,
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.deductionDate,
                this.settlementDate,
                this.dueDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.serviceStartDate,
                this.serviceEndDate,
                this.netTerms,
                this.payerId,
                this.paymentSourceId,
                this.paymentSourceOptions,
                this.vendorId,
                this.paymentDestinationId,
                this.paymentDestinationOptions,
                this.approvers,
                this.metadata,
                this.foreignId,
                this.document,
                this.uploadedImage,
                this.creatorUserId,
                this.failureType,
                this.fees,
                this.batchPayment,
                this.paymentSchedule,
                this.vendorCreditIds,
                this.taxAmount,
                this.shippingAmount,
                this.ocrJobId,
                this.paymentDestinationConfirmed,
                this.invoiceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceIdStage builder() {
        return new Builder();
    }

    public interface InvoiceIdStage {
        /**
         * <p>The ID or foreign ID of the invoice to update</p>
         */
        _FinalStage invoiceId(@NotNull String invoiceId);

        Builder from(InvoiceUpdateRequestWithId other);
    }

    public interface _FinalStage {
        InvoiceUpdateRequestWithId build();

        _FinalStage lineItems(Optional<List<InvoiceLineItemUpdateRequest>> lineItems);

        _FinalStage lineItems(List<InvoiceLineItemUpdateRequest> lineItems);

        /**
         * <p>ID or foreign ID of entity who created this invoice. If creating a payable invoice (AP), this must be the same as the payerId. If creating a receivable invoice (AR), this must be the same as the vendorId.</p>
         */
        _FinalStage creatorEntityId(Optional<String> creatorEntityId);

        _FinalStage creatorEntityId(String creatorEntityId);

        _FinalStage status(Optional<InvoiceStatus> status);

        _FinalStage status(InvoiceStatus status);

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        /**
         * <p>Date the invoice was issued.</p>
         */
        _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate);

        _FinalStage invoiceDate(OffsetDateTime invoiceDate);

        /**
         * <p>Initial date when funds are scheduled to be deducted from payer's account.</p>
         */
        _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate);

        _FinalStage deductionDate(OffsetDateTime deductionDate);

        /**
         * <p>Date of funds settlement.</p>
         */
        _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate);

        _FinalStage settlementDate(OffsetDateTime settlementDate);

        /**
         * <p>Due date of invoice.</p>
         */
        _FinalStage dueDate(Optional<OffsetDateTime> dueDate);

        _FinalStage dueDate(OffsetDateTime dueDate);

        _FinalStage invoiceNumber(Optional<String> invoiceNumber);

        _FinalStage invoiceNumber(String invoiceNumber);

        /**
         * <p>Note to self or memo on invoice.</p>
         */
        _FinalStage noteToSelf(Optional<String> noteToSelf);

        _FinalStage noteToSelf(String noteToSelf);

        _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate);

        _FinalStage serviceStartDate(OffsetDateTime serviceStartDate);

        _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate);

        _FinalStage serviceEndDate(OffsetDateTime serviceEndDate);

        /**
         * <p>Net terms in days. Must be a positive number.</p>
         */
        _FinalStage netTerms(Optional<Integer> netTerms);

        _FinalStage netTerms(Integer netTerms);

        /**
         * <p>ID or foreign ID of the payer of this invoice.</p>
         */
        _FinalStage payerId(Optional<String> payerId);

        _FinalStage payerId(String payerId);

        /**
         * <p>ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.</p>
         */
        _FinalStage paymentSourceId(Optional<String> paymentSourceId);

        _FinalStage paymentSourceId(String paymentSourceId);

        /**
         * <p>Options for the payment source. Depending on the payment source, this may include things such as BNPL configuration.</p>
         */
        _FinalStage paymentSourceOptions(Optional<PaymentSourceOptions> paymentSourceOptions);

        _FinalStage paymentSourceOptions(PaymentSourceOptions paymentSourceOptions);

        /**
         * <p>ID or foreign ID of the vendor of this invoice.</p>
         */
        _FinalStage vendorId(Optional<String> vendorId);

        _FinalStage vendorId(String vendorId);

        /**
         * <p>ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.</p>
         */
        _FinalStage paymentDestinationId(Optional<String> paymentDestinationId);

        _FinalStage paymentDestinationId(String paymentDestinationId);

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         */
        _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions);

        _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions);

        /**
         * <p>Set approvers for this invoice.</p>
         */
        _FinalStage approvers(Optional<List<ApprovalSlotAssignment>> approvers);

        _FinalStage approvers(List<ApprovalSlotAssignment> approvers);

        /**
         * <p>Metadata associated with this invoice.</p>
         */
        _FinalStage metadata(Optional<Map<String, String>> metadata);

        _FinalStage metadata(Map<String, String> metadata);

        /**
         * <p>The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.</p>
         */
        _FinalStage foreignId(Optional<String> foreignId);

        _FinalStage foreignId(String foreignId);

        /**
         * <p>Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB. If the invoice already has a document, this will add a new document to the invoice.</p>
         */
        _FinalStage document(Optional<String> document);

        _FinalStage document(String document);

        /**
         * <p>DEPRECATED. Use document field instead.</p>
         */
        _FinalStage uploadedImage(Optional<String> uploadedImage);

        _FinalStage uploadedImage(String uploadedImage);

        /**
         * <p>User ID or Foreign ID of entity user who created this invoice.</p>
         */
        _FinalStage creatorUserId(Optional<String> creatorUserId);

        _FinalStage creatorUserId(String creatorUserId);

        /**
         * <p>If the invoice failed to be paid, indicate the failure reason. Only applicable for invoices with custom payment methods.</p>
         */
        _FinalStage failureType(Optional<InvoiceFailureType> failureType);

        _FinalStage failureType(InvoiceFailureType failureType);

        /**
         * <p>If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.</p>
         */
        _FinalStage fees(Optional<InvoiceFeesRequest> fees);

        _FinalStage fees(InvoiceFeesRequest fees);

        /**
         * <p>If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.</p>
         */
        _FinalStage batchPayment(Optional<Boolean> batchPayment);

        _FinalStage batchPayment(Boolean batchPayment);

        /**
         * <p>If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.</p>
         */
        _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule);

        _FinalStage paymentSchedule(PaymentSchedule paymentSchedule);

        /**
         * <p>The IDs of the vendor credits to be applied to this invoice. Passing this field will un-apply any previously applied vendor credits.</p>
         */
        _FinalStage vendorCreditIds(Optional<List<String>> vendorCreditIds);

        _FinalStage vendorCreditIds(List<String> vendorCreditIds);

        /**
         * <p>Tax amount for this invoice.</p>
         */
        _FinalStage taxAmount(Optional<Double> taxAmount);

        _FinalStage taxAmount(Double taxAmount);

        /**
         * <p>Shipping amount for this invoice.</p>
         */
        _FinalStage shippingAmount(Optional<Double> shippingAmount);

        _FinalStage shippingAmount(Double shippingAmount);

        /**
         * <p>ID of the OCR job that processed this invoice.</p>
         */
        _FinalStage ocrJobId(Optional<String> ocrJobId);

        _FinalStage ocrJobId(String ocrJobId);

        /**
         * <p>Set to true if the payment destination has been confirmed by the vendor or if the payment destination should default to the selected payment destination on the vendor portal.</p>
         */
        _FinalStage paymentDestinationConfirmed(Optional<Boolean> paymentDestinationConfirmed);

        _FinalStage paymentDestinationConfirmed(Boolean paymentDestinationConfirmed);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InvoiceIdStage, _FinalStage {
        private String invoiceId;

        private Optional<Boolean> paymentDestinationConfirmed = Optional.empty();

        private Optional<String> ocrJobId = Optional.empty();

        private Optional<Double> shippingAmount = Optional.empty();

        private Optional<Double> taxAmount = Optional.empty();

        private Optional<List<String>> vendorCreditIds = Optional.empty();

        private Optional<PaymentSchedule> paymentSchedule = Optional.empty();

        private Optional<Boolean> batchPayment = Optional.empty();

        private Optional<InvoiceFeesRequest> fees = Optional.empty();

        private Optional<InvoiceFailureType> failureType = Optional.empty();

        private Optional<String> creatorUserId = Optional.empty();

        private Optional<String> uploadedImage = Optional.empty();

        private Optional<String> document = Optional.empty();

        private Optional<String> foreignId = Optional.empty();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<List<ApprovalSlotAssignment>> approvers = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<PaymentSourceOptions> paymentSourceOptions = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<Integer> netTerms = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<OffsetDateTime> settlementDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<InvoiceStatus> status = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Optional<List<InvoiceLineItemUpdateRequest>> lineItems = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceUpdateRequestWithId other) {
            lineItems(other.getLineItems());
            creatorEntityId(other.getCreatorEntityId());
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            deductionDate(other.getDeductionDate());
            settlementDate(other.getSettlementDate());
            dueDate(other.getDueDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            netTerms(other.getNetTerms());
            payerId(other.getPayerId());
            paymentSourceId(other.getPaymentSourceId());
            paymentSourceOptions(other.getPaymentSourceOptions());
            vendorId(other.getVendorId());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            approvers(other.getApprovers());
            metadata(other.getMetadata());
            foreignId(other.getForeignId());
            document(other.getDocument());
            uploadedImage(other.getUploadedImage());
            creatorUserId(other.getCreatorUserId());
            failureType(other.getFailureType());
            fees(other.getFees());
            batchPayment(other.getBatchPayment());
            paymentSchedule(other.getPaymentSchedule());
            vendorCreditIds(other.getVendorCreditIds());
            taxAmount(other.getTaxAmount());
            shippingAmount(other.getShippingAmount());
            ocrJobId(other.getOcrJobId());
            paymentDestinationConfirmed(other.getPaymentDestinationConfirmed());
            invoiceId(other.getInvoiceId());
            return this;
        }

        /**
         * <p>The ID or foreign ID of the invoice to update</p>
         * <p>The ID or foreign ID of the invoice to update</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceId")
        public _FinalStage invoiceId(@NotNull String invoiceId) {
            this.invoiceId = Objects.requireNonNull(invoiceId, "invoiceId must not be null");
            return this;
        }

        /**
         * <p>Set to true if the payment destination has been confirmed by the vendor or if the payment destination should default to the selected payment destination on the vendor portal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentDestinationConfirmed(Boolean paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = Optional.ofNullable(paymentDestinationConfirmed);
            return this;
        }

        /**
         * <p>Set to true if the payment destination has been confirmed by the vendor or if the payment destination should default to the selected payment destination on the vendor portal.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentDestinationConfirmed", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationConfirmed(Optional<Boolean> paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = paymentDestinationConfirmed;
            return this;
        }

        /**
         * <p>ID of the OCR job that processed this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrJobId(String ocrJobId) {
            this.ocrJobId = Optional.ofNullable(ocrJobId);
            return this;
        }

        /**
         * <p>ID of the OCR job that processed this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrJobId", nulls = Nulls.SKIP)
        public _FinalStage ocrJobId(Optional<String> ocrJobId) {
            this.ocrJobId = ocrJobId;
            return this;
        }

        /**
         * <p>Shipping amount for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shippingAmount(Double shippingAmount) {
            this.shippingAmount = Optional.ofNullable(shippingAmount);
            return this;
        }

        /**
         * <p>Shipping amount for this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "shippingAmount", nulls = Nulls.SKIP)
        public _FinalStage shippingAmount(Optional<Double> shippingAmount) {
            this.shippingAmount = shippingAmount;
            return this;
        }

        /**
         * <p>Tax amount for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage taxAmount(Double taxAmount) {
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        /**
         * <p>Tax amount for this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "taxAmount", nulls = Nulls.SKIP)
        public _FinalStage taxAmount(Optional<Double> taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * <p>The IDs of the vendor credits to be applied to this invoice. Passing this field will un-apply any previously applied vendor credits.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage vendorCreditIds(List<String> vendorCreditIds) {
            this.vendorCreditIds = Optional.ofNullable(vendorCreditIds);
            return this;
        }

        /**
         * <p>The IDs of the vendor credits to be applied to this invoice. Passing this field will un-apply any previously applied vendor credits.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "vendorCreditIds", nulls = Nulls.SKIP)
        public _FinalStage vendorCreditIds(Optional<List<String>> vendorCreditIds) {
            this.vendorCreditIds = vendorCreditIds;
            return this;
        }

        /**
         * <p>If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentSchedule(PaymentSchedule paymentSchedule) {
            this.paymentSchedule = Optional.ofNullable(paymentSchedule);
            return this;
        }

        /**
         * <p>If this is a recurring invoice, this will be the payment schedule for the invoice. If not provided, this will be a one-time invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentSchedule", nulls = Nulls.SKIP)
        public _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule) {
            this.paymentSchedule = paymentSchedule;
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchPayment(Boolean batchPayment) {
            this.batchPayment = Optional.ofNullable(batchPayment);
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Batches are automatically determined by Mercoa based on the payment source, destination, and scheduled payment date.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchPayment", nulls = Nulls.SKIP)
        public _FinalStage batchPayment(Optional<Boolean> batchPayment) {
            this.batchPayment = batchPayment;
            return this;
        }

        /**
         * <p>If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fees(InvoiceFeesRequest fees) {
            this.fees = Optional.ofNullable(fees);
            return this;
        }

        /**
         * <p>If using a custom payment method, you can override the default fees for this invoice. If not provided, the default fees for the custom payment method will be used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fees", nulls = Nulls.SKIP)
        public _FinalStage fees(Optional<InvoiceFeesRequest> fees) {
            this.fees = fees;
            return this;
        }

        /**
         * <p>If the invoice failed to be paid, indicate the failure reason. Only applicable for invoices with custom payment methods.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureType(InvoiceFailureType failureType) {
            this.failureType = Optional.ofNullable(failureType);
            return this;
        }

        /**
         * <p>If the invoice failed to be paid, indicate the failure reason. Only applicable for invoices with custom payment methods.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureType", nulls = Nulls.SKIP)
        public _FinalStage failureType(Optional<InvoiceFailureType> failureType) {
            this.failureType = failureType;
            return this;
        }

        /**
         * <p>User ID or Foreign ID of entity user who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorUserId(String creatorUserId) {
            this.creatorUserId = Optional.ofNullable(creatorUserId);
            return this;
        }

        /**
         * <p>User ID or Foreign ID of entity user who created this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creatorUserId", nulls = Nulls.SKIP)
        public _FinalStage creatorUserId(Optional<String> creatorUserId) {
            this.creatorUserId = creatorUserId;
            return this;
        }

        /**
         * <p>DEPRECATED. Use document field instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uploadedImage(String uploadedImage) {
            this.uploadedImage = Optional.ofNullable(uploadedImage);
            return this;
        }

        /**
         * <p>DEPRECATED. Use document field instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "uploadedImage", nulls = Nulls.SKIP)
        public _FinalStage uploadedImage(Optional<String> uploadedImage) {
            this.uploadedImage = uploadedImage;
            return this;
        }

        /**
         * <p>Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB. If the invoice already has a document, this will add a new document to the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage document(String document) {
            this.document = Optional.ofNullable(document);
            return this;
        }

        /**
         * <p>Base64-encoded string. Supported file types include PNG, JPG, WEBP, PDF, and all Microsoft Office formats (automatically converted to PDF). Max file size 10MB. If the invoice already has a document, this will add a new document to the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "document", nulls = Nulls.SKIP)
        public _FinalStage document(Optional<String> document) {
            this.document = document;
            return this;
        }

        /**
         * <p>The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage foreignId(String foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        /**
         * <p>The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public _FinalStage foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Metadata associated with this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>Set approvers for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage approvers(List<ApprovalSlotAssignment> approvers) {
            this.approvers = Optional.ofNullable(approvers);
            return this;
        }

        /**
         * <p>Set approvers for this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public _FinalStage approvers(Optional<List<ApprovalSlotAssignment>> approvers) {
            this.approvers = approvers;
            return this;
        }

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.ofNullable(paymentDestinationOptions);
            return this;
        }

        /**
         * <p>Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        /**
         * <p>ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.ofNullable(paymentDestinationId);
            return this;
        }

        /**
         * <p>ID of payment destination for this invoice. If not provided, will attempt to use the default payment destination for the vendor when creating an invoice if a default payment destination exists for the vendor.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        /**
         * <p>ID or foreign ID of the vendor of this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage vendorId(String vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        /**
         * <p>ID or foreign ID of the vendor of this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        /**
         * <p>Options for the payment source. Depending on the payment source, this may include things such as BNPL configuration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentSourceOptions(PaymentSourceOptions paymentSourceOptions) {
            this.paymentSourceOptions = Optional.ofNullable(paymentSourceOptions);
            return this;
        }

        /**
         * <p>Options for the payment source. Depending on the payment source, this may include things such as BNPL configuration.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentSourceOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentSourceOptions(Optional<PaymentSourceOptions> paymentSourceOptions) {
            this.paymentSourceOptions = paymentSourceOptions;
            return this;
        }

        /**
         * <p>ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.ofNullable(paymentSourceId);
            return this;
        }

        /**
         * <p>ID of payment source for this invoice. If not provided, will attempt to use the default payment source for the payer when creating an invoice if a default payment source exists for the payer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public _FinalStage paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        /**
         * <p>ID or foreign ID of the payer of this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage payerId(String payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        /**
         * <p>ID or foreign ID of the payer of this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public _FinalStage payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * <p>Net terms in days. Must be a positive number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netTerms(Integer netTerms) {
            this.netTerms = Optional.ofNullable(netTerms);
            return this;
        }

        /**
         * <p>Net terms in days. Must be a positive number.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "netTerms", nulls = Nulls.SKIP)
        public _FinalStage netTerms(Optional<Integer> netTerms) {
            this.netTerms = netTerms;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.ofNullable(serviceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.ofNullable(serviceStartDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        /**
         * <p>Note to self or memo on invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.ofNullable(noteToSelf);
            return this;
        }

        /**
         * <p>Note to self or memo on invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public _FinalStage noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public _FinalStage invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public _FinalStage dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>Date of funds settlement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage settlementDate(OffsetDateTime settlementDate) {
            this.settlementDate = Optional.ofNullable(settlementDate);
            return this;
        }

        /**
         * <p>Date of funds settlement.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "settlementDate", nulls = Nulls.SKIP)
        public _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        /**
         * <p>Initial date when funds are scheduled to be deducted from payer's account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.ofNullable(deductionDate);
            return this;
        }

        /**
         * <p>Initial date when funds are scheduled to be deducted from payer's account.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public _FinalStage status(InvoiceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>ID or foreign ID of entity who created this invoice. If creating a payable invoice (AP), this must be the same as the payerId. If creating a receivable invoice (AR), this must be the same as the vendorId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        /**
         * <p>ID or foreign ID of entity who created this invoice. If creating a payable invoice (AP), this must be the same as the payerId. If creating a receivable invoice (AR), this must be the same as the vendorId.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public _FinalStage creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        @java.lang.Override
        public _FinalStage lineItems(List<InvoiceLineItemUpdateRequest> lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public _FinalStage lineItems(Optional<List<InvoiceLineItemUpdateRequest>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        @java.lang.Override
        public InvoiceUpdateRequestWithId build() {
            return new InvoiceUpdateRequestWithId(
                    lineItems,
                    creatorEntityId,
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    deductionDate,
                    settlementDate,
                    dueDate,
                    invoiceNumber,
                    noteToSelf,
                    serviceStartDate,
                    serviceEndDate,
                    netTerms,
                    payerId,
                    paymentSourceId,
                    paymentSourceOptions,
                    vendorId,
                    paymentDestinationId,
                    paymentDestinationOptions,
                    approvers,
                    metadata,
                    foreignId,
                    document,
                    uploadedImage,
                    creatorUserId,
                    failureType,
                    fees,
                    batchPayment,
                    paymentSchedule,
                    vendorCreditIds,
                    taxAmount,
                    shippingAmount,
                    ocrJobId,
                    paymentDestinationConfirmed,
                    invoiceId,
                    additionalProperties);
        }
    }
}
