/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PaymentMonthSchedule.Builder.class)
public final class PaymentMonthSchedule implements IPaymentScheduleBase {
    private final Optional<Integer> repeatEvery;

    private final Optional<PaymentScheduleEndCondition> ends;

    private final int dayOffset;

    private final Optional<PaymentMonthRepeatType> offsetType;

    private final Map<String, Object> additionalProperties;

    private PaymentMonthSchedule(
            Optional<Integer> repeatEvery,
            Optional<PaymentScheduleEndCondition> ends,
            int dayOffset,
            Optional<PaymentMonthRepeatType> offsetType,
            Map<String, Object> additionalProperties) {
        this.repeatEvery = repeatEvery;
        this.ends = ends;
        this.dayOffset = dayOffset;
        this.offsetType = offsetType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.
     */
    @JsonProperty("repeatEvery")
    @java.lang.Override
    public Optional<Integer> getRepeatEvery() {
        return repeatEvery;
    }

    /**
     * @return When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified
     */
    @JsonProperty("ends")
    @java.lang.Override
    public Optional<PaymentScheduleEndCondition> getEnds() {
        return ends;
    }

    /**
     * @return Offset from the start or end of the month to repeat on (0-30). Defaults to 0.
     */
    @JsonProperty("dayOffset")
    public int getDayOffset() {
        return dayOffset;
    }

    /**
     * @return Type of offset. If start, will offset from the start of the month (so 10 with an offset of start will be on the 10th of the month). If end, will offset from the end of the month (so 10 with an offset of end will be the 20th).
     */
    @JsonProperty("offsetType")
    public Optional<PaymentMonthRepeatType> getOffsetType() {
        return offsetType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMonthSchedule && equalTo((PaymentMonthSchedule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMonthSchedule other) {
        return repeatEvery.equals(other.repeatEvery)
                && ends.equals(other.ends)
                && dayOffset == other.dayOffset
                && offsetType.equals(other.offsetType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.repeatEvery, this.ends, this.dayOffset, this.offsetType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DayOffsetStage builder() {
        return new Builder();
    }

    public interface DayOffsetStage {
        _FinalStage dayOffset(int dayOffset);

        Builder from(PaymentMonthSchedule other);
    }

    public interface _FinalStage {
        PaymentMonthSchedule build();

        _FinalStage repeatEvery(Optional<Integer> repeatEvery);

        _FinalStage repeatEvery(Integer repeatEvery);

        _FinalStage ends(Optional<PaymentScheduleEndCondition> ends);

        _FinalStage ends(PaymentScheduleEndCondition ends);

        _FinalStage offsetType(Optional<PaymentMonthRepeatType> offsetType);

        _FinalStage offsetType(PaymentMonthRepeatType offsetType);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DayOffsetStage, _FinalStage {
        private int dayOffset;

        private Optional<PaymentMonthRepeatType> offsetType = Optional.empty();

        private Optional<PaymentScheduleEndCondition> ends = Optional.empty();

        private Optional<Integer> repeatEvery = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMonthSchedule other) {
            repeatEvery(other.getRepeatEvery());
            ends(other.getEnds());
            dayOffset(other.getDayOffset());
            offsetType(other.getOffsetType());
            return this;
        }

        /**
         * <p>Offset from the start or end of the month to repeat on (0-30). Defaults to 0.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dayOffset")
        public _FinalStage dayOffset(int dayOffset) {
            this.dayOffset = dayOffset;
            return this;
        }

        /**
         * <p>Type of offset. If start, will offset from the start of the month (so 10 with an offset of start will be on the 10th of the month). If end, will offset from the end of the month (so 10 with an offset of end will be the 20th).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage offsetType(PaymentMonthRepeatType offsetType) {
            this.offsetType = Optional.of(offsetType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "offsetType", nulls = Nulls.SKIP)
        public _FinalStage offsetType(Optional<PaymentMonthRepeatType> offsetType) {
            this.offsetType = offsetType;
            return this;
        }

        /**
         * <p>When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ends(PaymentScheduleEndCondition ends) {
            this.ends = Optional.of(ends);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ends", nulls = Nulls.SKIP)
        public _FinalStage ends(Optional<PaymentScheduleEndCondition> ends) {
            this.ends = ends;
            return this;
        }

        /**
         * <p>How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage repeatEvery(Integer repeatEvery) {
            this.repeatEvery = Optional.of(repeatEvery);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "repeatEvery", nulls = Nulls.SKIP)
        public _FinalStage repeatEvery(Optional<Integer> repeatEvery) {
            this.repeatEvery = repeatEvery;
            return this;
        }

        @java.lang.Override
        public PaymentMonthSchedule build() {
            return new PaymentMonthSchedule(repeatEvery, ends, dayOffset, offsetType, additionalProperties);
        }
    }
}
