/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoicetypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentMonthSchedule.Builder.class)
public final class PaymentMonthSchedule implements IPaymentScheduleBase {
    private final Optional<Integer> repeatEvery;

    private final Optional<PaymentScheduleEndCondition> ends;

    private final Optional<Integer> dayOffset;

    private final int repeatOnDay;

    private final Map<String, Object> additionalProperties;

    private PaymentMonthSchedule(
            Optional<Integer> repeatEvery,
            Optional<PaymentScheduleEndCondition> ends,
            Optional<Integer> dayOffset,
            int repeatOnDay,
            Map<String, Object> additionalProperties) {
        this.repeatEvery = repeatEvery;
        this.ends = ends;
        this.dayOffset = dayOffset;
        this.repeatOnDay = repeatOnDay;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.
     */
    @JsonProperty("repeatEvery")
    @java.lang.Override
    public Optional<Integer> getRepeatEvery() {
        return repeatEvery;
    }

    /**
     * @return When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified
     */
    @JsonProperty("ends")
    @java.lang.Override
    public Optional<PaymentScheduleEndCondition> getEnds() {
        return ends;
    }

    /**
     * @return deprecated. will be removed in the future and will always be 0.
     */
    @JsonProperty("dayOffset")
    public Optional<Integer> getDayOffset() {
        return dayOffset;
    }

    /**
     * @return Day of the month to repeat on. Positive values (1-31): Represent the day of the month counting from the start (e.g., 10 is the 10th day of the month). Negative values (-1 to -31): Represent the day of the month counting backward from the end (e.g., -1 is the last day of the month, -2 is the second-to-last day).
     */
    @JsonProperty("repeatOnDay")
    public int getRepeatOnDay() {
        return repeatOnDay;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMonthSchedule && equalTo((PaymentMonthSchedule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMonthSchedule other) {
        return repeatEvery.equals(other.repeatEvery)
                && ends.equals(other.ends)
                && dayOffset.equals(other.dayOffset)
                && repeatOnDay == other.repeatOnDay;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.repeatEvery, this.ends, this.dayOffset, this.repeatOnDay);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RepeatOnDayStage builder() {
        return new Builder();
    }

    public interface RepeatOnDayStage {
        /**
         * <p>Day of the month to repeat on. Positive values (1-31): Represent the day of the month counting from the start (e.g., 10 is the 10th day of the month). Negative values (-1 to -31): Represent the day of the month counting backward from the end (e.g., -1 is the last day of the month, -2 is the second-to-last day).</p>
         */
        _FinalStage repeatOnDay(int repeatOnDay);

        Builder from(PaymentMonthSchedule other);
    }

    public interface _FinalStage {
        PaymentMonthSchedule build();

        /**
         * <p>How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.</p>
         */
        _FinalStage repeatEvery(Optional<Integer> repeatEvery);

        _FinalStage repeatEvery(Integer repeatEvery);

        /**
         * <p>When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified</p>
         */
        _FinalStage ends(Optional<PaymentScheduleEndCondition> ends);

        _FinalStage ends(PaymentScheduleEndCondition ends);

        /**
         * <p>deprecated. will be removed in the future and will always be 0.</p>
         */
        _FinalStage dayOffset(Optional<Integer> dayOffset);

        _FinalStage dayOffset(Integer dayOffset);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RepeatOnDayStage, _FinalStage {
        private int repeatOnDay;

        private Optional<Integer> dayOffset = Optional.empty();

        private Optional<PaymentScheduleEndCondition> ends = Optional.empty();

        private Optional<Integer> repeatEvery = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMonthSchedule other) {
            repeatEvery(other.getRepeatEvery());
            ends(other.getEnds());
            dayOffset(other.getDayOffset());
            repeatOnDay(other.getRepeatOnDay());
            return this;
        }

        /**
         * <p>Day of the month to repeat on. Positive values (1-31): Represent the day of the month counting from the start (e.g., 10 is the 10th day of the month). Negative values (-1 to -31): Represent the day of the month counting backward from the end (e.g., -1 is the last day of the month, -2 is the second-to-last day).</p>
         * <p>Day of the month to repeat on. Positive values (1-31): Represent the day of the month counting from the start (e.g., 10 is the 10th day of the month). Negative values (-1 to -31): Represent the day of the month counting backward from the end (e.g., -1 is the last day of the month, -2 is the second-to-last day).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("repeatOnDay")
        public _FinalStage repeatOnDay(int repeatOnDay) {
            this.repeatOnDay = repeatOnDay;
            return this;
        }

        /**
         * <p>deprecated. will be removed in the future and will always be 0.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dayOffset(Integer dayOffset) {
            this.dayOffset = Optional.ofNullable(dayOffset);
            return this;
        }

        /**
         * <p>deprecated. will be removed in the future and will always be 0.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "dayOffset", nulls = Nulls.SKIP)
        public _FinalStage dayOffset(Optional<Integer> dayOffset) {
            this.dayOffset = dayOffset;
            return this;
        }

        /**
         * <p>When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ends(PaymentScheduleEndCondition ends) {
            this.ends = Optional.ofNullable(ends);
            return this;
        }

        /**
         * <p>When to end the payments, either a number of occurrences or a date. Defaults to never ending if not specified</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ends", nulls = Nulls.SKIP)
        public _FinalStage ends(Optional<PaymentScheduleEndCondition> ends) {
            this.ends = ends;
            return this;
        }

        /**
         * <p>How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage repeatEvery(Integer repeatEvery) {
            this.repeatEvery = Optional.ofNullable(repeatEvery);
            return this;
        }

        /**
         * <p>How often to repeat the payments. Defaults to 1. Must be greater than 0. For example, if repeatEvery is set to 2 and this is a daily payment, the payment will be made every other day. If repeatEvery is set to 3 and this is a weekly payment, the payment will be made every third week.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "repeatEvery", nulls = Nulls.SKIP)
        public _FinalStage repeatEvery(Optional<Integer> repeatEvery) {
            this.repeatEvery = repeatEvery;
            return this;
        }

        @java.lang.Override
        public PaymentMonthSchedule build() {
            return new PaymentMonthSchedule(repeatEvery, ends, dayOffset, repeatOnDay, additionalProperties);
        }
    }
}
