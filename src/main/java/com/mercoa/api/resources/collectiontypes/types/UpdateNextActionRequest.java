/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.collectiontypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateNextActionRequest.Builder.class)
public final class UpdateNextActionRequest {
    private final String feedback;

    private final Map<String, Object> additionalProperties;

    private UpdateNextActionRequest(String feedback, Map<String, Object> additionalProperties) {
        this.feedback = feedback;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Natural language feedback to update the collection agent's next action
     */
    @JsonProperty("feedback")
    public String getFeedback() {
        return feedback;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateNextActionRequest && equalTo((UpdateNextActionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateNextActionRequest other) {
        return feedback.equals(other.feedback);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.feedback);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FeedbackStage builder() {
        return new Builder();
    }

    public interface FeedbackStage {
        _FinalStage feedback(String feedback);

        Builder from(UpdateNextActionRequest other);
    }

    public interface _FinalStage {
        UpdateNextActionRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FeedbackStage, _FinalStage {
        private String feedback;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateNextActionRequest other) {
            feedback(other.getFeedback());
            return this;
        }

        /**
         * <p>Natural language feedback to update the collection agent's next action</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("feedback")
        public _FinalStage feedback(String feedback) {
            this.feedback = feedback;
            return this;
        }

        @java.lang.Override
        public UpdateNextActionRequest build() {
            return new UpdateNextActionRequest(feedback, additionalProperties);
        }
    }
}
