/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.collectiontypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailMessageResponse.Builder.class)
public final class EmailMessageResponse {
    private final String subject;

    private final String body;

    private final Map<String, Object> additionalProperties;

    private EmailMessageResponse(String subject, String body, Map<String, Object> additionalProperties) {
        this.subject = subject;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The subject of the email
     */
    @JsonProperty("subject")
    public String getSubject() {
        return subject;
    }

    /**
     * @return The body of the email in plaintext
     */
    @JsonProperty("body")
    public String getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailMessageResponse && equalTo((EmailMessageResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailMessageResponse other) {
        return subject.equals(other.subject) && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.subject, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SubjectStage builder() {
        return new Builder();
    }

    public interface SubjectStage {
        /**
         * <p>The subject of the email</p>
         */
        BodyStage subject(@NotNull String subject);

        Builder from(EmailMessageResponse other);
    }

    public interface BodyStage {
        /**
         * <p>The body of the email in plaintext</p>
         */
        _FinalStage body(@NotNull String body);
    }

    public interface _FinalStage {
        EmailMessageResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SubjectStage, BodyStage, _FinalStage {
        private String subject;

        private String body;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailMessageResponse other) {
            subject(other.getSubject());
            body(other.getBody());
            return this;
        }

        /**
         * <p>The subject of the email</p>
         * <p>The subject of the email</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subject")
        public BodyStage subject(@NotNull String subject) {
            this.subject = Objects.requireNonNull(subject, "subject must not be null");
            return this;
        }

        /**
         * <p>The body of the email in plaintext</p>
         * <p>The body of the email in plaintext</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull String body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        @java.lang.Override
        public EmailMessageResponse build() {
            return new EmailMessageResponse(subject, body, additionalProperties);
        }
    }
}
