/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.customizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeeCustomizationRequest.Builder.class)
public final class FeeCustomizationRequest {
    private final Optional<FeeCustomizationDetailRequest> payable;

    private final Optional<FeeCustomizationDetailRequest> receivable;

    private final Map<String, Object> additionalProperties;

    private FeeCustomizationRequest(
            Optional<FeeCustomizationDetailRequest> payable,
            Optional<FeeCustomizationDetailRequest> receivable,
            Map<String, Object> additionalProperties) {
        this.payable = payable;
        this.receivable = receivable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When the entity creating the invoice is the payer, these fees will be applied to the transaction.
     */
    @JsonProperty("payable")
    public Optional<FeeCustomizationDetailRequest> getPayable() {
        return payable;
    }

    /**
     * @return When the entity creating the invoice is the payee, these fees will be applied to the transaction.
     */
    @JsonProperty("receivable")
    public Optional<FeeCustomizationDetailRequest> getReceivable() {
        return receivable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeeCustomizationRequest && equalTo((FeeCustomizationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeeCustomizationRequest other) {
        return payable.equals(other.payable) && receivable.equals(other.receivable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.payable, this.receivable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FeeCustomizationDetailRequest> payable = Optional.empty();

        private Optional<FeeCustomizationDetailRequest> receivable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FeeCustomizationRequest other) {
            payable(other.getPayable());
            receivable(other.getReceivable());
            return this;
        }

        @JsonSetter(value = "payable", nulls = Nulls.SKIP)
        public Builder payable(Optional<FeeCustomizationDetailRequest> payable) {
            this.payable = payable;
            return this;
        }

        public Builder payable(FeeCustomizationDetailRequest payable) {
            this.payable = Optional.ofNullable(payable);
            return this;
        }

        @JsonSetter(value = "receivable", nulls = Nulls.SKIP)
        public Builder receivable(Optional<FeeCustomizationDetailRequest> receivable) {
            this.receivable = receivable;
            return this;
        }

        public Builder receivable(FeeCustomizationDetailRequest receivable) {
            this.receivable = Optional.ofNullable(receivable);
            return this;
        }

        public FeeCustomizationRequest build() {
            return new FeeCustomizationRequest(payable, receivable, additionalProperties);
        }
    }
}
