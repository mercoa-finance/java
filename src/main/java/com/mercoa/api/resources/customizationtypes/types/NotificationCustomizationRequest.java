/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.customizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationCustomizationRequest.Builder.class)
public final class NotificationCustomizationRequest {
    private final Optional<String> assumeRole;

    private final Map<String, Object> additionalProperties;

    private NotificationCustomizationRequest(Optional<String> assumeRole, Map<String, Object> additionalProperties) {
        this.assumeRole = assumeRole;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If set, notifications to this role will be sent to the email address of the entity. Set as empty string to disable.
     */
    @JsonProperty("assumeRole")
    public Optional<String> getAssumeRole() {
        return assumeRole;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationCustomizationRequest && equalTo((NotificationCustomizationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationCustomizationRequest other) {
        return assumeRole.equals(other.assumeRole);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.assumeRole);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> assumeRole = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationCustomizationRequest other) {
            assumeRole(other.getAssumeRole());
            return this;
        }

        /**
         * <p>If set, notifications to this role will be sent to the email address of the entity. Set as empty string to disable.</p>
         */
        @JsonSetter(value = "assumeRole", nulls = Nulls.SKIP)
        public Builder assumeRole(Optional<String> assumeRole) {
            this.assumeRole = assumeRole;
            return this;
        }

        public Builder assumeRole(String assumeRole) {
            this.assumeRole = Optional.ofNullable(assumeRole);
            return this;
        }

        public NotificationCustomizationRequest build() {
            return new NotificationCustomizationRequest(assumeRole, additionalProperties);
        }
    }
}
