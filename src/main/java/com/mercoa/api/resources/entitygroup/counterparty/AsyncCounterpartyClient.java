/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygroup.counterparty;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayorsRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayorsRequest;
import java.util.concurrent.CompletableFuture;

public class AsyncCounterpartyClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawCounterpartyClient rawClient;

    public AsyncCounterpartyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawCounterpartyClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawCounterpartyClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Create association between all entities in the group and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public CompletableFuture<Void> addPayees(String entityGroupId, EntityAddPayeesRequest request) {
        return this.rawClient.addPayees(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Create association between all entities in the group and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public CompletableFuture<Void> addPayees(
            String entityGroupId, EntityAddPayeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPayees(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Marks Payees as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayees(String entityGroupId, EntityHidePayeesRequest request) {
        return this.rawClient.hidePayees(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Marks Payees as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayees(
            String entityGroupId, EntityHidePayeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.hidePayees(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create association between all entities in the group and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public CompletableFuture<Void> addPayors(String entityGroupId, EntityAddPayorsRequest request) {
        return this.rawClient.addPayors(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Create association between all entities in the group and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public CompletableFuture<Void> addPayors(
            String entityGroupId, EntityAddPayorsRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPayors(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Marks Payors as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayors(String entityGroupId, EntityHidePayorsRequest request) {
        return this.rawClient.hidePayors(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Marks Payors as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayors(
            String entityGroupId, EntityHidePayorsRequest request, RequestOptions requestOptions) {
        return this.rawClient.hidePayors(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }
}
