/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygroup.user;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entitygroup.user.requests.EntityFindEntityRequest;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupUserRequest;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupUserResponse;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupUserSyncRequest;
import com.mercoa.api.resources.entitygrouptypes.types.FindEntityGroupUserResponse;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;

public class UserClient {
    protected final ClientOptions clientOptions;

    private final RawUserClient rawClient;

    public UserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawUserClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawUserClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search entity group users
     */
    public FindEntityGroupUserResponse find(String entityGroupId) {
        return this.rawClient.find(entityGroupId).body();
    }

    /**
     * Search entity group users
     */
    public FindEntityGroupUserResponse find(String entityGroupId, EntityFindEntityRequest request) {
        return this.rawClient.find(entityGroupId, request).body();
    }

    /**
     * Search entity group users
     */
    public FindEntityGroupUserResponse find(
            String entityGroupId, EntityFindEntityRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(entityGroupId, request, requestOptions).body();
    }

    /**
     * Create entity user that will be added to all entities in the group. If a user with the same foreignId already exists, the user will be updated with the new information.
     */
    public EntityGroupUserResponse create(String entityGroupId, EntityGroupUserRequest request) {
        return this.rawClient.create(entityGroupId, request).body();
    }

    /**
     * Create entity user that will be added to all entities in the group. If a user with the same foreignId already exists, the user will be updated with the new information.
     */
    public EntityGroupUserResponse create(
            String entityGroupId, EntityGroupUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityGroupId, request, requestOptions).body();
    }

    /**
     * Get entity user from a group
     */
    public EntityGroupUserResponse get(String entityGroupId, String foreignId) {
        return this.rawClient.get(entityGroupId, foreignId).body();
    }

    /**
     * Get entity user from a group
     */
    public EntityGroupUserResponse get(String entityGroupId, String foreignId, RequestOptions requestOptions) {
        return this.rawClient.get(entityGroupId, foreignId, requestOptions).body();
    }

    /**
     * Update entity user for all entities in the group.
     */
    public EntityGroupUserResponse update(String entityGroupId, String foreignId, EntityGroupUserRequest request) {
        return this.rawClient.update(entityGroupId, foreignId, request).body();
    }

    /**
     * Update entity user for all entities in the group.
     */
    public EntityGroupUserResponse update(
            String entityGroupId, String foreignId, EntityGroupUserRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .update(entityGroupId, foreignId, request, requestOptions)
                .body();
    }

    /**
     * Delete entity user from all entities in the group. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public void delete(String entityGroupId, String foreignId) {
        this.rawClient.delete(entityGroupId, foreignId).body();
    }

    /**
     * Delete entity user from all entities in the group. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public void delete(String entityGroupId, String foreignId, RequestOptions requestOptions) {
        this.rawClient.delete(entityGroupId, foreignId, requestOptions).body();
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group as the user in the Mercoa API and iFrame.
     */
    public String getToken(String entityGroupId, String foreignId) {
        return this.rawClient.getToken(entityGroupId, foreignId).body();
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group as the user in the Mercoa API and iFrame.
     */
    public String getToken(String entityGroupId, String foreignId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityGroupId, foreignId, request).body();
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group as the user in the Mercoa API and iFrame.
     */
    public String getToken(
            String entityGroupId, String foreignId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient
                .getToken(entityGroupId, foreignId, request, requestOptions)
                .body();
    }

    /**
     * Sync entity group users. This will add users to entities that do not have them and remove users from entities that have them.
     */
    public void sync(String entityGroupId) {
        this.rawClient.sync(entityGroupId).body();
    }

    /**
     * Sync entity group users. This will add users to entities that do not have them and remove users from entities that have them.
     */
    public void sync(String entityGroupId, EntityGroupUserSyncRequest request) {
        this.rawClient.sync(entityGroupId, request).body();
    }

    /**
     * Sync entity group users. This will add users to entities that do not have them and remove users from entities that have them.
     */
    public void sync(String entityGroupId, EntityGroupUserSyncRequest request, RequestOptions requestOptions) {
        this.rawClient.sync(entityGroupId, request, requestOptions).body();
    }
}
