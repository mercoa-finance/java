/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygroup;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entitygroup.counterparty.AsyncCounterpartyClient;
import com.mercoa.api.resources.entitygroup.invoice.AsyncInvoiceClient;
import com.mercoa.api.resources.entitygroup.requests.EntityGroupFindRequest;
import com.mercoa.api.resources.entitygroup.requests.EntityGroupGetRequest;
import com.mercoa.api.resources.entitygroup.user.AsyncUserClient;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupAddEntitiesRequest;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupCreateRequest;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupFindResponse;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupRemoveEntitiesRequest;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupResponse;
import com.mercoa.api.resources.entitygrouptypes.types.EntityGroupUpdateRequest;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncEntityGroupClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawEntityGroupClient rawClient;

    protected final Supplier<AsyncCounterpartyClient> counterpartyClient;

    protected final Supplier<AsyncUserClient> userClient;

    protected final Supplier<AsyncInvoiceClient> invoiceClient;

    public AsyncEntityGroupClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawEntityGroupClient(clientOptions);
        this.counterpartyClient = Suppliers.memoize(() -> new AsyncCounterpartyClient(clientOptions));
        this.userClient = Suppliers.memoize(() -> new AsyncUserClient(clientOptions));
        this.invoiceClient = Suppliers.memoize(() -> new AsyncInvoiceClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawEntityGroupClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get all entity groups. If using a JWT, will return all groups the entity is part of. If using an API key, will return all groups for the organization.
     */
    public CompletableFuture<EntityGroupFindResponse> getAll() {
        return this.rawClient.getAll().thenApply(response -> response.body());
    }

    /**
     * Get all entity groups. If using a JWT, will return all groups the entity is part of. If using an API key, will return all groups for the organization.
     */
    public CompletableFuture<EntityGroupFindResponse> getAll(EntityGroupFindRequest request) {
        return this.rawClient.getAll(request).thenApply(response -> response.body());
    }

    /**
     * Get all entity groups. If using a JWT, will return all groups the entity is part of. If using an API key, will return all groups for the organization.
     */
    public CompletableFuture<EntityGroupFindResponse> getAll(
            EntityGroupFindRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create an entity group
     */
    public CompletableFuture<EntityGroupResponse> create() {
        return this.rawClient.create().thenApply(response -> response.body());
    }

    /**
     * Create an entity group
     */
    public CompletableFuture<EntityGroupResponse> create(EntityGroupCreateRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Create an entity group
     */
    public CompletableFuture<EntityGroupResponse> create(
            EntityGroupCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get an entity group
     */
    public CompletableFuture<EntityGroupResponse> get(String entityGroupId) {
        return this.rawClient.get(entityGroupId).thenApply(response -> response.body());
    }

    /**
     * Get an entity group
     */
    public CompletableFuture<EntityGroupResponse> get(String entityGroupId, EntityGroupGetRequest request) {
        return this.rawClient.get(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Get an entity group
     */
    public CompletableFuture<EntityGroupResponse> get(
            String entityGroupId, EntityGroupGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update an entity group
     */
    public CompletableFuture<EntityGroupResponse> update(String entityGroupId) {
        return this.rawClient.update(entityGroupId).thenApply(response -> response.body());
    }

    /**
     * Update an entity group
     */
    public CompletableFuture<EntityGroupResponse> update(String entityGroupId, EntityGroupUpdateRequest request) {
        return this.rawClient.update(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Update an entity group
     */
    public CompletableFuture<EntityGroupResponse> update(
            String entityGroupId, EntityGroupUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete an entity group
     */
    public CompletableFuture<Void> delete(String entityGroupId) {
        return this.rawClient.delete(entityGroupId).thenApply(response -> response.body());
    }

    /**
     * Delete an entity group
     */
    public CompletableFuture<Void> delete(String entityGroupId, RequestOptions requestOptions) {
        return this.rawClient.delete(entityGroupId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity-group/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(String entityGroupId) {
        return this.rawClient.getToken(entityGroupId).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity-group/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(String entityGroupId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity-group/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(
            String entityGroupId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient.getToken(entityGroupId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Add entities to an entity group
     */
    public CompletableFuture<EntityGroupResponse> addEntities(
            String entityGroupId, EntityGroupAddEntitiesRequest request) {
        return this.rawClient.addEntities(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Add entities to an entity group
     */
    public CompletableFuture<EntityGroupResponse> addEntities(
            String entityGroupId, EntityGroupAddEntitiesRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .addEntities(entityGroupId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Remove entities from an entity group
     */
    public CompletableFuture<EntityGroupResponse> removeEntities(
            String entityGroupId, EntityGroupRemoveEntitiesRequest request) {
        return this.rawClient.removeEntities(entityGroupId, request).thenApply(response -> response.body());
    }

    /**
     * Remove entities from an entity group
     */
    public CompletableFuture<EntityGroupResponse> removeEntities(
            String entityGroupId, EntityGroupRemoveEntitiesRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .removeEntities(entityGroupId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public AsyncCounterpartyClient counterparty() {
        return this.counterpartyClient.get();
    }

    public AsyncUserClient user() {
        return this.userClient.get();
    }

    public AsyncInvoiceClient invoice() {
        return this.invoiceClient.get();
    }
}
