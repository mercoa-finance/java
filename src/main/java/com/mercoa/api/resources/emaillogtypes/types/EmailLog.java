/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.emaillogtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailLog.Builder.class)
public final class EmailLog {
    private final String id;

    private final IncomingEmailLogStatus status;

    private final String subject;

    private final String from;

    private final String to;

    private final String htmlBody;

    private final String textBody;

    private final Optional<EmailLogAttachment> attachment;

    private final OffsetDateTime createdAt;

    private final Optional<String> invoiceId;

    private final Map<String, Object> additionalProperties;

    private EmailLog(
            String id,
            IncomingEmailLogStatus status,
            String subject,
            String from,
            String to,
            String htmlBody,
            String textBody,
            Optional<EmailLogAttachment> attachment,
            OffsetDateTime createdAt,
            Optional<String> invoiceId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.subject = subject;
        this.from = from;
        this.to = to;
        this.htmlBody = htmlBody;
        this.textBody = textBody;
        this.attachment = attachment;
        this.createdAt = createdAt;
        this.invoiceId = invoiceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The status of the email log. If the status is PENDING, the email has not been processed yet. If the status is PROCESSED, the email has been processed and the invoice has been created. If the status is FAILED, the email was not processed due to an error.
     */
    @JsonProperty("status")
    public IncomingEmailLogStatus getStatus() {
        return status;
    }

    @JsonProperty("subject")
    public String getSubject() {
        return subject;
    }

    @JsonProperty("from")
    public String getFrom() {
        return from;
    }

    @JsonProperty("to")
    public String getTo() {
        return to;
    }

    @JsonProperty("htmlBody")
    public String getHtmlBody() {
        return htmlBody;
    }

    @JsonProperty("textBody")
    public String getTextBody() {
        return textBody;
    }

    @JsonProperty("attachment")
    public Optional<EmailLogAttachment> getAttachment() {
        return attachment;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("invoiceId")
    public Optional<String> getInvoiceId() {
        return invoiceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailLog && equalTo((EmailLog) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailLog other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && subject.equals(other.subject)
                && from.equals(other.from)
                && to.equals(other.to)
                && htmlBody.equals(other.htmlBody)
                && textBody.equals(other.textBody)
                && attachment.equals(other.attachment)
                && createdAt.equals(other.createdAt)
                && invoiceId.equals(other.invoiceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.status,
                this.subject,
                this.from,
                this.to,
                this.htmlBody,
                this.textBody,
                this.attachment,
                this.createdAt,
                this.invoiceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        StatusStage id(@NotNull String id);

        Builder from(EmailLog other);
    }

    public interface StatusStage {
        SubjectStage status(@NotNull IncomingEmailLogStatus status);
    }

    public interface SubjectStage {
        FromStage subject(@NotNull String subject);
    }

    public interface FromStage {
        ToStage from(@NotNull String from);
    }

    public interface ToStage {
        HtmlBodyStage to(@NotNull String to);
    }

    public interface HtmlBodyStage {
        TextBodyStage htmlBody(@NotNull String htmlBody);
    }

    public interface TextBodyStage {
        CreatedAtStage textBody(@NotNull String textBody);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        EmailLog build();

        _FinalStage attachment(Optional<EmailLogAttachment> attachment);

        _FinalStage attachment(EmailLogAttachment attachment);

        _FinalStage invoiceId(Optional<String> invoiceId);

        _FinalStage invoiceId(String invoiceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    StatusStage,
                    SubjectStage,
                    FromStage,
                    ToStage,
                    HtmlBodyStage,
                    TextBodyStage,
                    CreatedAtStage,
                    _FinalStage {
        private String id;

        private IncomingEmailLogStatus status;

        private String subject;

        private String from;

        private String to;

        private String htmlBody;

        private String textBody;

        private OffsetDateTime createdAt;

        private Optional<String> invoiceId = Optional.empty();

        private Optional<EmailLogAttachment> attachment = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailLog other) {
            id(other.getId());
            status(other.getStatus());
            subject(other.getSubject());
            from(other.getFrom());
            to(other.getTo());
            htmlBody(other.getHtmlBody());
            textBody(other.getTextBody());
            attachment(other.getAttachment());
            createdAt(other.getCreatedAt());
            invoiceId(other.getInvoiceId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The status of the email log. If the status is PENDING, the email has not been processed yet. If the status is PROCESSED, the email has been processed and the invoice has been created. If the status is FAILED, the email was not processed due to an error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public SubjectStage status(@NotNull IncomingEmailLogStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("subject")
        public FromStage subject(@NotNull String subject) {
            this.subject = Objects.requireNonNull(subject, "subject must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("from")
        public ToStage from(@NotNull String from) {
            this.from = Objects.requireNonNull(from, "from must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("to")
        public HtmlBodyStage to(@NotNull String to) {
            this.to = Objects.requireNonNull(to, "to must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("htmlBody")
        public TextBodyStage htmlBody(@NotNull String htmlBody) {
            this.htmlBody = Objects.requireNonNull(htmlBody, "htmlBody must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("textBody")
        public CreatedAtStage textBody(@NotNull String textBody) {
            this.textBody = Objects.requireNonNull(textBody, "textBody must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceId(String invoiceId) {
            this.invoiceId = Optional.ofNullable(invoiceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceId", nulls = Nulls.SKIP)
        public _FinalStage invoiceId(Optional<String> invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage attachment(EmailLogAttachment attachment) {
            this.attachment = Optional.ofNullable(attachment);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "attachment", nulls = Nulls.SKIP)
        public _FinalStage attachment(Optional<EmailLogAttachment> attachment) {
            this.attachment = attachment;
            return this;
        }

        @java.lang.Override
        public EmailLog build() {
            return new EmailLog(
                    id,
                    status,
                    subject,
                    from,
                    to,
                    htmlBody,
                    textBody,
                    attachment,
                    createdAt,
                    invoiceId,
                    additionalProperties);
        }
    }
}
