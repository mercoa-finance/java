/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.emaillogtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailLogAttachment.Builder.class)
public final class EmailLogAttachment {
    private final String filename;

    private final String contentType;

    private final Map<String, Object> additionalProperties;

    private EmailLogAttachment(String filename, String contentType, Map<String, Object> additionalProperties) {
        this.filename = filename;
        this.contentType = contentType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("filename")
    public String getFilename() {
        return filename;
    }

    @JsonProperty("contentType")
    public String getContentType() {
        return contentType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailLogAttachment && equalTo((EmailLogAttachment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailLogAttachment other) {
        return filename.equals(other.filename) && contentType.equals(other.contentType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filename, this.contentType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FilenameStage builder() {
        return new Builder();
    }

    public interface FilenameStage {
        ContentTypeStage filename(@NotNull String filename);

        Builder from(EmailLogAttachment other);
    }

    public interface ContentTypeStage {
        _FinalStage contentType(@NotNull String contentType);
    }

    public interface _FinalStage {
        EmailLogAttachment build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FilenameStage, ContentTypeStage, _FinalStage {
        private String filename;

        private String contentType;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailLogAttachment other) {
            filename(other.getFilename());
            contentType(other.getContentType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("filename")
        public ContentTypeStage filename(@NotNull String filename) {
            this.filename = Objects.requireNonNull(filename, "filename must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("contentType")
        public _FinalStage contentType(@NotNull String contentType) {
            this.contentType = Objects.requireNonNull(contentType, "contentType must not be null");
            return this;
        }

        @java.lang.Override
        public EmailLogAttachment build() {
            return new EmailLogAttachment(filename, contentType, additionalProperties);
        }
    }
}
