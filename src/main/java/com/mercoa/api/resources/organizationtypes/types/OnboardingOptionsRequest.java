/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = OnboardingOptionsRequest.Builder.class)
public final class OnboardingOptionsRequest {
    private final Optional<Boolean> enableBusiness;

    private final Optional<Boolean> enableIndividual;

    private final Optional<Boolean> paymentMethod;

    private final Optional<BusinessOnboardingOptions> business;

    private final Optional<IndividualOnboardingOptions> individual;

    private final Map<String, Object> additionalProperties;

    private OnboardingOptionsRequest(
            Optional<Boolean> enableBusiness,
            Optional<Boolean> enableIndividual,
            Optional<Boolean> paymentMethod,
            Optional<BusinessOnboardingOptions> business,
            Optional<IndividualOnboardingOptions> individual,
            Map<String, Object> additionalProperties) {
        this.enableBusiness = enableBusiness;
        this.enableIndividual = enableIndividual;
        this.paymentMethod = paymentMethod;
        this.business = business;
        this.individual = individual;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("enableBusiness")
    public Optional<Boolean> getEnableBusiness() {
        return enableBusiness;
    }

    @JsonProperty("enableIndividual")
    public Optional<Boolean> getEnableIndividual() {
        return enableIndividual;
    }

    @JsonProperty("paymentMethod")
    public Optional<Boolean> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("business")
    public Optional<BusinessOnboardingOptions> getBusiness() {
        return business;
    }

    @JsonProperty("individual")
    public Optional<IndividualOnboardingOptions> getIndividual() {
        return individual;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OnboardingOptionsRequest && equalTo((OnboardingOptionsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OnboardingOptionsRequest other) {
        return enableBusiness.equals(other.enableBusiness)
                && enableIndividual.equals(other.enableIndividual)
                && paymentMethod.equals(other.paymentMethod)
                && business.equals(other.business)
                && individual.equals(other.individual);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.enableBusiness, this.enableIndividual, this.paymentMethod, this.business, this.individual);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enableBusiness = Optional.empty();

        private Optional<Boolean> enableIndividual = Optional.empty();

        private Optional<Boolean> paymentMethod = Optional.empty();

        private Optional<BusinessOnboardingOptions> business = Optional.empty();

        private Optional<IndividualOnboardingOptions> individual = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OnboardingOptionsRequest other) {
            enableBusiness(other.getEnableBusiness());
            enableIndividual(other.getEnableIndividual());
            paymentMethod(other.getPaymentMethod());
            business(other.getBusiness());
            individual(other.getIndividual());
            return this;
        }

        @JsonSetter(value = "enableBusiness", nulls = Nulls.SKIP)
        public Builder enableBusiness(Optional<Boolean> enableBusiness) {
            this.enableBusiness = enableBusiness;
            return this;
        }

        public Builder enableBusiness(Boolean enableBusiness) {
            this.enableBusiness = Optional.of(enableBusiness);
            return this;
        }

        @JsonSetter(value = "enableIndividual", nulls = Nulls.SKIP)
        public Builder enableIndividual(Optional<Boolean> enableIndividual) {
            this.enableIndividual = enableIndividual;
            return this;
        }

        public Builder enableIndividual(Boolean enableIndividual) {
            this.enableIndividual = Optional.of(enableIndividual);
            return this;
        }

        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<Boolean> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(Boolean paymentMethod) {
            this.paymentMethod = Optional.of(paymentMethod);
            return this;
        }

        @JsonSetter(value = "business", nulls = Nulls.SKIP)
        public Builder business(Optional<BusinessOnboardingOptions> business) {
            this.business = business;
            return this;
        }

        public Builder business(BusinessOnboardingOptions business) {
            this.business = Optional.of(business);
            return this;
        }

        @JsonSetter(value = "individual", nulls = Nulls.SKIP)
        public Builder individual(Optional<IndividualOnboardingOptions> individual) {
            this.individual = individual;
            return this;
        }

        public Builder individual(IndividualOnboardingOptions individual) {
            this.individual = Optional.of(individual);
            return this;
        }

        public OnboardingOptionsRequest build() {
            return new OnboardingOptionsRequest(
                    enableBusiness, enableIndividual, paymentMethod, business, individual, additionalProperties);
        }
    }
}
