/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PaymentRailRequest.Builder.class)
public final class PaymentRailRequest implements IPaymentRailRequest {
    private final PaymentMethodType type;

    private final String name;

    private final Optional<PaymentRailMarkup> markup;

    private final Optional<String> description;

    private final boolean active;

    private final Map<String, Object> additionalProperties;

    private PaymentRailRequest(
            PaymentMethodType type,
            String name,
            Optional<PaymentRailMarkup> markup,
            Optional<String> description,
            boolean active,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.name = name;
        this.markup = markup;
        this.description = description;
        this.active = active;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    @java.lang.Override
    public PaymentMethodType getType() {
        return type;
    }

    /**
     * @return Name of the payment method. For custom payment methods, this is the ID of the schema.
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    @JsonProperty("markup")
    @java.lang.Override
    public Optional<PaymentRailMarkup> getMarkup() {
        return markup;
    }

    @JsonProperty("description")
    @java.lang.Override
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("active")
    @java.lang.Override
    public boolean getActive() {
        return active;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentRailRequest && equalTo((PaymentRailRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentRailRequest other) {
        return type.equals(other.type)
                && name.equals(other.name)
                && markup.equals(other.markup)
                && description.equals(other.description)
                && active == other.active;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.name, this.markup, this.description, this.active);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        NameStage type(PaymentMethodType type);

        Builder from(PaymentRailRequest other);
    }

    public interface NameStage {
        ActiveStage name(String name);
    }

    public interface ActiveStage {
        _FinalStage active(boolean active);
    }

    public interface _FinalStage {
        PaymentRailRequest build();

        _FinalStage markup(Optional<PaymentRailMarkup> markup);

        _FinalStage markup(PaymentRailMarkup markup);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, NameStage, ActiveStage, _FinalStage {
        private PaymentMethodType type;

        private String name;

        private boolean active;

        private Optional<String> description = Optional.empty();

        private Optional<PaymentRailMarkup> markup = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentRailRequest other) {
            type(other.getType());
            name(other.getName());
            markup(other.getMarkup());
            description(other.getDescription());
            active(other.getActive());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public NameStage type(PaymentMethodType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>Name of the payment method. For custom payment methods, this is the ID of the schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ActiveStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("active")
        public _FinalStage active(boolean active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.of(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage markup(PaymentRailMarkup markup) {
            this.markup = Optional.of(markup);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "markup", nulls = Nulls.SKIP)
        public _FinalStage markup(Optional<PaymentRailMarkup> markup) {
            this.markup = markup;
            return this;
        }

        @java.lang.Override
        public PaymentRailRequest build() {
            return new PaymentRailRequest(type, name, markup, description, active, additionalProperties);
        }
    }
}
