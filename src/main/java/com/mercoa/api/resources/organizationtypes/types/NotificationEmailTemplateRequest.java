/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationEmailTemplateRequest.Builder.class)
public final class NotificationEmailTemplateRequest {
    private final Optional<String> backgroundStyle;

    private final Optional<String> header;

    private final Optional<String> body;

    private final Optional<String> signature;

    private final Optional<String> footer;

    private final Optional<String> button;

    private final Map<String, Object> additionalProperties;

    private NotificationEmailTemplateRequest(
            Optional<String> backgroundStyle,
            Optional<String> header,
            Optional<String> body,
            Optional<String> signature,
            Optional<String> footer,
            Optional<String> button,
            Map<String, Object> additionalProperties) {
        this.backgroundStyle = backgroundStyle;
        this.header = header;
        this.body = body;
        this.signature = signature;
        this.footer = footer;
        this.button = button;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("backgroundStyle")
    public Optional<String> getBackgroundStyle() {
        return backgroundStyle;
    }

    @JsonProperty("header")
    public Optional<String> getHeader() {
        return header;
    }

    @JsonProperty("body")
    public Optional<String> getBody() {
        return body;
    }

    @JsonProperty("signature")
    public Optional<String> getSignature() {
        return signature;
    }

    @JsonProperty("footer")
    public Optional<String> getFooter() {
        return footer;
    }

    @JsonProperty("button")
    public Optional<String> getButton() {
        return button;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationEmailTemplateRequest && equalTo((NotificationEmailTemplateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationEmailTemplateRequest other) {
        return backgroundStyle.equals(other.backgroundStyle)
                && header.equals(other.header)
                && body.equals(other.body)
                && signature.equals(other.signature)
                && footer.equals(other.footer)
                && button.equals(other.button);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.backgroundStyle, this.header, this.body, this.signature, this.footer, this.button);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> backgroundStyle = Optional.empty();

        private Optional<String> header = Optional.empty();

        private Optional<String> body = Optional.empty();

        private Optional<String> signature = Optional.empty();

        private Optional<String> footer = Optional.empty();

        private Optional<String> button = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationEmailTemplateRequest other) {
            backgroundStyle(other.getBackgroundStyle());
            header(other.getHeader());
            body(other.getBody());
            signature(other.getSignature());
            footer(other.getFooter());
            button(other.getButton());
            return this;
        }

        @JsonSetter(value = "backgroundStyle", nulls = Nulls.SKIP)
        public Builder backgroundStyle(Optional<String> backgroundStyle) {
            this.backgroundStyle = backgroundStyle;
            return this;
        }

        public Builder backgroundStyle(String backgroundStyle) {
            this.backgroundStyle = Optional.ofNullable(backgroundStyle);
            return this;
        }

        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<String> header) {
            this.header = header;
            return this;
        }

        public Builder header(String header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public Builder body(Optional<String> body) {
            this.body = body;
            return this;
        }

        public Builder body(String body) {
            this.body = Optional.ofNullable(body);
            return this;
        }

        @JsonSetter(value = "signature", nulls = Nulls.SKIP)
        public Builder signature(Optional<String> signature) {
            this.signature = signature;
            return this;
        }

        public Builder signature(String signature) {
            this.signature = Optional.ofNullable(signature);
            return this;
        }

        @JsonSetter(value = "footer", nulls = Nulls.SKIP)
        public Builder footer(Optional<String> footer) {
            this.footer = footer;
            return this;
        }

        public Builder footer(String footer) {
            this.footer = Optional.ofNullable(footer);
            return this;
        }

        @JsonSetter(value = "button", nulls = Nulls.SKIP)
        public Builder button(Optional<String> button) {
            this.button = button;
            return this;
        }

        public Builder button(String button) {
            this.button = Optional.ofNullable(button);
            return this;
        }

        public NotificationEmailTemplateRequest build() {
            return new NotificationEmailTemplateRequest(
                    backgroundStyle, header, body, signature, footer, button, additionalProperties);
        }
    }
}
