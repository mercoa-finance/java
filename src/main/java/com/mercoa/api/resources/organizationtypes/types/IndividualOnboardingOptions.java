/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = IndividualOnboardingOptions.Builder.class)
public final class IndividualOnboardingOptions {
    private final OnboardingOption termsOfService;

    private final OnboardingOption email;

    private final OnboardingOption name;

    private final OnboardingOption dateOfBirth;

    private final OnboardingOption ssn;

    private final OnboardingOption address;

    private final OnboardingOption phone;

    private final Map<String, Object> additionalProperties;

    private IndividualOnboardingOptions(
            OnboardingOption termsOfService,
            OnboardingOption email,
            OnboardingOption name,
            OnboardingOption dateOfBirth,
            OnboardingOption ssn,
            OnboardingOption address,
            OnboardingOption phone,
            Map<String, Object> additionalProperties) {
        this.termsOfService = termsOfService;
        this.email = email;
        this.name = name;
        this.dateOfBirth = dateOfBirth;
        this.ssn = ssn;
        this.address = address;
        this.phone = phone;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("termsOfService")
    public OnboardingOption getTermsOfService() {
        return termsOfService;
    }

    @JsonProperty("email")
    public OnboardingOption getEmail() {
        return email;
    }

    @JsonProperty("name")
    public OnboardingOption getName() {
        return name;
    }

    @JsonProperty("dateOfBirth")
    public OnboardingOption getDateOfBirth() {
        return dateOfBirth;
    }

    @JsonProperty("ssn")
    public OnboardingOption getSsn() {
        return ssn;
    }

    @JsonProperty("address")
    public OnboardingOption getAddress() {
        return address;
    }

    @JsonProperty("phone")
    public OnboardingOption getPhone() {
        return phone;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualOnboardingOptions && equalTo((IndividualOnboardingOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualOnboardingOptions other) {
        return termsOfService.equals(other.termsOfService)
                && email.equals(other.email)
                && name.equals(other.name)
                && dateOfBirth.equals(other.dateOfBirth)
                && ssn.equals(other.ssn)
                && address.equals(other.address)
                && phone.equals(other.phone);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.termsOfService, this.email, this.name, this.dateOfBirth, this.ssn, this.address, this.phone);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TermsOfServiceStage builder() {
        return new Builder();
    }

    public interface TermsOfServiceStage {
        EmailStage termsOfService(OnboardingOption termsOfService);

        Builder from(IndividualOnboardingOptions other);
    }

    public interface EmailStage {
        NameStage email(OnboardingOption email);
    }

    public interface NameStage {
        DateOfBirthStage name(OnboardingOption name);
    }

    public interface DateOfBirthStage {
        SsnStage dateOfBirth(OnboardingOption dateOfBirth);
    }

    public interface SsnStage {
        AddressStage ssn(OnboardingOption ssn);
    }

    public interface AddressStage {
        PhoneStage address(OnboardingOption address);
    }

    public interface PhoneStage {
        _FinalStage phone(OnboardingOption phone);
    }

    public interface _FinalStage {
        IndividualOnboardingOptions build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TermsOfServiceStage,
                    EmailStage,
                    NameStage,
                    DateOfBirthStage,
                    SsnStage,
                    AddressStage,
                    PhoneStage,
                    _FinalStage {
        private OnboardingOption termsOfService;

        private OnboardingOption email;

        private OnboardingOption name;

        private OnboardingOption dateOfBirth;

        private OnboardingOption ssn;

        private OnboardingOption address;

        private OnboardingOption phone;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(IndividualOnboardingOptions other) {
            termsOfService(other.getTermsOfService());
            email(other.getEmail());
            name(other.getName());
            dateOfBirth(other.getDateOfBirth());
            ssn(other.getSsn());
            address(other.getAddress());
            phone(other.getPhone());
            return this;
        }

        @Override
        @JsonSetter("termsOfService")
        public EmailStage termsOfService(OnboardingOption termsOfService) {
            this.termsOfService = termsOfService;
            return this;
        }

        @Override
        @JsonSetter("email")
        public NameStage email(OnboardingOption email) {
            this.email = email;
            return this;
        }

        @Override
        @JsonSetter("name")
        public DateOfBirthStage name(OnboardingOption name) {
            this.name = name;
            return this;
        }

        @Override
        @JsonSetter("dateOfBirth")
        public SsnStage dateOfBirth(OnboardingOption dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        @Override
        @JsonSetter("ssn")
        public AddressStage ssn(OnboardingOption ssn) {
            this.ssn = ssn;
            return this;
        }

        @Override
        @JsonSetter("address")
        public PhoneStage address(OnboardingOption address) {
            this.address = address;
            return this;
        }

        @Override
        @JsonSetter("phone")
        public _FinalStage phone(OnboardingOption phone) {
            this.phone = phone;
            return this;
        }

        @Override
        public IndividualOnboardingOptions build() {
            return new IndividualOnboardingOptions(
                    termsOfService, email, name, dateOfBirth, ssn, address, phone, additionalProperties);
        }
    }
}
