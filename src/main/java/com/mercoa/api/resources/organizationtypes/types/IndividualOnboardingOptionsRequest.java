/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndividualOnboardingOptionsRequest.Builder.class)
public final class IndividualOnboardingOptionsRequest implements ICommonOnboardingOptionsRequest {
    private final Optional<OnboardingOptionRequest> termsOfService;

    private final Optional<OnboardingOptionRequest> email;

    private final Optional<OnboardingOptionRequest> name;

    private final Optional<OnboardingOptionRequest> address;

    private final Optional<OnboardingOptionRequest> phone;

    private final Optional<OnboardingOptionRequest> tenNinetyNine;

    private final Optional<OnboardingOptionRequest> w9;

    private final Optional<OnboardingOptionRequest> bankStatement;

    private final Optional<OnboardingOptionRequest> dateOfBirth;

    private final Optional<OnboardingOptionRequest> ssn;

    private final Map<String, Object> additionalProperties;

    private IndividualOnboardingOptionsRequest(
            Optional<OnboardingOptionRequest> termsOfService,
            Optional<OnboardingOptionRequest> email,
            Optional<OnboardingOptionRequest> name,
            Optional<OnboardingOptionRequest> address,
            Optional<OnboardingOptionRequest> phone,
            Optional<OnboardingOptionRequest> tenNinetyNine,
            Optional<OnboardingOptionRequest> w9,
            Optional<OnboardingOptionRequest> bankStatement,
            Optional<OnboardingOptionRequest> dateOfBirth,
            Optional<OnboardingOptionRequest> ssn,
            Map<String, Object> additionalProperties) {
        this.termsOfService = termsOfService;
        this.email = email;
        this.name = name;
        this.address = address;
        this.phone = phone;
        this.tenNinetyNine = tenNinetyNine;
        this.w9 = w9;
        this.bankStatement = bankStatement;
        this.dateOfBirth = dateOfBirth;
        this.ssn = ssn;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("termsOfService")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getTermsOfService() {
        return termsOfService;
    }

    @JsonProperty("email")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getEmail() {
        return email;
    }

    @JsonProperty("name")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getName() {
        return name;
    }

    @JsonProperty("address")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getAddress() {
        return address;
    }

    @JsonProperty("phone")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getPhone() {
        return phone;
    }

    @JsonProperty("tenNinetyNine")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getTenNinetyNine() {
        return tenNinetyNine;
    }

    @JsonProperty("w9")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getW9() {
        return w9;
    }

    @JsonProperty("bankStatement")
    @java.lang.Override
    public Optional<OnboardingOptionRequest> getBankStatement() {
        return bankStatement;
    }

    @JsonProperty("dateOfBirth")
    public Optional<OnboardingOptionRequest> getDateOfBirth() {
        return dateOfBirth;
    }

    @JsonProperty("ssn")
    public Optional<OnboardingOptionRequest> getSsn() {
        return ssn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualOnboardingOptionsRequest
                && equalTo((IndividualOnboardingOptionsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualOnboardingOptionsRequest other) {
        return termsOfService.equals(other.termsOfService)
                && email.equals(other.email)
                && name.equals(other.name)
                && address.equals(other.address)
                && phone.equals(other.phone)
                && tenNinetyNine.equals(other.tenNinetyNine)
                && w9.equals(other.w9)
                && bankStatement.equals(other.bankStatement)
                && dateOfBirth.equals(other.dateOfBirth)
                && ssn.equals(other.ssn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.termsOfService,
                this.email,
                this.name,
                this.address,
                this.phone,
                this.tenNinetyNine,
                this.w9,
                this.bankStatement,
                this.dateOfBirth,
                this.ssn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OnboardingOptionRequest> termsOfService = Optional.empty();

        private Optional<OnboardingOptionRequest> email = Optional.empty();

        private Optional<OnboardingOptionRequest> name = Optional.empty();

        private Optional<OnboardingOptionRequest> address = Optional.empty();

        private Optional<OnboardingOptionRequest> phone = Optional.empty();

        private Optional<OnboardingOptionRequest> tenNinetyNine = Optional.empty();

        private Optional<OnboardingOptionRequest> w9 = Optional.empty();

        private Optional<OnboardingOptionRequest> bankStatement = Optional.empty();

        private Optional<OnboardingOptionRequest> dateOfBirth = Optional.empty();

        private Optional<OnboardingOptionRequest> ssn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(IndividualOnboardingOptionsRequest other) {
            termsOfService(other.getTermsOfService());
            email(other.getEmail());
            name(other.getName());
            address(other.getAddress());
            phone(other.getPhone());
            tenNinetyNine(other.getTenNinetyNine());
            w9(other.getW9());
            bankStatement(other.getBankStatement());
            dateOfBirth(other.getDateOfBirth());
            ssn(other.getSsn());
            return this;
        }

        @JsonSetter(value = "termsOfService", nulls = Nulls.SKIP)
        public Builder termsOfService(Optional<OnboardingOptionRequest> termsOfService) {
            this.termsOfService = termsOfService;
            return this;
        }

        public Builder termsOfService(OnboardingOptionRequest termsOfService) {
            this.termsOfService = Optional.ofNullable(termsOfService);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<OnboardingOptionRequest> email) {
            this.email = email;
            return this;
        }

        public Builder email(OnboardingOptionRequest email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<OnboardingOptionRequest> name) {
            this.name = name;
            return this;
        }

        public Builder name(OnboardingOptionRequest name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<OnboardingOptionRequest> address) {
            this.address = address;
            return this;
        }

        public Builder address(OnboardingOptionRequest address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<OnboardingOptionRequest> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(OnboardingOptionRequest phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "tenNinetyNine", nulls = Nulls.SKIP)
        public Builder tenNinetyNine(Optional<OnboardingOptionRequest> tenNinetyNine) {
            this.tenNinetyNine = tenNinetyNine;
            return this;
        }

        public Builder tenNinetyNine(OnboardingOptionRequest tenNinetyNine) {
            this.tenNinetyNine = Optional.ofNullable(tenNinetyNine);
            return this;
        }

        @JsonSetter(value = "w9", nulls = Nulls.SKIP)
        public Builder w9(Optional<OnboardingOptionRequest> w9) {
            this.w9 = w9;
            return this;
        }

        public Builder w9(OnboardingOptionRequest w9) {
            this.w9 = Optional.ofNullable(w9);
            return this;
        }

        @JsonSetter(value = "bankStatement", nulls = Nulls.SKIP)
        public Builder bankStatement(Optional<OnboardingOptionRequest> bankStatement) {
            this.bankStatement = bankStatement;
            return this;
        }

        public Builder bankStatement(OnboardingOptionRequest bankStatement) {
            this.bankStatement = Optional.ofNullable(bankStatement);
            return this;
        }

        @JsonSetter(value = "dateOfBirth", nulls = Nulls.SKIP)
        public Builder dateOfBirth(Optional<OnboardingOptionRequest> dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        public Builder dateOfBirth(OnboardingOptionRequest dateOfBirth) {
            this.dateOfBirth = Optional.ofNullable(dateOfBirth);
            return this;
        }

        @JsonSetter(value = "ssn", nulls = Nulls.SKIP)
        public Builder ssn(Optional<OnboardingOptionRequest> ssn) {
            this.ssn = ssn;
            return this;
        }

        public Builder ssn(OnboardingOptionRequest ssn) {
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        public IndividualOnboardingOptionsRequest build() {
            return new IndividualOnboardingOptionsRequest(
                    termsOfService,
                    email,
                    name,
                    address,
                    phone,
                    tenNinetyNine,
                    w9,
                    bankStatement,
                    dateOfBirth,
                    ssn,
                    additionalProperties);
        }
    }
}
