/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailProviderResponse.Builder.class)
public final class EmailProviderResponse {
    private final EmailSenderResponse sender;

    private final String inboxDomain;

    private final List<String> alternativeInboxDomains;

    private final Map<String, Object> additionalProperties;

    private EmailProviderResponse(
            EmailSenderResponse sender,
            String inboxDomain,
            List<String> alternativeInboxDomains,
            Map<String, Object> additionalProperties) {
        this.sender = sender;
        this.inboxDomain = inboxDomain;
        this.alternativeInboxDomains = alternativeInboxDomains;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sender")
    public EmailSenderResponse getSender() {
        return sender;
    }

    @JsonProperty("inboxDomain")
    public String getInboxDomain() {
        return inboxDomain;
    }

    @JsonProperty("alternativeInboxDomains")
    public List<String> getAlternativeInboxDomains() {
        return alternativeInboxDomains;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailProviderResponse && equalTo((EmailProviderResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailProviderResponse other) {
        return sender.equals(other.sender)
                && inboxDomain.equals(other.inboxDomain)
                && alternativeInboxDomains.equals(other.alternativeInboxDomains);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sender, this.inboxDomain, this.alternativeInboxDomains);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SenderStage builder() {
        return new Builder();
    }

    public interface SenderStage {
        InboxDomainStage sender(@NotNull EmailSenderResponse sender);

        Builder from(EmailProviderResponse other);
    }

    public interface InboxDomainStage {
        _FinalStage inboxDomain(@NotNull String inboxDomain);
    }

    public interface _FinalStage {
        EmailProviderResponse build();

        _FinalStage alternativeInboxDomains(List<String> alternativeInboxDomains);

        _FinalStage addAlternativeInboxDomains(String alternativeInboxDomains);

        _FinalStage addAllAlternativeInboxDomains(List<String> alternativeInboxDomains);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SenderStage, InboxDomainStage, _FinalStage {
        private EmailSenderResponse sender;

        private String inboxDomain;

        private List<String> alternativeInboxDomains = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailProviderResponse other) {
            sender(other.getSender());
            inboxDomain(other.getInboxDomain());
            alternativeInboxDomains(other.getAlternativeInboxDomains());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sender")
        public InboxDomainStage sender(@NotNull EmailSenderResponse sender) {
            this.sender = Objects.requireNonNull(sender, "sender must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("inboxDomain")
        public _FinalStage inboxDomain(@NotNull String inboxDomain) {
            this.inboxDomain = Objects.requireNonNull(inboxDomain, "inboxDomain must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllAlternativeInboxDomains(List<String> alternativeInboxDomains) {
            this.alternativeInboxDomains.addAll(alternativeInboxDomains);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAlternativeInboxDomains(String alternativeInboxDomains) {
            this.alternativeInboxDomains.add(alternativeInboxDomains);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "alternativeInboxDomains", nulls = Nulls.SKIP)
        public _FinalStage alternativeInboxDomains(List<String> alternativeInboxDomains) {
            this.alternativeInboxDomains.clear();
            this.alternativeInboxDomains.addAll(alternativeInboxDomains);
            return this;
        }

        @java.lang.Override
        public EmailProviderResponse build() {
            return new EmailProviderResponse(sender, inboxDomain, alternativeInboxDomains, additionalProperties);
        }
    }
}
