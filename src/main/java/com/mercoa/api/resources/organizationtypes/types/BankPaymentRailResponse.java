/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.BankDeliveryMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankPaymentRailResponse.Builder.class)
public final class BankPaymentRailResponse implements IGenericPaymentRailResponse {
    private final String name;

    private final boolean active;

    private final List<BankDeliveryMethod> availableDeliveryMethods;

    private final BankDeliveryMethod defaultDeliveryMethod;

    private final Map<String, Object> additionalProperties;

    private BankPaymentRailResponse(
            String name,
            boolean active,
            List<BankDeliveryMethod> availableDeliveryMethods,
            BankDeliveryMethod defaultDeliveryMethod,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.active = active;
        this.availableDeliveryMethods = availableDeliveryMethods;
        this.defaultDeliveryMethod = defaultDeliveryMethod;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return unused
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    @JsonProperty("active")
    @java.lang.Override
    public boolean getActive() {
        return active;
    }

    @JsonProperty("availableDeliveryMethods")
    public List<BankDeliveryMethod> getAvailableDeliveryMethods() {
        return availableDeliveryMethods;
    }

    @JsonProperty("defaultDeliveryMethod")
    public BankDeliveryMethod getDefaultDeliveryMethod() {
        return defaultDeliveryMethod;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankPaymentRailResponse && equalTo((BankPaymentRailResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankPaymentRailResponse other) {
        return name.equals(other.name)
                && active == other.active
                && availableDeliveryMethods.equals(other.availableDeliveryMethods)
                && defaultDeliveryMethod.equals(other.defaultDeliveryMethod);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.active, this.availableDeliveryMethods, this.defaultDeliveryMethod);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        ActiveStage name(@NotNull String name);

        Builder from(BankPaymentRailResponse other);
    }

    public interface ActiveStage {
        DefaultDeliveryMethodStage active(boolean active);
    }

    public interface DefaultDeliveryMethodStage {
        _FinalStage defaultDeliveryMethod(@NotNull BankDeliveryMethod defaultDeliveryMethod);
    }

    public interface _FinalStage {
        BankPaymentRailResponse build();

        _FinalStage availableDeliveryMethods(List<BankDeliveryMethod> availableDeliveryMethods);

        _FinalStage addAvailableDeliveryMethods(BankDeliveryMethod availableDeliveryMethods);

        _FinalStage addAllAvailableDeliveryMethods(List<BankDeliveryMethod> availableDeliveryMethods);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ActiveStage, DefaultDeliveryMethodStage, _FinalStage {
        private String name;

        private boolean active;

        private BankDeliveryMethod defaultDeliveryMethod;

        private List<BankDeliveryMethod> availableDeliveryMethods = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankPaymentRailResponse other) {
            name(other.getName());
            active(other.getActive());
            availableDeliveryMethods(other.getAvailableDeliveryMethods());
            defaultDeliveryMethod(other.getDefaultDeliveryMethod());
            return this;
        }

        /**
         * <p>unused</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ActiveStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("active")
        public DefaultDeliveryMethodStage active(boolean active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        @JsonSetter("defaultDeliveryMethod")
        public _FinalStage defaultDeliveryMethod(@NotNull BankDeliveryMethod defaultDeliveryMethod) {
            this.defaultDeliveryMethod =
                    Objects.requireNonNull(defaultDeliveryMethod, "defaultDeliveryMethod must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllAvailableDeliveryMethods(List<BankDeliveryMethod> availableDeliveryMethods) {
            this.availableDeliveryMethods.addAll(availableDeliveryMethods);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAvailableDeliveryMethods(BankDeliveryMethod availableDeliveryMethods) {
            this.availableDeliveryMethods.add(availableDeliveryMethods);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "availableDeliveryMethods", nulls = Nulls.SKIP)
        public _FinalStage availableDeliveryMethods(List<BankDeliveryMethod> availableDeliveryMethods) {
            this.availableDeliveryMethods.clear();
            this.availableDeliveryMethods.addAll(availableDeliveryMethods);
            return this;
        }

        @java.lang.Override
        public BankPaymentRailResponse build() {
            return new BankPaymentRailResponse(
                    name, active, availableDeliveryMethods, defaultDeliveryMethod, additionalProperties);
        }
    }
}
