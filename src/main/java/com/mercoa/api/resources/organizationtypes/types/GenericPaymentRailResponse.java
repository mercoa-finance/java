/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GenericPaymentRailResponse.Builder.class)
public final class GenericPaymentRailResponse implements IGenericPaymentRailResponse {
    private final String name;

    private final boolean active;

    private final Map<String, Object> additionalProperties;

    private GenericPaymentRailResponse(String name, boolean active, Map<String, Object> additionalProperties) {
        this.name = name;
        this.active = active;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return unused
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    @JsonProperty("active")
    @java.lang.Override
    public boolean getActive() {
        return active;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GenericPaymentRailResponse && equalTo((GenericPaymentRailResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GenericPaymentRailResponse other) {
        return name.equals(other.name) && active == other.active;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.active);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>unused</p>
         */
        ActiveStage name(@NotNull String name);

        Builder from(GenericPaymentRailResponse other);
    }

    public interface ActiveStage {
        _FinalStage active(boolean active);
    }

    public interface _FinalStage {
        GenericPaymentRailResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ActiveStage, _FinalStage {
        private String name;

        private boolean active;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GenericPaymentRailResponse other) {
            name(other.getName());
            active(other.getActive());
            return this;
        }

        /**
         * <p>unused</p>
         * <p>unused</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ActiveStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("active")
        public _FinalStage active(boolean active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        public GenericPaymentRailResponse build() {
            return new GenericPaymentRailResponse(name, active, additionalProperties);
        }
    }
}
