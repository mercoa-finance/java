/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentRailMarkup.Builder.class)
public final class PaymentRailMarkup {
    private final PaymentRailMarkupType type;

    private final double amount;

    private final Map<String, Object> additionalProperties;

    private PaymentRailMarkup(PaymentRailMarkupType type, double amount, Map<String, Object> additionalProperties) {
        this.type = type;
        this.amount = amount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public PaymentRailMarkupType getType() {
        return type;
    }

    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentRailMarkup && equalTo((PaymentRailMarkup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentRailMarkup other) {
        return type.equals(other.type) && amount == other.amount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.amount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        AmountStage type(@NotNull PaymentRailMarkupType type);

        Builder from(PaymentRailMarkup other);
    }

    public interface AmountStage {
        _FinalStage amount(double amount);
    }

    public interface _FinalStage {
        PaymentRailMarkup build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, AmountStage, _FinalStage {
        private PaymentRailMarkupType type;

        private double amount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentRailMarkup other) {
            type(other.getType());
            amount(other.getAmount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public AmountStage type(@NotNull PaymentRailMarkupType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public _FinalStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public PaymentRailMarkup build() {
            return new PaymentRailMarkup(type, amount, additionalProperties);
        }
    }
}
