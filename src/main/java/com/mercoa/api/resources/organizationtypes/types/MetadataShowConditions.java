/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodType;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MetadataShowConditions.Builder.class)
public final class MetadataShowConditions {
    private final Optional<Boolean> alwaysHide;

    private final Optional<Boolean> hasOptions;

    private final Optional<Boolean> hasDocument;

    private final Optional<Boolean> hasNoLineItems;

    private final Optional<List<PaymentMethodType>> paymentSourceTypes;

    private final Optional<List<String>> paymentSourceCustomSchemaIds;

    private final Optional<List<PaymentMethodType>> paymentDestinationTypes;

    private final Optional<List<String>> paymentDestinationCustomSchemaIds;

    private final Map<String, Object> additionalProperties;

    private MetadataShowConditions(
            Optional<Boolean> alwaysHide,
            Optional<Boolean> hasOptions,
            Optional<Boolean> hasDocument,
            Optional<Boolean> hasNoLineItems,
            Optional<List<PaymentMethodType>> paymentSourceTypes,
            Optional<List<String>> paymentSourceCustomSchemaIds,
            Optional<List<PaymentMethodType>> paymentDestinationTypes,
            Optional<List<String>> paymentDestinationCustomSchemaIds,
            Map<String, Object> additionalProperties) {
        this.alwaysHide = alwaysHide;
        this.hasOptions = hasOptions;
        this.hasDocument = hasDocument;
        this.hasNoLineItems = hasNoLineItems;
        this.paymentSourceTypes = paymentSourceTypes;
        this.paymentSourceCustomSchemaIds = paymentSourceCustomSchemaIds;
        this.paymentDestinationTypes = paymentDestinationTypes;
        this.paymentDestinationCustomSchemaIds = paymentDestinationCustomSchemaIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Always hide this field. Useful for getting data from OCR and AI predictions that you don't want to show in the UI.
     */
    @JsonProperty("alwaysHide")
    public Optional<Boolean> getAlwaysHide() {
        return alwaysHide;
    }

    /**
     * @return Show this field only if the entity has values set for the metadata key.
     */
    @JsonProperty("hasOptions")
    public Optional<Boolean> getHasOptions() {
        return hasOptions;
    }

    /**
     * @return Show this field only if a document has been attached.
     */
    @JsonProperty("hasDocument")
    public Optional<Boolean> getHasDocument() {
        return hasDocument;
    }

    /**
     * @return Show this field only if the invoice has no line items. Useful for showing a field that applies to the entire invoice but overridden by line items if present.
     */
    @JsonProperty("hasNoLineItems")
    public Optional<Boolean> getHasNoLineItems() {
        return hasNoLineItems;
    }

    /**
     * @return Show this field only if the payment source type is in this list.
     */
    @JsonProperty("paymentSourceTypes")
    public Optional<List<PaymentMethodType>> getPaymentSourceTypes() {
        return paymentSourceTypes;
    }

    /**
     * @return Show this field only if the payment source schema ID is in this list of payment source schema IDs. This is only applicable if paymentSourceTypes contains CUSTOM.
     */
    @JsonProperty("paymentSourceCustomSchemaIds")
    public Optional<List<String>> getPaymentSourceCustomSchemaIds() {
        return paymentSourceCustomSchemaIds;
    }

    /**
     * @return Show this field only if the payment destination type is in this list.
     */
    @JsonProperty("paymentDestinationTypes")
    public Optional<List<PaymentMethodType>> getPaymentDestinationTypes() {
        return paymentDestinationTypes;
    }

    /**
     * @return Show this field only if the payment destination schema ID is in this list of payment destination schema IDs. This is only applicable if paymentDestinationTypes contains CUSTOM.
     */
    @JsonProperty("paymentDestinationCustomSchemaIds")
    public Optional<List<String>> getPaymentDestinationCustomSchemaIds() {
        return paymentDestinationCustomSchemaIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MetadataShowConditions && equalTo((MetadataShowConditions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MetadataShowConditions other) {
        return alwaysHide.equals(other.alwaysHide)
                && hasOptions.equals(other.hasOptions)
                && hasDocument.equals(other.hasDocument)
                && hasNoLineItems.equals(other.hasNoLineItems)
                && paymentSourceTypes.equals(other.paymentSourceTypes)
                && paymentSourceCustomSchemaIds.equals(other.paymentSourceCustomSchemaIds)
                && paymentDestinationTypes.equals(other.paymentDestinationTypes)
                && paymentDestinationCustomSchemaIds.equals(other.paymentDestinationCustomSchemaIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.alwaysHide,
                this.hasOptions,
                this.hasDocument,
                this.hasNoLineItems,
                this.paymentSourceTypes,
                this.paymentSourceCustomSchemaIds,
                this.paymentDestinationTypes,
                this.paymentDestinationCustomSchemaIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> alwaysHide = Optional.empty();

        private Optional<Boolean> hasOptions = Optional.empty();

        private Optional<Boolean> hasDocument = Optional.empty();

        private Optional<Boolean> hasNoLineItems = Optional.empty();

        private Optional<List<PaymentMethodType>> paymentSourceTypes = Optional.empty();

        private Optional<List<String>> paymentSourceCustomSchemaIds = Optional.empty();

        private Optional<List<PaymentMethodType>> paymentDestinationTypes = Optional.empty();

        private Optional<List<String>> paymentDestinationCustomSchemaIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MetadataShowConditions other) {
            alwaysHide(other.getAlwaysHide());
            hasOptions(other.getHasOptions());
            hasDocument(other.getHasDocument());
            hasNoLineItems(other.getHasNoLineItems());
            paymentSourceTypes(other.getPaymentSourceTypes());
            paymentSourceCustomSchemaIds(other.getPaymentSourceCustomSchemaIds());
            paymentDestinationTypes(other.getPaymentDestinationTypes());
            paymentDestinationCustomSchemaIds(other.getPaymentDestinationCustomSchemaIds());
            return this;
        }

        @JsonSetter(value = "alwaysHide", nulls = Nulls.SKIP)
        public Builder alwaysHide(Optional<Boolean> alwaysHide) {
            this.alwaysHide = alwaysHide;
            return this;
        }

        public Builder alwaysHide(Boolean alwaysHide) {
            this.alwaysHide = Optional.ofNullable(alwaysHide);
            return this;
        }

        @JsonSetter(value = "hasOptions", nulls = Nulls.SKIP)
        public Builder hasOptions(Optional<Boolean> hasOptions) {
            this.hasOptions = hasOptions;
            return this;
        }

        public Builder hasOptions(Boolean hasOptions) {
            this.hasOptions = Optional.ofNullable(hasOptions);
            return this;
        }

        @JsonSetter(value = "hasDocument", nulls = Nulls.SKIP)
        public Builder hasDocument(Optional<Boolean> hasDocument) {
            this.hasDocument = hasDocument;
            return this;
        }

        public Builder hasDocument(Boolean hasDocument) {
            this.hasDocument = Optional.ofNullable(hasDocument);
            return this;
        }

        @JsonSetter(value = "hasNoLineItems", nulls = Nulls.SKIP)
        public Builder hasNoLineItems(Optional<Boolean> hasNoLineItems) {
            this.hasNoLineItems = hasNoLineItems;
            return this;
        }

        public Builder hasNoLineItems(Boolean hasNoLineItems) {
            this.hasNoLineItems = Optional.ofNullable(hasNoLineItems);
            return this;
        }

        @JsonSetter(value = "paymentSourceTypes", nulls = Nulls.SKIP)
        public Builder paymentSourceTypes(Optional<List<PaymentMethodType>> paymentSourceTypes) {
            this.paymentSourceTypes = paymentSourceTypes;
            return this;
        }

        public Builder paymentSourceTypes(List<PaymentMethodType> paymentSourceTypes) {
            this.paymentSourceTypes = Optional.ofNullable(paymentSourceTypes);
            return this;
        }

        @JsonSetter(value = "paymentSourceCustomSchemaIds", nulls = Nulls.SKIP)
        public Builder paymentSourceCustomSchemaIds(Optional<List<String>> paymentSourceCustomSchemaIds) {
            this.paymentSourceCustomSchemaIds = paymentSourceCustomSchemaIds;
            return this;
        }

        public Builder paymentSourceCustomSchemaIds(List<String> paymentSourceCustomSchemaIds) {
            this.paymentSourceCustomSchemaIds = Optional.ofNullable(paymentSourceCustomSchemaIds);
            return this;
        }

        @JsonSetter(value = "paymentDestinationTypes", nulls = Nulls.SKIP)
        public Builder paymentDestinationTypes(Optional<List<PaymentMethodType>> paymentDestinationTypes) {
            this.paymentDestinationTypes = paymentDestinationTypes;
            return this;
        }

        public Builder paymentDestinationTypes(List<PaymentMethodType> paymentDestinationTypes) {
            this.paymentDestinationTypes = Optional.ofNullable(paymentDestinationTypes);
            return this;
        }

        @JsonSetter(value = "paymentDestinationCustomSchemaIds", nulls = Nulls.SKIP)
        public Builder paymentDestinationCustomSchemaIds(Optional<List<String>> paymentDestinationCustomSchemaIds) {
            this.paymentDestinationCustomSchemaIds = paymentDestinationCustomSchemaIds;
            return this;
        }

        public Builder paymentDestinationCustomSchemaIds(List<String> paymentDestinationCustomSchemaIds) {
            this.paymentDestinationCustomSchemaIds = Optional.ofNullable(paymentDestinationCustomSchemaIds);
            return this;
        }

        public MetadataShowConditions build() {
            return new MetadataShowConditions(
                    alwaysHide,
                    hasOptions,
                    hasDocument,
                    hasNoLineItems,
                    paymentSourceTypes,
                    paymentSourceCustomSchemaIds,
                    paymentDestinationTypes,
                    paymentDestinationCustomSchemaIds,
                    additionalProperties);
        }
    }
}
