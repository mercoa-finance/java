/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OnboardingOptionRequest.Builder.class)
public final class OnboardingOptionRequest {
    private final Optional<Boolean> show;

    private final Optional<Boolean> edit;

    private final Optional<Boolean> required;

    private final Map<String, Object> additionalProperties;

    private OnboardingOptionRequest(
            Optional<Boolean> show,
            Optional<Boolean> edit,
            Optional<Boolean> required,
            Map<String, Object> additionalProperties) {
        this.show = show;
        this.edit = edit;
        this.required = required;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("show")
    public Optional<Boolean> getShow() {
        return show;
    }

    @JsonProperty("edit")
    public Optional<Boolean> getEdit() {
        return edit;
    }

    @JsonProperty("required")
    public Optional<Boolean> getRequired() {
        return required;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OnboardingOptionRequest && equalTo((OnboardingOptionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OnboardingOptionRequest other) {
        return show.equals(other.show) && edit.equals(other.edit) && required.equals(other.required);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.show, this.edit, this.required);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> show = Optional.empty();

        private Optional<Boolean> edit = Optional.empty();

        private Optional<Boolean> required = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OnboardingOptionRequest other) {
            show(other.getShow());
            edit(other.getEdit());
            required(other.getRequired());
            return this;
        }

        @JsonSetter(value = "show", nulls = Nulls.SKIP)
        public Builder show(Optional<Boolean> show) {
            this.show = show;
            return this;
        }

        public Builder show(Boolean show) {
            this.show = Optional.ofNullable(show);
            return this;
        }

        @JsonSetter(value = "edit", nulls = Nulls.SKIP)
        public Builder edit(Optional<Boolean> edit) {
            this.edit = edit;
            return this;
        }

        public Builder edit(Boolean edit) {
            this.edit = Optional.ofNullable(edit);
            return this;
        }

        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public Builder required(Optional<Boolean> required) {
            this.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        public OnboardingOptionRequest build() {
            return new OnboardingOptionRequest(show, edit, required, additionalProperties);
        }
    }
}
