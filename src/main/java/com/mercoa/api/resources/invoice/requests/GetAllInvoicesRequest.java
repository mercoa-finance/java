/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.OrderDirection;
import com.mercoa.api.resources.invoicetypes.types.ApproverAction;
import com.mercoa.api.resources.invoicetypes.types.InvoiceDateFilter;
import com.mercoa.api.resources.invoicetypes.types.InvoiceOrderByField;
import com.mercoa.api.resources.invoicetypes.types.InvoiceStatus;
import com.mercoa.api.resources.invoicetypes.types.MetadataFilter;
import com.mercoa.api.resources.invoicetypes.types.PaymentType;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetAllInvoicesRequest.Builder.class)
public final class GetAllInvoicesRequest {
    private final Optional<List<String>> entityId;

    private final Optional<List<MetadataFilter>> metadata;

    private final Optional<List<MetadataFilter>> lineItemMetadata;

    private final Optional<List<String>> lineItemGlAccountId;

    private final Optional<List<String>> payerId;

    private final Optional<List<String>> vendorId;

    private final Optional<List<String>> creatorUserId;

    private final Optional<List<String>> approverId;

    private final Optional<List<ApproverAction>> approverAction;

    private final Optional<List<String>> invoiceId;

    private final Optional<List<InvoiceStatus>> status;

    private final Optional<List<String>> invoiceTemplateId;

    private final Optional<String> entityGroupId;

    private final Optional<OffsetDateTime> startDate;

    private final Optional<OffsetDateTime> endDate;

    private final Optional<InvoiceDateFilter> dateType;

    private final Optional<InvoiceOrderByField> orderBy;

    private final Optional<OrderDirection> orderDirection;

    private final Optional<Integer> limit;

    private final Optional<String> startingAfter;

    private final Optional<String> search;

    private final Optional<String> approverCount;

    private final Optional<List<PaymentType>> paymentType;

    private final Optional<Boolean> returnPayerMetadata;

    private final Optional<Boolean> returnVendorMetadata;

    private final Optional<Boolean> returnPaymentTiming;

    private final Map<String, Object> additionalProperties;

    private GetAllInvoicesRequest(
            Optional<List<String>> entityId,
            Optional<List<MetadataFilter>> metadata,
            Optional<List<MetadataFilter>> lineItemMetadata,
            Optional<List<String>> lineItemGlAccountId,
            Optional<List<String>> payerId,
            Optional<List<String>> vendorId,
            Optional<List<String>> creatorUserId,
            Optional<List<String>> approverId,
            Optional<List<ApproverAction>> approverAction,
            Optional<List<String>> invoiceId,
            Optional<List<InvoiceStatus>> status,
            Optional<List<String>> invoiceTemplateId,
            Optional<String> entityGroupId,
            Optional<OffsetDateTime> startDate,
            Optional<OffsetDateTime> endDate,
            Optional<InvoiceDateFilter> dateType,
            Optional<InvoiceOrderByField> orderBy,
            Optional<OrderDirection> orderDirection,
            Optional<Integer> limit,
            Optional<String> startingAfter,
            Optional<String> search,
            Optional<String> approverCount,
            Optional<List<PaymentType>> paymentType,
            Optional<Boolean> returnPayerMetadata,
            Optional<Boolean> returnVendorMetadata,
            Optional<Boolean> returnPaymentTiming,
            Map<String, Object> additionalProperties) {
        this.entityId = entityId;
        this.metadata = metadata;
        this.lineItemMetadata = lineItemMetadata;
        this.lineItemGlAccountId = lineItemGlAccountId;
        this.payerId = payerId;
        this.vendorId = vendorId;
        this.creatorUserId = creatorUserId;
        this.approverId = approverId;
        this.approverAction = approverAction;
        this.invoiceId = invoiceId;
        this.status = status;
        this.invoiceTemplateId = invoiceTemplateId;
        this.entityGroupId = entityGroupId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.dateType = dateType;
        this.orderBy = orderBy;
        this.orderDirection = orderDirection;
        this.limit = limit;
        this.startingAfter = startingAfter;
        this.search = search;
        this.approverCount = approverCount;
        this.paymentType = paymentType;
        this.returnPayerMetadata = returnPayerMetadata;
        this.returnVendorMetadata = returnVendorMetadata;
        this.returnPaymentTiming = returnPaymentTiming;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter invoices by the ID or foreign ID of the entity that is the payer or the vendor of the invoice.
     */
    @JsonProperty("entityId")
    public Optional<List<String>> getEntityId() {
        return entityId;
    }

    /**
     * @return Filter invoices by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.
     */
    @JsonProperty("metadata")
    public Optional<List<MetadataFilter>> getMetadata() {
        return metadata;
    }

    /**
     * @return Filter invoices by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.
     */
    @JsonProperty("lineItemMetadata")
    public Optional<List<MetadataFilter>> getLineItemMetadata() {
        return lineItemMetadata;
    }

    /**
     * @return Filter invoices by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.
     */
    @JsonProperty("lineItemGlAccountId")
    public Optional<List<String>> getLineItemGlAccountId() {
        return lineItemGlAccountId;
    }

    /**
     * @return Filter invoices by payer ID or payer foreign ID.
     */
    @JsonProperty("payerId")
    public Optional<List<String>> getPayerId() {
        return payerId;
    }

    /**
     * @return Filter invoices by vendor ID or vendor foreign ID.
     */
    @JsonProperty("vendorId")
    public Optional<List<String>> getVendorId() {
        return vendorId;
    }

    /**
     * @return Filter invoices by the ID or foreign ID of the user that created the invoice.
     */
    @JsonProperty("creatorUserId")
    public Optional<List<String>> getCreatorUserId() {
        return creatorUserId;
    }

    /**
     * @return Filter invoices by assigned approver user ID. Only invoices with all upstream policies approved will be returned.
     */
    @JsonProperty("approverId")
    public Optional<List<String>> getApproverId() {
        return approverId;
    }

    /**
     * @return Filter invoices by approver action. Needs to be used with approverId. For example, if you want to find all invoices that have been approved by a specific user, you would use approverId and approverAction=APPROVE.
     */
    @JsonProperty("approverAction")
    public Optional<List<ApproverAction>> getApproverAction() {
        return approverAction;
    }

    /**
     * @return Filter invoices by invoice ID or invoice foreign ID.
     */
    @JsonProperty("invoiceId")
    public Optional<List<String>> getInvoiceId() {
        return invoiceId;
    }

    /**
     * @return Invoice status to filter on
     */
    @JsonProperty("status")
    public Optional<List<InvoiceStatus>> getStatus() {
        return status;
    }

    /**
     * @return Filter invoice by invoice template ID
     */
    @JsonProperty("invoiceTemplateId")
    public Optional<List<String>> getInvoiceTemplateId() {
        return invoiceTemplateId;
    }

    /**
     * @return Filter invoices by the ID or foreign ID of the entity group that the entity belongs to.
     */
    @JsonProperty("entityGroupId")
    public Optional<String> getEntityGroupId() {
        return entityGroupId;
    }

    /**
     * @return Start date filter. Defaults to CREATED_AT unless specified the dateType is specified
     */
    @JsonProperty("startDate")
    public Optional<OffsetDateTime> getStartDate() {
        return startDate;
    }

    /**
     * @return End date filter. Defaults to CREATED_AT unless specified the dateType is specified
     */
    @JsonProperty("endDate")
    public Optional<OffsetDateTime> getEndDate() {
        return endDate;
    }

    /**
     * @return Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.
     */
    @JsonProperty("dateType")
    public Optional<InvoiceDateFilter> getDateType() {
        return dateType;
    }

    /**
     * @return Field to order invoices by. Defaults to CREATED_AT.
     */
    @JsonProperty("orderBy")
    public Optional<InvoiceOrderByField> getOrderBy() {
        return orderBy;
    }

    /**
     * @return Direction to order invoices by. Defaults to asc.
     */
    @JsonProperty("orderDirection")
    public Optional<OrderDirection> getOrderDirection() {
        return orderDirection;
    }

    /**
     * @return Number of invoices to return. Limit can range between 1 and 100, and the default is 10.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return The ID of the invoice to start after. If not provided, the first page of invoices will be returned.
     */
    @JsonProperty("startingAfter")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    /**
     * @return Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    /**
     * @return Filter invoices by the number of approvers. Use exact number (e.g., 3) or range (e.g., &quot;&gt;3&quot;, &quot;&lt;5&quot;, &quot;&gt;=2&quot;, &quot;&lt;=4&quot;).
     */
    @JsonProperty("approverCount")
    public Optional<String> getApproverCount() {
        return approverCount;
    }

    /**
     * @return Filter invoices by recurring status
     */
    @JsonProperty("paymentType")
    public Optional<List<PaymentType>> getPaymentType() {
        return paymentType;
    }

    /**
     * @return Whether to return payer metadata in the response
     */
    @JsonProperty("returnPayerMetadata")
    public Optional<Boolean> getReturnPayerMetadata() {
        return returnPayerMetadata;
    }

    /**
     * @return Whether to return vendor metadata in the response
     */
    @JsonProperty("returnVendorMetadata")
    public Optional<Boolean> getReturnVendorMetadata() {
        return returnVendorMetadata;
    }

    /**
     * @return Whether to return payment timing in the response
     */
    @JsonProperty("returnPaymentTiming")
    public Optional<Boolean> getReturnPaymentTiming() {
        return returnPaymentTiming;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetAllInvoicesRequest && equalTo((GetAllInvoicesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetAllInvoicesRequest other) {
        return entityId.equals(other.entityId)
                && metadata.equals(other.metadata)
                && lineItemMetadata.equals(other.lineItemMetadata)
                && lineItemGlAccountId.equals(other.lineItemGlAccountId)
                && payerId.equals(other.payerId)
                && vendorId.equals(other.vendorId)
                && creatorUserId.equals(other.creatorUserId)
                && approverId.equals(other.approverId)
                && approverAction.equals(other.approverAction)
                && invoiceId.equals(other.invoiceId)
                && status.equals(other.status)
                && invoiceTemplateId.equals(other.invoiceTemplateId)
                && entityGroupId.equals(other.entityGroupId)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && dateType.equals(other.dateType)
                && orderBy.equals(other.orderBy)
                && orderDirection.equals(other.orderDirection)
                && limit.equals(other.limit)
                && startingAfter.equals(other.startingAfter)
                && search.equals(other.search)
                && approverCount.equals(other.approverCount)
                && paymentType.equals(other.paymentType)
                && returnPayerMetadata.equals(other.returnPayerMetadata)
                && returnVendorMetadata.equals(other.returnVendorMetadata)
                && returnPaymentTiming.equals(other.returnPaymentTiming);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.entityId,
                this.metadata,
                this.lineItemMetadata,
                this.lineItemGlAccountId,
                this.payerId,
                this.vendorId,
                this.creatorUserId,
                this.approverId,
                this.approverAction,
                this.invoiceId,
                this.status,
                this.invoiceTemplateId,
                this.entityGroupId,
                this.startDate,
                this.endDate,
                this.dateType,
                this.orderBy,
                this.orderDirection,
                this.limit,
                this.startingAfter,
                this.search,
                this.approverCount,
                this.paymentType,
                this.returnPayerMetadata,
                this.returnVendorMetadata,
                this.returnPaymentTiming);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> entityId = Optional.empty();

        private Optional<List<MetadataFilter>> metadata = Optional.empty();

        private Optional<List<MetadataFilter>> lineItemMetadata = Optional.empty();

        private Optional<List<String>> lineItemGlAccountId = Optional.empty();

        private Optional<List<String>> payerId = Optional.empty();

        private Optional<List<String>> vendorId = Optional.empty();

        private Optional<List<String>> creatorUserId = Optional.empty();

        private Optional<List<String>> approverId = Optional.empty();

        private Optional<List<ApproverAction>> approverAction = Optional.empty();

        private Optional<List<String>> invoiceId = Optional.empty();

        private Optional<List<InvoiceStatus>> status = Optional.empty();

        private Optional<List<String>> invoiceTemplateId = Optional.empty();

        private Optional<String> entityGroupId = Optional.empty();

        private Optional<OffsetDateTime> startDate = Optional.empty();

        private Optional<OffsetDateTime> endDate = Optional.empty();

        private Optional<InvoiceDateFilter> dateType = Optional.empty();

        private Optional<InvoiceOrderByField> orderBy = Optional.empty();

        private Optional<OrderDirection> orderDirection = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> startingAfter = Optional.empty();

        private Optional<String> search = Optional.empty();

        private Optional<String> approverCount = Optional.empty();

        private Optional<List<PaymentType>> paymentType = Optional.empty();

        private Optional<Boolean> returnPayerMetadata = Optional.empty();

        private Optional<Boolean> returnVendorMetadata = Optional.empty();

        private Optional<Boolean> returnPaymentTiming = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetAllInvoicesRequest other) {
            entityId(other.getEntityId());
            metadata(other.getMetadata());
            lineItemMetadata(other.getLineItemMetadata());
            lineItemGlAccountId(other.getLineItemGlAccountId());
            payerId(other.getPayerId());
            vendorId(other.getVendorId());
            creatorUserId(other.getCreatorUserId());
            approverId(other.getApproverId());
            approverAction(other.getApproverAction());
            invoiceId(other.getInvoiceId());
            status(other.getStatus());
            invoiceTemplateId(other.getInvoiceTemplateId());
            entityGroupId(other.getEntityGroupId());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            dateType(other.getDateType());
            orderBy(other.getOrderBy());
            orderDirection(other.getOrderDirection());
            limit(other.getLimit());
            startingAfter(other.getStartingAfter());
            search(other.getSearch());
            approverCount(other.getApproverCount());
            paymentType(other.getPaymentType());
            returnPayerMetadata(other.getReturnPayerMetadata());
            returnVendorMetadata(other.getReturnVendorMetadata());
            returnPaymentTiming(other.getReturnPaymentTiming());
            return this;
        }

        /**
         * <p>Filter invoices by the ID or foreign ID of the entity that is the payer or the vendor of the invoice.</p>
         */
        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<List<String>> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(List<String> entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.of(Collections.singletonList(entityId));
            return this;
        }

        /**
         * <p>Filter invoices by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<List<MetadataFilter>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(List<MetadataFilter> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(MetadataFilter metadata) {
            this.metadata = Optional.of(Collections.singletonList(metadata));
            return this;
        }

        /**
         * <p>Filter invoices by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.</p>
         */
        @JsonSetter(value = "lineItemMetadata", nulls = Nulls.SKIP)
        public Builder lineItemMetadata(Optional<List<MetadataFilter>> lineItemMetadata) {
            this.lineItemMetadata = lineItemMetadata;
            return this;
        }

        public Builder lineItemMetadata(List<MetadataFilter> lineItemMetadata) {
            this.lineItemMetadata = Optional.ofNullable(lineItemMetadata);
            return this;
        }

        public Builder lineItemMetadata(MetadataFilter lineItemMetadata) {
            this.lineItemMetadata = Optional.of(Collections.singletonList(lineItemMetadata));
            return this;
        }

        /**
         * <p>Filter invoices by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.</p>
         */
        @JsonSetter(value = "lineItemGlAccountId", nulls = Nulls.SKIP)
        public Builder lineItemGlAccountId(Optional<List<String>> lineItemGlAccountId) {
            this.lineItemGlAccountId = lineItemGlAccountId;
            return this;
        }

        public Builder lineItemGlAccountId(List<String> lineItemGlAccountId) {
            this.lineItemGlAccountId = Optional.ofNullable(lineItemGlAccountId);
            return this;
        }

        public Builder lineItemGlAccountId(String lineItemGlAccountId) {
            this.lineItemGlAccountId = Optional.of(Collections.singletonList(lineItemGlAccountId));
            return this;
        }

        /**
         * <p>Filter invoices by payer ID or payer foreign ID.</p>
         */
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public Builder payerId(Optional<List<String>> payerId) {
            this.payerId = payerId;
            return this;
        }

        public Builder payerId(List<String> payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        public Builder payerId(String payerId) {
            this.payerId = Optional.of(Collections.singletonList(payerId));
            return this;
        }

        /**
         * <p>Filter invoices by vendor ID or vendor foreign ID.</p>
         */
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<List<String>> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(List<String> vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        public Builder vendorId(String vendorId) {
            this.vendorId = Optional.of(Collections.singletonList(vendorId));
            return this;
        }

        /**
         * <p>Filter invoices by the ID or foreign ID of the user that created the invoice.</p>
         */
        @JsonSetter(value = "creatorUserId", nulls = Nulls.SKIP)
        public Builder creatorUserId(Optional<List<String>> creatorUserId) {
            this.creatorUserId = creatorUserId;
            return this;
        }

        public Builder creatorUserId(List<String> creatorUserId) {
            this.creatorUserId = Optional.ofNullable(creatorUserId);
            return this;
        }

        public Builder creatorUserId(String creatorUserId) {
            this.creatorUserId = Optional.of(Collections.singletonList(creatorUserId));
            return this;
        }

        /**
         * <p>Filter invoices by assigned approver user ID. Only invoices with all upstream policies approved will be returned.</p>
         */
        @JsonSetter(value = "approverId", nulls = Nulls.SKIP)
        public Builder approverId(Optional<List<String>> approverId) {
            this.approverId = approverId;
            return this;
        }

        public Builder approverId(List<String> approverId) {
            this.approverId = Optional.ofNullable(approverId);
            return this;
        }

        public Builder approverId(String approverId) {
            this.approverId = Optional.of(Collections.singletonList(approverId));
            return this;
        }

        /**
         * <p>Filter invoices by approver action. Needs to be used with approverId. For example, if you want to find all invoices that have been approved by a specific user, you would use approverId and approverAction=APPROVE.</p>
         */
        @JsonSetter(value = "approverAction", nulls = Nulls.SKIP)
        public Builder approverAction(Optional<List<ApproverAction>> approverAction) {
            this.approverAction = approverAction;
            return this;
        }

        public Builder approverAction(List<ApproverAction> approverAction) {
            this.approverAction = Optional.ofNullable(approverAction);
            return this;
        }

        public Builder approverAction(ApproverAction approverAction) {
            this.approverAction = Optional.of(Collections.singletonList(approverAction));
            return this;
        }

        /**
         * <p>Filter invoices by invoice ID or invoice foreign ID.</p>
         */
        @JsonSetter(value = "invoiceId", nulls = Nulls.SKIP)
        public Builder invoiceId(Optional<List<String>> invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        public Builder invoiceId(List<String> invoiceId) {
            this.invoiceId = Optional.ofNullable(invoiceId);
            return this;
        }

        public Builder invoiceId(String invoiceId) {
            this.invoiceId = Optional.of(Collections.singletonList(invoiceId));
            return this;
        }

        /**
         * <p>Invoice status to filter on</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<List<InvoiceStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(List<InvoiceStatus> status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(InvoiceStatus status) {
            this.status = Optional.of(Collections.singletonList(status));
            return this;
        }

        /**
         * <p>Filter invoice by invoice template ID</p>
         */
        @JsonSetter(value = "invoiceTemplateId", nulls = Nulls.SKIP)
        public Builder invoiceTemplateId(Optional<List<String>> invoiceTemplateId) {
            this.invoiceTemplateId = invoiceTemplateId;
            return this;
        }

        public Builder invoiceTemplateId(List<String> invoiceTemplateId) {
            this.invoiceTemplateId = Optional.ofNullable(invoiceTemplateId);
            return this;
        }

        public Builder invoiceTemplateId(String invoiceTemplateId) {
            this.invoiceTemplateId = Optional.of(Collections.singletonList(invoiceTemplateId));
            return this;
        }

        /**
         * <p>Filter invoices by the ID or foreign ID of the entity group that the entity belongs to.</p>
         */
        @JsonSetter(value = "entityGroupId", nulls = Nulls.SKIP)
        public Builder entityGroupId(Optional<String> entityGroupId) {
            this.entityGroupId = entityGroupId;
            return this;
        }

        public Builder entityGroupId(String entityGroupId) {
            this.entityGroupId = Optional.ofNullable(entityGroupId);
            return this;
        }

        /**
         * <p>Start date filter. Defaults to CREATED_AT unless specified the dateType is specified</p>
         */
        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * <p>End date filter. Defaults to CREATED_AT unless specified the dateType is specified</p>
         */
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.</p>
         */
        @JsonSetter(value = "dateType", nulls = Nulls.SKIP)
        public Builder dateType(Optional<InvoiceDateFilter> dateType) {
            this.dateType = dateType;
            return this;
        }

        public Builder dateType(InvoiceDateFilter dateType) {
            this.dateType = Optional.ofNullable(dateType);
            return this;
        }

        /**
         * <p>Field to order invoices by. Defaults to CREATED_AT.</p>
         */
        @JsonSetter(value = "orderBy", nulls = Nulls.SKIP)
        public Builder orderBy(Optional<InvoiceOrderByField> orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        public Builder orderBy(InvoiceOrderByField orderBy) {
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * <p>Direction to order invoices by. Defaults to asc.</p>
         */
        @JsonSetter(value = "orderDirection", nulls = Nulls.SKIP)
        public Builder orderDirection(Optional<OrderDirection> orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        public Builder orderDirection(OrderDirection orderDirection) {
            this.orderDirection = Optional.ofNullable(orderDirection);
            return this;
        }

        /**
         * <p>Number of invoices to return. Limit can range between 1 and 100, and the default is 10.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>The ID of the invoice to start after. If not provided, the first page of invoices will be returned.</p>
         */
        @JsonSetter(value = "startingAfter", nulls = Nulls.SKIP)
        public Builder startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        public Builder startingAfter(String startingAfter) {
            this.startingAfter = Optional.ofNullable(startingAfter);
            return this;
        }

        /**
         * <p>Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.</p>
         */
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Filter invoices by the number of approvers. Use exact number (e.g., 3) or range (e.g., &quot;&gt;3&quot;, &quot;&lt;5&quot;, &quot;&gt;=2&quot;, &quot;&lt;=4&quot;).</p>
         */
        @JsonSetter(value = "approverCount", nulls = Nulls.SKIP)
        public Builder approverCount(Optional<String> approverCount) {
            this.approverCount = approverCount;
            return this;
        }

        public Builder approverCount(String approverCount) {
            this.approverCount = Optional.ofNullable(approverCount);
            return this;
        }

        /**
         * <p>Filter invoices by recurring status</p>
         */
        @JsonSetter(value = "paymentType", nulls = Nulls.SKIP)
        public Builder paymentType(Optional<List<PaymentType>> paymentType) {
            this.paymentType = paymentType;
            return this;
        }

        public Builder paymentType(List<PaymentType> paymentType) {
            this.paymentType = Optional.ofNullable(paymentType);
            return this;
        }

        /**
         * <p>Whether to return payer metadata in the response</p>
         */
        @JsonSetter(value = "returnPayerMetadata", nulls = Nulls.SKIP)
        public Builder returnPayerMetadata(Optional<Boolean> returnPayerMetadata) {
            this.returnPayerMetadata = returnPayerMetadata;
            return this;
        }

        public Builder returnPayerMetadata(Boolean returnPayerMetadata) {
            this.returnPayerMetadata = Optional.ofNullable(returnPayerMetadata);
            return this;
        }

        /**
         * <p>Whether to return vendor metadata in the response</p>
         */
        @JsonSetter(value = "returnVendorMetadata", nulls = Nulls.SKIP)
        public Builder returnVendorMetadata(Optional<Boolean> returnVendorMetadata) {
            this.returnVendorMetadata = returnVendorMetadata;
            return this;
        }

        public Builder returnVendorMetadata(Boolean returnVendorMetadata) {
            this.returnVendorMetadata = Optional.ofNullable(returnVendorMetadata);
            return this;
        }

        /**
         * <p>Whether to return payment timing in the response</p>
         */
        @JsonSetter(value = "returnPaymentTiming", nulls = Nulls.SKIP)
        public Builder returnPaymentTiming(Optional<Boolean> returnPaymentTiming) {
            this.returnPaymentTiming = returnPaymentTiming;
            return this;
        }

        public Builder returnPaymentTiming(Boolean returnPaymentTiming) {
            this.returnPaymentTiming = Optional.ofNullable(returnPaymentTiming);
            return this;
        }

        public GetAllInvoicesRequest build() {
            return new GetAllInvoicesRequest(
                    entityId,
                    metadata,
                    lineItemMetadata,
                    lineItemGlAccountId,
                    payerId,
                    vendorId,
                    creatorUserId,
                    approverId,
                    approverAction,
                    invoiceId,
                    status,
                    invoiceTemplateId,
                    entityGroupId,
                    startDate,
                    endDate,
                    dateType,
                    orderBy,
                    orderDirection,
                    limit,
                    startingAfter,
                    search,
                    approverCount,
                    paymentType,
                    returnPayerMetadata,
                    returnVendorMetadata,
                    returnPaymentTiming,
                    additionalProperties);
        }
    }
}
