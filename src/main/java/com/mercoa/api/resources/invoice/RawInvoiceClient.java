/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.invoice.requests.GetAllInvoicesRequest;
import com.mercoa.api.resources.invoice.requests.InvoiceInvoiceGetEventsRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceCreationRequest;
import com.mercoa.api.resources.invoicetypes.types.InvoiceEventsResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceUpdateRequest;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawInvoiceClient {
    protected final ClientOptions clientOptions;

    public RawInvoiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Search invoices for all entities in the organization
     */
    public MercoaHttpResponse<FindInvoiceResponse> find() {
        return find(GetAllInvoicesRequest.builder().build());
    }

    /**
     * Search invoices for all entities in the organization
     */
    public MercoaHttpResponse<FindInvoiceResponse> find(GetAllInvoicesRequest request) {
        return find(request, null);
    }

    /**
     * Search invoices for all entities in the organization
     */
    public MercoaHttpResponse<FindInvoiceResponse> find(GetAllInvoicesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoices");
        if (request.getEntityGroupId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityGroupId", request.getEntityGroupId().get(), false);
        }
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get(), false);
        }
        if (request.getDateType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "dateType", request.getDateType().get(), false);
        }
        if (request.getOrderBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderBy", request.getOrderBy().get(), false);
        }
        if (request.getOrderDirection().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderDirection", request.getOrderDirection().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getApproverCount().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverCount", request.getApproverCount().get(), false);
        }
        if (request.getPaymentType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentType", request.getPaymentType().get(), false);
        }
        if (request.getReturnPayerMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "returnPayerMetadata",
                    request.getReturnPayerMetadata().get(),
                    false);
        }
        if (request.getReturnVendorMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "returnVendorMetadata",
                    request.getReturnVendorMetadata().get(),
                    false);
        }
        if (request.getReturnPaymentTiming().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "returnPaymentTiming",
                    request.getReturnPaymentTiming().get(),
                    false);
        }
        if (request.getEntityId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityId", request.getEntityId().get(), true);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get(), true);
        }
        if (request.getLineItemMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "lineItemMetadata", request.getLineItemMetadata().get(), true);
        }
        if (request.getLineItemGlAccountId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lineItemGlAccountId",
                    request.getLineItemGlAccountId().get(),
                    true);
        }
        if (request.getPayerId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "payerId", request.getPayerId().get(), true);
        }
        if (request.getVendorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "vendorId", request.getVendorId().get(), true);
        }
        if (request.getCreatorUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "creatorUserId", request.getCreatorUserId().get(), true);
        }
        if (request.getApproverId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverId", request.getApproverId().get(), true);
        }
        if (request.getApproverAction().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverAction", request.getApproverAction().get(), true);
        }
        if (request.getInvoiceId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceId", request.getInvoiceId().get(), true);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), true);
        }
        if (request.getInvoiceTemplateId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceTemplateId", request.getInvoiceTemplateId().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FindInvoiceResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    public MercoaHttpResponse<InvoiceResponse> create(InvoiceCreationRequest request) {
        return create(request, null);
    }

    public MercoaHttpResponse<InvoiceResponse> create(InvoiceCreationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InvoiceResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    public MercoaHttpResponse<InvoiceResponse> get(String invoiceId) {
        return get(invoiceId, null);
    }

    public MercoaHttpResponse<InvoiceResponse> get(String invoiceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InvoiceResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    public MercoaHttpResponse<InvoiceResponse> update(String invoiceId) {
        return update(invoiceId, InvoiceUpdateRequest.builder().build());
    }

    public MercoaHttpResponse<InvoiceResponse> update(String invoiceId, InvoiceUpdateRequest request) {
        return update(invoiceId, request, null);
    }

    public MercoaHttpResponse<InvoiceResponse> update(
            String invoiceId, InvoiceUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MercoaException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InvoiceResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public MercoaHttpResponse<Void> delete(String invoiceId) {
        return delete(invoiceId, null);
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public MercoaHttpResponse<Void> delete(String invoiceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get all events for an invoice
     */
    public MercoaHttpResponse<InvoiceEventsResponse> events(String invoiceId) {
        return events(invoiceId, InvoiceInvoiceGetEventsRequest.builder().build());
    }

    /**
     * Get all events for an invoice
     */
    public MercoaHttpResponse<InvoiceEventsResponse> events(String invoiceId, InvoiceInvoiceGetEventsRequest request) {
        return events(invoiceId, request, null);
    }

    /**
     * Get all events for an invoice
     */
    public MercoaHttpResponse<InvoiceEventsResponse> events(
            String invoiceId, InvoiceInvoiceGetEventsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .addPathSegments("events");
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InvoiceEventsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }
}
