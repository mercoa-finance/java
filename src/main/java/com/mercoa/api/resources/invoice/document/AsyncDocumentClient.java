/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice.document;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.DocumentResponse;
import com.mercoa.api.resources.emaillogtypes.types.EmailLogResponse;
import com.mercoa.api.resources.invoice.document.requests.GetDocumentsRequest;
import com.mercoa.api.resources.invoice.document.requests.UploadDocumentRequest;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncDocumentClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawDocumentClient rawClient;

    public AsyncDocumentClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawDocumentClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawDocumentClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice
     */
    public CompletableFuture<List<DocumentResponse>> getAll(String invoiceId) {
        return this.rawClient.getAll(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice
     */
    public CompletableFuture<List<DocumentResponse>> getAll(String invoiceId, GetDocumentsRequest request) {
        return this.rawClient.getAll(invoiceId, request).thenApply(response -> response.body());
    }

    /**
     * Get attachments (scanned/uploaded PDFs and images) associated with this invoice
     */
    public CompletableFuture<List<DocumentResponse>> getAll(
            String invoiceId, GetDocumentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(invoiceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Upload documents (scanned/uploaded PDFs and images) associated with this Invoice
     */
    public CompletableFuture<Void> upload(String invoiceId, UploadDocumentRequest request) {
        return this.rawClient.upload(invoiceId, request).thenApply(response -> response.body());
    }

    /**
     * Upload documents (scanned/uploaded PDFs and images) associated with this Invoice
     */
    public CompletableFuture<Void> upload(
            String invoiceId, UploadDocumentRequest request, RequestOptions requestOptions) {
        return this.rawClient.upload(invoiceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete an attachment (scanned/uploaded PDFs and images) associated with this invoice
     */
    public CompletableFuture<Void> delete(String invoiceId, String documentId) {
        return this.rawClient.delete(invoiceId, documentId).thenApply(response -> response.body());
    }

    /**
     * Delete an attachment (scanned/uploaded PDFs and images) associated with this invoice
     */
    public CompletableFuture<Void> delete(String invoiceId, String documentId, RequestOptions requestOptions) {
        return this.rawClient.delete(invoiceId, documentId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a PDF of the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public CompletableFuture<DocumentResponse> generateInvoicePdf(String invoiceId) {
        return this.rawClient.generateInvoicePdf(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Generate a PDF of the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public CompletableFuture<DocumentResponse> generateInvoicePdf(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.generateInvoicePdf(invoiceId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a PDF of the check for the invoice. If the invoice does not have check as the disbursement method, an error will be returned. If the disbursement option for the check is set to 'MAIL', a void copy of the check will be returned. If the disbursement option for the check is set to 'PRINT', a printable check will be returned. If the invoice is NOT marked as PAID, the check will be a void copy.
     */
    public CompletableFuture<DocumentResponse> generateCheckPdf(String invoiceId) {
        return this.rawClient.generateCheckPdf(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Get a PDF of the check for the invoice. If the invoice does not have check as the disbursement method, an error will be returned. If the disbursement option for the check is set to 'MAIL', a void copy of the check will be returned. If the disbursement option for the check is set to 'PRINT', a printable check will be returned. If the invoice is NOT marked as PAID, the check will be a void copy.
     */
    public CompletableFuture<DocumentResponse> generateCheckPdf(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.generateCheckPdf(invoiceId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a PDF of the payment confirmation for the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public CompletableFuture<DocumentResponse> generatePaymentConfirmationPdf(String invoiceId) {
        return this.rawClient.generatePaymentConfirmationPdf(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Generate a PDF of the payment confirmation for the invoice. This PDF is generated from the data in the invoice, not from the uploaded documents.
     */
    public CompletableFuture<DocumentResponse> generatePaymentConfirmationPdf(
            String invoiceId, RequestOptions requestOptions) {
        return this.rawClient
                .generatePaymentConfirmationPdf(invoiceId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the email subject and body that was used to create this invoice.
     */
    public CompletableFuture<EmailLogResponse> getSourceEmail(String invoiceId) {
        return this.rawClient.getSourceEmail(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Get the email subject and body that was used to create this invoice.
     */
    public CompletableFuture<EmailLogResponse> getSourceEmail(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.getSourceEmail(invoiceId, requestOptions).thenApply(response -> response.body());
    }
}
