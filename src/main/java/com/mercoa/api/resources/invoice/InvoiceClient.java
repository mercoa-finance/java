/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.invoice.approval.ApprovalClient;
import com.mercoa.api.resources.invoice.bnpl.BnplClient;
import com.mercoa.api.resources.invoice.bulk.BulkClient;
import com.mercoa.api.resources.invoice.collection.CollectionClient;
import com.mercoa.api.resources.invoice.comment.CommentClient;
import com.mercoa.api.resources.invoice.document.DocumentClient;
import com.mercoa.api.resources.invoice.lineitem.LineItemClient;
import com.mercoa.api.resources.invoice.paymentlinks.PaymentLinksClient;
import com.mercoa.api.resources.invoice.requests.GetAllInvoicesRequest;
import com.mercoa.api.resources.invoice.requests.InvoiceInvoiceGetEventsRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceCreationRequest;
import com.mercoa.api.resources.invoicetypes.types.InvoiceEventsResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceUpdateRequest;
import java.util.function.Supplier;

public class InvoiceClient {
    protected final ClientOptions clientOptions;

    private final RawInvoiceClient rawClient;

    protected final Supplier<LineItemClient> lineItemClient;

    protected final Supplier<ApprovalClient> approvalClient;

    protected final Supplier<BnplClient> bnplClient;

    protected final Supplier<BulkClient> bulkClient;

    protected final Supplier<CollectionClient> collectionClient;

    protected final Supplier<CommentClient> commentClient;

    protected final Supplier<DocumentClient> documentClient;

    protected final Supplier<PaymentLinksClient> paymentLinksClient;

    public InvoiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawInvoiceClient(clientOptions);
        this.lineItemClient = Suppliers.memoize(() -> new LineItemClient(clientOptions));
        this.approvalClient = Suppliers.memoize(() -> new ApprovalClient(clientOptions));
        this.bnplClient = Suppliers.memoize(() -> new BnplClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new BulkClient(clientOptions));
        this.collectionClient = Suppliers.memoize(() -> new CollectionClient(clientOptions));
        this.commentClient = Suppliers.memoize(() -> new CommentClient(clientOptions));
        this.documentClient = Suppliers.memoize(() -> new DocumentClient(clientOptions));
        this.paymentLinksClient = Suppliers.memoize(() -> new PaymentLinksClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawInvoiceClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search invoices for all entities in the organization
     */
    public FindInvoiceResponse find() {
        return this.rawClient.find().body();
    }

    /**
     * Search invoices for all entities in the organization
     */
    public FindInvoiceResponse find(GetAllInvoicesRequest request) {
        return this.rawClient.find(request).body();
    }

    /**
     * Search invoices for all entities in the organization
     */
    public FindInvoiceResponse find(GetAllInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).body();
    }

    public InvoiceResponse create(InvoiceCreationRequest request) {
        return this.rawClient.create(request).body();
    }

    public InvoiceResponse create(InvoiceCreationRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    public InvoiceResponse get(String invoiceId) {
        return this.rawClient.get(invoiceId).body();
    }

    public InvoiceResponse get(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.get(invoiceId, requestOptions).body();
    }

    public InvoiceResponse update(String invoiceId) {
        return this.rawClient.update(invoiceId).body();
    }

    public InvoiceResponse update(String invoiceId, InvoiceUpdateRequest request) {
        return this.rawClient.update(invoiceId, request).body();
    }

    public InvoiceResponse update(String invoiceId, InvoiceUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(invoiceId, request, requestOptions).body();
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public void delete(String invoiceId) {
        this.rawClient.delete(invoiceId).body();
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public void delete(String invoiceId, RequestOptions requestOptions) {
        this.rawClient.delete(invoiceId, requestOptions).body();
    }

    /**
     * Get all events for an invoice
     */
    public InvoiceEventsResponse events(String invoiceId) {
        return this.rawClient.events(invoiceId).body();
    }

    /**
     * Get all events for an invoice
     */
    public InvoiceEventsResponse events(String invoiceId, InvoiceInvoiceGetEventsRequest request) {
        return this.rawClient.events(invoiceId, request).body();
    }

    /**
     * Get all events for an invoice
     */
    public InvoiceEventsResponse events(
            String invoiceId, InvoiceInvoiceGetEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.events(invoiceId, request, requestOptions).body();
    }

    public LineItemClient lineItem() {
        return this.lineItemClient.get();
    }

    public ApprovalClient approval() {
        return this.approvalClient.get();
    }

    public BnplClient bnpl() {
        return this.bnplClient.get();
    }

    public BulkClient bulk() {
        return this.bulkClient.get();
    }

    public CollectionClient collection() {
        return this.collectionClient.get();
    }

    public CommentClient comment() {
        return this.commentClient.get();
    }

    public DocumentClient document() {
        return this.documentClient.get();
    }

    public PaymentLinksClient paymentLinks() {
        return this.paymentLinksClient.get();
    }
}
