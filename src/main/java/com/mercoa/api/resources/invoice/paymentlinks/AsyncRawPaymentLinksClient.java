/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice.paymentlinks;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.invoice.paymentlinks.requests.PayerLinkRequest;
import com.mercoa.api.resources.invoice.paymentlinks.requests.SendPayerEmail;
import com.mercoa.api.resources.invoice.paymentlinks.requests.VendorLinkRequest;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawPaymentLinksClient {
    protected final ClientOptions clientOptions;

    public AsyncRawPaymentLinksClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get temporary link for payer to send payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getPayerLink(String invoiceId) {
        return getPayerLink(invoiceId, PayerLinkRequest.builder().build());
    }

    /**
     * Get temporary link for payer to send payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getPayerLink(String invoiceId, PayerLinkRequest request) {
        return getPayerLink(invoiceId, request, null);
    }

    /**
     * Get temporary link for payer to send payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getPayerLink(
            String invoiceId, PayerLinkRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .addPathSegments("payerLink");
        if (request.getExpiresIn().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expiresIn", request.getExpiresIn().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<String>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), String.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Trigger email to payer inviting them to make payment
     */
    public CompletableFuture<MercoaHttpResponse<Void>> sendPayerEmail(String invoiceId) {
        return sendPayerEmail(invoiceId, SendPayerEmail.builder().build());
    }

    /**
     * Trigger email to payer inviting them to make payment
     */
    public CompletableFuture<MercoaHttpResponse<Void>> sendPayerEmail(String invoiceId, SendPayerEmail request) {
        return sendPayerEmail(invoiceId, request, null);
    }

    /**
     * Trigger email to payer inviting them to make payment
     */
    public CompletableFuture<MercoaHttpResponse<Void>> sendPayerEmail(
            String invoiceId, SendPayerEmail request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .addPathSegments("sendPayerEmail");
        if (request.getAttachInvoice().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "attachInvoice", request.getAttachInvoice().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get temporary link for vendor to accept payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getVendorLink(String invoiceId) {
        return getVendorLink(invoiceId, VendorLinkRequest.builder().build());
    }

    /**
     * Get temporary link for vendor to accept payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getVendorLink(String invoiceId, VendorLinkRequest request) {
        return getVendorLink(invoiceId, request, null);
    }

    /**
     * Get temporary link for vendor to accept payment
     */
    public CompletableFuture<MercoaHttpResponse<String>> getVendorLink(
            String invoiceId, VendorLinkRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .addPathSegments("vendorLink");
        if (request.getExpiresIn().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expiresIn", request.getExpiresIn().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<String>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), String.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Trigger email to vendor inviting them into the vendor portal
     */
    public CompletableFuture<MercoaHttpResponse<Void>> sendVendorEmail(String invoiceId) {
        return sendVendorEmail(invoiceId, null);
    }

    /**
     * Trigger email to vendor inviting them into the vendor portal
     */
    public CompletableFuture<MercoaHttpResponse<Void>> sendVendorEmail(
            String invoiceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoice")
                .addPathSegment(invoiceId)
                .addPathSegments("sendVendorEmail")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
