/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.invoice.approval.AsyncApprovalClient;
import com.mercoa.api.resources.invoice.bnpl.AsyncBnplClient;
import com.mercoa.api.resources.invoice.bulk.AsyncBulkClient;
import com.mercoa.api.resources.invoice.collection.AsyncCollectionClient;
import com.mercoa.api.resources.invoice.comment.AsyncCommentClient;
import com.mercoa.api.resources.invoice.document.AsyncDocumentClient;
import com.mercoa.api.resources.invoice.lineitem.AsyncLineItemClient;
import com.mercoa.api.resources.invoice.paymentlinks.AsyncPaymentLinksClient;
import com.mercoa.api.resources.invoice.requests.GetAllInvoicesRequest;
import com.mercoa.api.resources.invoice.requests.InvoiceInvoiceGetEventsRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceCreationRequest;
import com.mercoa.api.resources.invoicetypes.types.InvoiceEventsResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceUpdateRequest;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncInvoiceClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawInvoiceClient rawClient;

    protected final Supplier<AsyncLineItemClient> lineItemClient;

    protected final Supplier<AsyncApprovalClient> approvalClient;

    protected final Supplier<AsyncBnplClient> bnplClient;

    protected final Supplier<AsyncBulkClient> bulkClient;

    protected final Supplier<AsyncCollectionClient> collectionClient;

    protected final Supplier<AsyncCommentClient> commentClient;

    protected final Supplier<AsyncDocumentClient> documentClient;

    protected final Supplier<AsyncPaymentLinksClient> paymentLinksClient;

    public AsyncInvoiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawInvoiceClient(clientOptions);
        this.lineItemClient = Suppliers.memoize(() -> new AsyncLineItemClient(clientOptions));
        this.approvalClient = Suppliers.memoize(() -> new AsyncApprovalClient(clientOptions));
        this.bnplClient = Suppliers.memoize(() -> new AsyncBnplClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new AsyncBulkClient(clientOptions));
        this.collectionClient = Suppliers.memoize(() -> new AsyncCollectionClient(clientOptions));
        this.commentClient = Suppliers.memoize(() -> new AsyncCommentClient(clientOptions));
        this.documentClient = Suppliers.memoize(() -> new AsyncDocumentClient(clientOptions));
        this.paymentLinksClient = Suppliers.memoize(() -> new AsyncPaymentLinksClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawInvoiceClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search invoices for all entities in the organization
     */
    public CompletableFuture<FindInvoiceResponse> find() {
        return this.rawClient.find().thenApply(response -> response.body());
    }

    /**
     * Search invoices for all entities in the organization
     */
    public CompletableFuture<FindInvoiceResponse> find(GetAllInvoicesRequest request) {
        return this.rawClient.find(request).thenApply(response -> response.body());
    }

    /**
     * Search invoices for all entities in the organization
     */
    public CompletableFuture<FindInvoiceResponse> find(GetAllInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> create(InvoiceCreationRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> create(InvoiceCreationRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> get(String invoiceId) {
        return this.rawClient.get(invoiceId).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> get(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.get(invoiceId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> update(String invoiceId) {
        return this.rawClient.update(invoiceId).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> update(String invoiceId, InvoiceUpdateRequest request) {
        return this.rawClient.update(invoiceId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<InvoiceResponse> update(
            String invoiceId, InvoiceUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(invoiceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public CompletableFuture<Void> delete(String invoiceId) {
        return this.rawClient.delete(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Only invoices in the UNASSIGNED and DRAFT statuses can be deleted.
     */
    public CompletableFuture<Void> delete(String invoiceId, RequestOptions requestOptions) {
        return this.rawClient.delete(invoiceId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get all events for an invoice
     */
    public CompletableFuture<InvoiceEventsResponse> events(String invoiceId) {
        return this.rawClient.events(invoiceId).thenApply(response -> response.body());
    }

    /**
     * Get all events for an invoice
     */
    public CompletableFuture<InvoiceEventsResponse> events(String invoiceId, InvoiceInvoiceGetEventsRequest request) {
        return this.rawClient.events(invoiceId, request).thenApply(response -> response.body());
    }

    /**
     * Get all events for an invoice
     */
    public CompletableFuture<InvoiceEventsResponse> events(
            String invoiceId, InvoiceInvoiceGetEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.events(invoiceId, request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncLineItemClient lineItem() {
        return this.lineItemClient.get();
    }

    public AsyncApprovalClient approval() {
        return this.approvalClient.get();
    }

    public AsyncBnplClient bnpl() {
        return this.bnplClient.get();
    }

    public AsyncBulkClient bulk() {
        return this.bulkClient.get();
    }

    public AsyncCollectionClient collection() {
        return this.collectionClient.get();
    }

    public AsyncCommentClient comment() {
        return this.commentClient.get();
    }

    public AsyncDocumentClient document() {
        return this.documentClient.get();
    }

    public AsyncPaymentLinksClient paymentLinks() {
        return this.paymentLinksClient.get();
    }
}
