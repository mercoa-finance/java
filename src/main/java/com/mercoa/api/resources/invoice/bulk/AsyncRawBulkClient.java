/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.invoice.bulk;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.BulkDownloadResponse;
import com.mercoa.api.resources.invoice.bulk.requests.BulkInvoiceApprovalRequest;
import com.mercoa.api.resources.invoice.bulk.requests.BulkInvoiceCreationRequest;
import com.mercoa.api.resources.invoice.bulk.requests.BulkInvoiceUpdateRequest;
import com.mercoa.api.resources.invoice.bulk.requests.DownloadBulkInvoicesRequest;
import com.mercoa.api.resources.invoicetypes.types.BulkInvoiceApprovalResponse;
import com.mercoa.api.resources.invoicetypes.types.BulkInvoiceCreationResponse;
import com.mercoa.api.resources.invoicetypes.types.BulkInvoiceUpdateResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawBulkClient {
    protected final ClientOptions clientOptions;

    public AsyncRawBulkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Create multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were created or failed to create.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceCreationResponse>> create(
            BulkInvoiceCreationRequest request) {
        return create(request, null);
    }

    /**
     * Create multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were created or failed to create.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceCreationResponse>> create(
            BulkInvoiceCreationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoices");
        if (request.getEmitWebhooks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "emitWebhooks", request.getEmitWebhooks().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkInvoiceCreationResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkInvoiceCreationResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Update multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were updated or failed to update.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceUpdateResponse>> update(BulkInvoiceUpdateRequest request) {
        return update(request, null);
    }

    /**
     * Update multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were updated or failed to update.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceUpdateResponse>> update(
            BulkInvoiceUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoices");
        if (request.getEmitWebhooks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "emitWebhooks", request.getEmitWebhooks().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkInvoiceUpdateResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkInvoiceUpdateResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Approve multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were approved or failed to approve.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceApprovalResponse>> approve(
            BulkInvoiceApprovalRequest request) {
        return approve(request, null);
    }

    /**
     * Approve multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were approved or failed to approve.
     */
    public CompletableFuture<MercoaHttpResponse<BulkInvoiceApprovalResponse>> approve(
            BulkInvoiceApprovalRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoices/approve");
        if (request.getEmitWebhooks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "emitWebhooks", request.getEmitWebhooks().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkInvoiceApprovalResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkInvoiceApprovalResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get a URL to download a bulk invoice as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download() {
        return download(DownloadBulkInvoicesRequest.builder().build());
    }

    /**
     * Get a URL to download a bulk invoice as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download(DownloadBulkInvoicesRequest request) {
        return download(request, null);
    }

    /**
     * Get a URL to download a bulk invoice as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download(
            DownloadBulkInvoicesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("invoices/download");
        if (request.getFormat().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "format", request.getFormat().get(), false);
        }
        if (request.getEntityGroupId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityGroupId", request.getEntityGroupId().get(), false);
        }
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get(), false);
        }
        if (request.getDateType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "dateType", request.getDateType().get(), false);
        }
        if (request.getOrderBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderBy", request.getOrderBy().get(), false);
        }
        if (request.getOrderDirection().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "orderDirection", request.getOrderDirection().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getPaymentType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentType", request.getPaymentType().get(), false);
        }
        if (request.getReturnPayerMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "returnPayerMetadata",
                    request.getReturnPayerMetadata().get(),
                    false);
        }
        if (request.getReturnVendorMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "returnVendorMetadata",
                    request.getReturnVendorMetadata().get(),
                    false);
        }
        if (request.getEntityId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityId", request.getEntityId().get(), true);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get(), true);
        }
        if (request.getLineItemMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "lineItemMetadata", request.getLineItemMetadata().get(), true);
        }
        if (request.getLineItemGlAccountId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lineItemGlAccountId",
                    request.getLineItemGlAccountId().get(),
                    true);
        }
        if (request.getPayerId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "payerId", request.getPayerId().get(), true);
        }
        if (request.getVendorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "vendorId", request.getVendorId().get(), true);
        }
        if (request.getCreatorUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "creatorUserId", request.getCreatorUserId().get(), true);
        }
        if (request.getApproverId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverId", request.getApproverId().get(), true);
        }
        if (request.getApproverAction().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "approverAction", request.getApproverAction().get(), true);
        }
        if (request.getInvoiceId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceId", request.getInvoiceId().get(), true);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), true);
        }
        if (request.getInvoiceTemplateId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceTemplateId", request.getInvoiceTemplateId().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkDownloadResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
