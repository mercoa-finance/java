/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessPaymentGatewayFailedResponse.Builder.class)
public final class ProcessPaymentGatewayFailedResponse {
    private final String jobId;

    private final PaymentGatewayError errorType;

    private final Optional<String> errorMessage;

    private final Map<String, Object> additionalProperties;

    private ProcessPaymentGatewayFailedResponse(
            String jobId,
            PaymentGatewayError errorType,
            Optional<String> errorMessage,
            Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.errorType = errorType;
        this.errorMessage = errorMessage;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The job ID of the payment gateway processing job
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return The error that occurred during the payment gateway processing job
     */
    @JsonProperty("errorType")
    public PaymentGatewayError getErrorType() {
        return errorType;
    }

    /**
     * @return The error message that occurred during the payment gateway processing job
     */
    @JsonProperty("errorMessage")
    public Optional<String> getErrorMessage() {
        return errorMessage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessPaymentGatewayFailedResponse
                && equalTo((ProcessPaymentGatewayFailedResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessPaymentGatewayFailedResponse other) {
        return jobId.equals(other.jobId)
                && errorType.equals(other.errorType)
                && errorMessage.equals(other.errorMessage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.jobId, this.errorType, this.errorMessage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        ErrorTypeStage jobId(@NotNull String jobId);

        Builder from(ProcessPaymentGatewayFailedResponse other);
    }

    public interface ErrorTypeStage {
        _FinalStage errorType(@NotNull PaymentGatewayError errorType);
    }

    public interface _FinalStage {
        ProcessPaymentGatewayFailedResponse build();

        _FinalStage errorMessage(Optional<String> errorMessage);

        _FinalStage errorMessage(String errorMessage);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, ErrorTypeStage, _FinalStage {
        private String jobId;

        private PaymentGatewayError errorType;

        private Optional<String> errorMessage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessPaymentGatewayFailedResponse other) {
            jobId(other.getJobId());
            errorType(other.getErrorType());
            errorMessage(other.getErrorMessage());
            return this;
        }

        /**
         * <p>The job ID of the payment gateway processing job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public ErrorTypeStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>The error that occurred during the payment gateway processing job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("errorType")
        public _FinalStage errorType(@NotNull PaymentGatewayError errorType) {
            this.errorType = Objects.requireNonNull(errorType, "errorType must not be null");
            return this;
        }

        /**
         * <p>The error message that occurred during the payment gateway processing job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage errorMessage(String errorMessage) {
            this.errorMessage = Optional.ofNullable(errorMessage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "errorMessage", nulls = Nulls.SKIP)
        public _FinalStage errorMessage(Optional<String> errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }

        @java.lang.Override
        public ProcessPaymentGatewayFailedResponse build() {
            return new ProcessPaymentGatewayFailedResponse(jobId, errorType, errorMessage, additionalProperties);
        }
    }
}
