/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentGatewayAttempt.Builder.class)
public final class PaymentGatewayAttempt {
    private final String id;

    private final PaymentGatewayJobStatus status;

    private final Optional<Double> amount;

    private final Optional<String> receiptUrl;

    private final OffsetDateTime createdAt;

    private final Map<String, Object> additionalProperties;

    private PaymentGatewayAttempt(
            String id,
            PaymentGatewayJobStatus status,
            Optional<Double> amount,
            Optional<String> receiptUrl,
            OffsetDateTime createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.amount = amount;
        this.receiptUrl = receiptUrl;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for the payment gateway attempt
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The status of the attempt
     */
    @JsonProperty("status")
    public PaymentGatewayJobStatus getStatus() {
        return status;
    }

    /**
     * @return The amount processed in this attempt
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return The URL of the receipt for this attempt
     */
    @JsonProperty("receiptUrl")
    public Optional<String> getReceiptUrl() {
        return receiptUrl;
    }

    /**
     * @return The timestamp when the attempt was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentGatewayAttempt && equalTo((PaymentGatewayAttempt) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentGatewayAttempt other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && amount.equals(other.amount)
                && receiptUrl.equals(other.receiptUrl)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.status, this.amount, this.receiptUrl, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for the payment gateway attempt</p>
         */
        StatusStage id(@NotNull String id);

        Builder from(PaymentGatewayAttempt other);
    }

    public interface StatusStage {
        /**
         * <p>The status of the attempt</p>
         */
        CreatedAtStage status(@NotNull PaymentGatewayJobStatus status);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the attempt was created</p>
         */
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        PaymentGatewayAttempt build();

        /**
         * <p>The amount processed in this attempt</p>
         */
        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);

        /**
         * <p>The URL of the receipt for this attempt</p>
         */
        _FinalStage receiptUrl(Optional<String> receiptUrl);

        _FinalStage receiptUrl(String receiptUrl);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, StatusStage, CreatedAtStage, _FinalStage {
        private String id;

        private PaymentGatewayJobStatus status;

        private OffsetDateTime createdAt;

        private Optional<String> receiptUrl = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentGatewayAttempt other) {
            id(other.getId());
            status(other.getStatus());
            amount(other.getAmount());
            receiptUrl(other.getReceiptUrl());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The unique identifier for the payment gateway attempt</p>
         * <p>The unique identifier for the payment gateway attempt</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The status of the attempt</p>
         * <p>The status of the attempt</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(@NotNull PaymentGatewayJobStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the attempt was created</p>
         * <p>The timestamp when the attempt was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The URL of the receipt for this attempt</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage receiptUrl(String receiptUrl) {
            this.receiptUrl = Optional.ofNullable(receiptUrl);
            return this;
        }

        /**
         * <p>The URL of the receipt for this attempt</p>
         */
        @java.lang.Override
        @JsonSetter(value = "receiptUrl", nulls = Nulls.SKIP)
        public _FinalStage receiptUrl(Optional<String> receiptUrl) {
            this.receiptUrl = receiptUrl;
            return this;
        }

        /**
         * <p>The amount processed in this attempt</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>The amount processed in this attempt</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public PaymentGatewayAttempt build() {
            return new PaymentGatewayAttempt(id, status, amount, receiptUrl, createdAt, additionalProperties);
        }
    }
}
