/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ProcessPaymentGatewayCardDetails {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ProcessPaymentGatewayCardDetails(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ProcessPaymentGatewayCardDetails direct(ProcessPaymentGatewayCardDetailsDirect value) {
        return new ProcessPaymentGatewayCardDetails(new DirectValue(value));
    }

    public static ProcessPaymentGatewayCardDetails iframe(ProcessPaymentGatewayCardDetailsIframe value) {
        return new ProcessPaymentGatewayCardDetails(new IframeValue(value));
    }

    public static ProcessPaymentGatewayCardDetails stripeIssuing(ProcessPaymentGatewayCardDetailsStripeIssuing value) {
        return new ProcessPaymentGatewayCardDetails(new StripeIssuingValue(value));
    }

    public static ProcessPaymentGatewayCardDetails lithic(ProcessPaymentGatewayCardDetailsLithic value) {
        return new ProcessPaymentGatewayCardDetails(new LithicValue(value));
    }

    public boolean isDirect() {
        return value instanceof DirectValue;
    }

    public boolean isIframe() {
        return value instanceof IframeValue;
    }

    public boolean isStripeIssuing() {
        return value instanceof StripeIssuingValue;
    }

    public boolean isLithic() {
        return value instanceof LithicValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ProcessPaymentGatewayCardDetailsDirect> getDirect() {
        if (isDirect()) {
            return Optional.of(((DirectValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ProcessPaymentGatewayCardDetailsIframe> getIframe() {
        if (isIframe()) {
            return Optional.of(((IframeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ProcessPaymentGatewayCardDetailsStripeIssuing> getStripeIssuing() {
        if (isStripeIssuing()) {
            return Optional.of(((StripeIssuingValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ProcessPaymentGatewayCardDetailsLithic> getLithic() {
        if (isLithic()) {
            return Optional.of(((LithicValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitDirect(ProcessPaymentGatewayCardDetailsDirect direct);

        T visitIframe(ProcessPaymentGatewayCardDetailsIframe iframe);

        T visitStripeIssuing(ProcessPaymentGatewayCardDetailsStripeIssuing stripeIssuing);

        T visitLithic(ProcessPaymentGatewayCardDetailsLithic lithic);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(DirectValue.class),
        @JsonSubTypes.Type(IframeValue.class),
        @JsonSubTypes.Type(StripeIssuingValue.class),
        @JsonSubTypes.Type(LithicValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("direct")
    @JsonIgnoreProperties("type")
    private static final class DirectValue implements Value {
        @JsonUnwrapped
        private ProcessPaymentGatewayCardDetailsDirect value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DirectValue() {}

        private DirectValue(ProcessPaymentGatewayCardDetailsDirect value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDirect(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DirectValue && equalTo((DirectValue) other);
        }

        private boolean equalTo(DirectValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessPaymentGatewayCardDetails{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("iframe")
    @JsonIgnoreProperties("type")
    private static final class IframeValue implements Value {
        @JsonUnwrapped
        private ProcessPaymentGatewayCardDetailsIframe value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private IframeValue() {}

        private IframeValue(ProcessPaymentGatewayCardDetailsIframe value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitIframe(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof IframeValue && equalTo((IframeValue) other);
        }

        private boolean equalTo(IframeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessPaymentGatewayCardDetails{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("stripeIssuing")
    @JsonIgnoreProperties("type")
    private static final class StripeIssuingValue implements Value {
        @JsonUnwrapped
        private ProcessPaymentGatewayCardDetailsStripeIssuing value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private StripeIssuingValue() {}

        private StripeIssuingValue(ProcessPaymentGatewayCardDetailsStripeIssuing value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitStripeIssuing(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof StripeIssuingValue && equalTo((StripeIssuingValue) other);
        }

        private boolean equalTo(StripeIssuingValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessPaymentGatewayCardDetails{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("lithic")
    @JsonIgnoreProperties("type")
    private static final class LithicValue implements Value {
        @JsonUnwrapped
        private ProcessPaymentGatewayCardDetailsLithic value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private LithicValue() {}

        private LithicValue(ProcessPaymentGatewayCardDetailsLithic value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitLithic(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof LithicValue && equalTo((LithicValue) other);
        }

        private boolean equalTo(LithicValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessPaymentGatewayCardDetails{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessPaymentGatewayCardDetails{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
