/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessCardEtlRequest.Builder.class)
public final class ProcessCardEtlRequest {
    private final Optional<PaymentMethodType> type;

    private final Optional<String> document;

    private final Optional<Integer> batchSize;

    private final Map<String, Object> additionalProperties;

    private ProcessCardEtlRequest(
            Optional<PaymentMethodType> type,
            Optional<String> document,
            Optional<Integer> batchSize,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.document = document;
        this.batchSize = batchSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of payment destination
     */
    @JsonProperty("type")
    public Optional<PaymentMethodType> getType() {
        return type;
    }

    /**
     * @return The invoice document to extract the payment gateway from in base64 format
     */
    @JsonProperty("document")
    public Optional<String> getDocument() {
        return document;
    }

    /**
     * @return The number of invoices to process in the batch
     */
    @JsonProperty("batchSize")
    public Optional<Integer> getBatchSize() {
        return batchSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessCardEtlRequest && equalTo((ProcessCardEtlRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessCardEtlRequest other) {
        return type.equals(other.type) && document.equals(other.document) && batchSize.equals(other.batchSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.document, this.batchSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PaymentMethodType> type = Optional.empty();

        private Optional<String> document = Optional.empty();

        private Optional<Integer> batchSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProcessCardEtlRequest other) {
            type(other.getType());
            document(other.getDocument());
            batchSize(other.getBatchSize());
            return this;
        }

        /**
         * <p>The type of payment destination</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<PaymentMethodType> type) {
            this.type = type;
            return this;
        }

        public Builder type(PaymentMethodType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The invoice document to extract the payment gateway from in base64 format</p>
         */
        @JsonSetter(value = "document", nulls = Nulls.SKIP)
        public Builder document(Optional<String> document) {
            this.document = document;
            return this;
        }

        public Builder document(String document) {
            this.document = Optional.ofNullable(document);
            return this;
        }

        /**
         * <p>The number of invoices to process in the batch</p>
         */
        @JsonSetter(value = "batchSize", nulls = Nulls.SKIP)
        public Builder batchSize(Optional<Integer> batchSize) {
            this.batchSize = batchSize;
            return this;
        }

        public Builder batchSize(Integer batchSize) {
            this.batchSize = Optional.ofNullable(batchSize);
            return this;
        }

        public ProcessCardEtlRequest build() {
            return new ProcessCardEtlRequest(type, document, batchSize, additionalProperties);
        }
    }
}
