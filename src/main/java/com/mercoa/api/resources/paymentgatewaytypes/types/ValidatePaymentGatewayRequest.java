/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ValidatePaymentGatewayRequest {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ValidatePaymentGatewayRequest(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ValidatePaymentGatewayRequest document(ValidatePaymentGatewayRequestDocument value) {
        return new ValidatePaymentGatewayRequest(new DocumentValue(value));
    }

    public static ValidatePaymentGatewayRequest html(ValidatePaymentGatewayRequestHtml value) {
        return new ValidatePaymentGatewayRequest(new HtmlValue(value));
    }

    public boolean isDocument() {
        return value instanceof DocumentValue;
    }

    public boolean isHtml() {
        return value instanceof HtmlValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ValidatePaymentGatewayRequestDocument> getDocument() {
        if (isDocument()) {
            return Optional.of(((DocumentValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ValidatePaymentGatewayRequestHtml> getHtml() {
        if (isHtml()) {
            return Optional.of(((HtmlValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitDocument(ValidatePaymentGatewayRequestDocument document);

        T visitHtml(ValidatePaymentGatewayRequestHtml html);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({@JsonSubTypes.Type(DocumentValue.class), @JsonSubTypes.Type(HtmlValue.class)})
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("document")
    @JsonIgnoreProperties("type")
    private static final class DocumentValue implements Value {
        @JsonUnwrapped
        private ValidatePaymentGatewayRequestDocument value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DocumentValue() {}

        private DocumentValue(ValidatePaymentGatewayRequestDocument value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDocument(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DocumentValue && equalTo((DocumentValue) other);
        }

        private boolean equalTo(DocumentValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ValidatePaymentGatewayRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("html")
    @JsonIgnoreProperties("type")
    private static final class HtmlValue implements Value {
        @JsonUnwrapped
        private ValidatePaymentGatewayRequestHtml value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HtmlValue() {}

        private HtmlValue(ValidatePaymentGatewayRequestHtml value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHtml(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HtmlValue && equalTo((HtmlValue) other);
        }

        private boolean equalTo(HtmlValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ValidatePaymentGatewayRequest{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ValidatePaymentGatewayRequest{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
