/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ValidatePaymentGatewayCardResponse.Builder.class)
public final class ValidatePaymentGatewayCardResponse {
    private final ValidatePaymentGatewayCardAcceptance eligibility;

    private final ValidatePaymentGatewayCardFee fee;

    private final Map<String, Object> additionalProperties;

    private ValidatePaymentGatewayCardResponse(
            ValidatePaymentGatewayCardAcceptance eligibility,
            ValidatePaymentGatewayCardFee fee,
            Map<String, Object> additionalProperties) {
        this.eligibility = eligibility;
        this.fee = fee;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether the payment gateway accepts card payments
     */
    @JsonProperty("eligibility")
    public ValidatePaymentGatewayCardAcceptance getEligibility() {
        return eligibility;
    }

    /**
     * @return The fee that was extracted from the gateway
     */
    @JsonProperty("fee")
    public ValidatePaymentGatewayCardFee getFee() {
        return fee;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValidatePaymentGatewayCardResponse
                && equalTo((ValidatePaymentGatewayCardResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValidatePaymentGatewayCardResponse other) {
        return eligibility.equals(other.eligibility) && fee.equals(other.fee);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eligibility, this.fee);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EligibilityStage builder() {
        return new Builder();
    }

    public interface EligibilityStage {
        /**
         * <p>Whether the payment gateway accepts card payments</p>
         */
        FeeStage eligibility(@NotNull ValidatePaymentGatewayCardAcceptance eligibility);

        Builder from(ValidatePaymentGatewayCardResponse other);
    }

    public interface FeeStage {
        /**
         * <p>The fee that was extracted from the gateway</p>
         */
        _FinalStage fee(@NotNull ValidatePaymentGatewayCardFee fee);
    }

    public interface _FinalStage {
        ValidatePaymentGatewayCardResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EligibilityStage, FeeStage, _FinalStage {
        private ValidatePaymentGatewayCardAcceptance eligibility;

        private ValidatePaymentGatewayCardFee fee;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ValidatePaymentGatewayCardResponse other) {
            eligibility(other.getEligibility());
            fee(other.getFee());
            return this;
        }

        /**
         * <p>Whether the payment gateway accepts card payments</p>
         * <p>Whether the payment gateway accepts card payments</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eligibility")
        public FeeStage eligibility(@NotNull ValidatePaymentGatewayCardAcceptance eligibility) {
            this.eligibility = Objects.requireNonNull(eligibility, "eligibility must not be null");
            return this;
        }

        /**
         * <p>The fee that was extracted from the gateway</p>
         * <p>The fee that was extracted from the gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fee")
        public _FinalStage fee(@NotNull ValidatePaymentGatewayCardFee fee) {
            this.fee = Objects.requireNonNull(fee, "fee must not be null");
            return this;
        }

        @java.lang.Override
        public ValidatePaymentGatewayCardResponse build() {
            return new ValidatePaymentGatewayCardResponse(eligibility, fee, additionalProperties);
        }
    }
}
