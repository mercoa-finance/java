/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EphemeralKeyEndpoint.Builder.class)
public final class EphemeralKeyEndpoint {
    private final String url;

    private final String method;

    private final Map<String, String> headers;

    private final Optional<String> postBody;

    private final Map<String, Object> additionalProperties;

    private EphemeralKeyEndpoint(
            String url,
            String method,
            Map<String, String> headers,
            Optional<String> postBody,
            Map<String, Object> additionalProperties) {
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.postBody = postBody;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The URL endpoint to call for generating ephemeral keys
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return The HTTP method to use for the request
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    /**
     * @return The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
     */
    @JsonProperty("headers")
    public Map<String, String> getHeaders() {
        return headers;
    }

    /**
     * @return The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
     */
    @JsonProperty("postBody")
    public Optional<String> getPostBody() {
        return postBody;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EphemeralKeyEndpoint && equalTo((EphemeralKeyEndpoint) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EphemeralKeyEndpoint other) {
        return url.equals(other.url)
                && method.equals(other.method)
                && headers.equals(other.headers)
                && postBody.equals(other.postBody);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.url, this.method, this.headers, this.postBody);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UrlStage builder() {
        return new Builder();
    }

    public interface UrlStage {
        /**
         * <p>The URL endpoint to call for generating ephemeral keys</p>
         */
        MethodStage url(@NotNull String url);

        Builder from(EphemeralKeyEndpoint other);
    }

    public interface MethodStage {
        /**
         * <p>The HTTP method to use for the request</p>
         */
        _FinalStage method(@NotNull String method);
    }

    public interface _FinalStage {
        EphemeralKeyEndpoint build();

        /**
         * <p>The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         */
        _FinalStage headers(Map<String, String> headers);

        _FinalStage putAllHeaders(Map<String, String> headers);

        _FinalStage headers(String key, String value);

        /**
         * <p>The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         */
        _FinalStage postBody(Optional<String> postBody);

        _FinalStage postBody(String postBody);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UrlStage, MethodStage, _FinalStage {
        private String url;

        private String method;

        private Optional<String> postBody = Optional.empty();

        private Map<String, String> headers = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EphemeralKeyEndpoint other) {
            url(other.getUrl());
            method(other.getMethod());
            headers(other.getHeaders());
            postBody(other.getPostBody());
            return this;
        }

        /**
         * <p>The URL endpoint to call for generating ephemeral keys</p>
         * <p>The URL endpoint to call for generating ephemeral keys</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public MethodStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>The HTTP method to use for the request</p>
         * <p>The HTTP method to use for the request</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        /**
         * <p>The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage postBody(String postBody) {
            this.postBody = Optional.ofNullable(postBody);
            return this;
        }

        /**
         * <p>The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "postBody", nulls = Nulls.SKIP)
        public _FinalStage postBody(Optional<String> postBody) {
            this.postBody = postBody;
            return this;
        }

        /**
         * <p>The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage headers(String key, String value) {
            this.headers.put(key, value);
            return this;
        }

        /**
         * <p>The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllHeaders(Map<String, String> headers) {
            if (headers != null) {
                this.headers.putAll(headers);
            }
            return this;
        }

        /**
         * <p>The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "headers", nulls = Nulls.SKIP)
        public _FinalStage headers(Map<String, String> headers) {
            this.headers.clear();
            this.headers.putAll(headers);
            return this;
        }

        @java.lang.Override
        public EphemeralKeyEndpoint build() {
            return new EphemeralKeyEndpoint(url, method, headers, postBody, additionalProperties);
        }
    }
}
