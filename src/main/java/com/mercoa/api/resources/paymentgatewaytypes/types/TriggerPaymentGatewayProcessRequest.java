/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TriggerPaymentGatewayProcessRequest.Builder.class)
public final class TriggerPaymentGatewayProcessRequest {
    private final String jobId;

    private final Optional<Boolean> manual;

    private final Map<String, Object> additionalProperties;

    private TriggerPaymentGatewayProcessRequest(
            String jobId, Optional<Boolean> manual, Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.manual = manual;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the payment gateway process job to trigger
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return If true, run the job in manual mode - just navigate to the card form and render success/fail buttons without populating card details
     */
    @JsonProperty("manual")
    public Optional<Boolean> getManual() {
        return manual;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TriggerPaymentGatewayProcessRequest
                && equalTo((TriggerPaymentGatewayProcessRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TriggerPaymentGatewayProcessRequest other) {
        return jobId.equals(other.jobId) && manual.equals(other.manual);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.jobId, this.manual);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        /**
         * <p>The ID of the payment gateway process job to trigger</p>
         */
        _FinalStage jobId(@NotNull String jobId);

        Builder from(TriggerPaymentGatewayProcessRequest other);
    }

    public interface _FinalStage {
        TriggerPaymentGatewayProcessRequest build();

        /**
         * <p>If true, run the job in manual mode - just navigate to the card form and render success/fail buttons without populating card details</p>
         */
        _FinalStage manual(Optional<Boolean> manual);

        _FinalStage manual(Boolean manual);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, _FinalStage {
        private String jobId;

        private Optional<Boolean> manual = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TriggerPaymentGatewayProcessRequest other) {
            jobId(other.getJobId());
            manual(other.getManual());
            return this;
        }

        /**
         * <p>The ID of the payment gateway process job to trigger</p>
         * <p>The ID of the payment gateway process job to trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public _FinalStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>If true, run the job in manual mode - just navigate to the card form and render success/fail buttons without populating card details</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage manual(Boolean manual) {
            this.manual = Optional.ofNullable(manual);
            return this;
        }

        /**
         * <p>If true, run the job in manual mode - just navigate to the card form and render success/fail buttons without populating card details</p>
         */
        @java.lang.Override
        @JsonSetter(value = "manual", nulls = Nulls.SKIP)
        public _FinalStage manual(Optional<Boolean> manual) {
            this.manual = manual;
            return this;
        }

        @java.lang.Override
        public TriggerPaymentGatewayProcessRequest build() {
            return new TriggerPaymentGatewayProcessRequest(jobId, manual, additionalProperties);
        }
    }
}
