/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.CountryCode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessPaymentGatewayCardDetailsDirect.Builder.class)
public final class ProcessPaymentGatewayCardDetailsDirect {
    private final String nameOnCard;

    private final String cardNumber;

    private final int expirationMonth;

    private final int expirationYear;

    private final String cvv;

    private final String postalCode;

    private final CountryCode country;

    private final Map<String, Object> additionalProperties;

    private ProcessPaymentGatewayCardDetailsDirect(
            String nameOnCard,
            String cardNumber,
            int expirationMonth,
            int expirationYear,
            String cvv,
            String postalCode,
            CountryCode country,
            Map<String, Object> additionalProperties) {
        this.nameOnCard = nameOnCard;
        this.cardNumber = cardNumber;
        this.expirationMonth = expirationMonth;
        this.expirationYear = expirationYear;
        this.cvv = cvv;
        this.postalCode = postalCode;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name on the card to use for the payment
     */
    @JsonProperty("nameOnCard")
    public String getNameOnCard() {
        return nameOnCard;
    }

    /**
     * @return The number of the card to use for the payment
     */
    @JsonProperty("cardNumber")
    public String getCardNumber() {
        return cardNumber;
    }

    /**
     * @return The month of the expiration date of the card to use for the payment. This must be a number between 1 and 12.
     */
    @JsonProperty("expirationMonth")
    public int getExpirationMonth() {
        return expirationMonth;
    }

    /**
     * @return The year of the expiration date of the card to use for the payment. This must be the full year, not the last two digits.
     */
    @JsonProperty("expirationYear")
    public int getExpirationYear() {
        return expirationYear;
    }

    /**
     * @return The CVV of the card to use for the payment
     */
    @JsonProperty("cvv")
    public String getCvv() {
        return cvv;
    }

    /**
     * @return The postal code of the address of the card to use for the payment
     */
    @JsonProperty("postalCode")
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * @return The country of the address of the card to use for the payment
     */
    @JsonProperty("country")
    public CountryCode getCountry() {
        return country;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessPaymentGatewayCardDetailsDirect
                && equalTo((ProcessPaymentGatewayCardDetailsDirect) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessPaymentGatewayCardDetailsDirect other) {
        return nameOnCard.equals(other.nameOnCard)
                && cardNumber.equals(other.cardNumber)
                && expirationMonth == other.expirationMonth
                && expirationYear == other.expirationYear
                && cvv.equals(other.cvv)
                && postalCode.equals(other.postalCode)
                && country.equals(other.country);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.nameOnCard,
                this.cardNumber,
                this.expirationMonth,
                this.expirationYear,
                this.cvv,
                this.postalCode,
                this.country);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameOnCardStage builder() {
        return new Builder();
    }

    public interface NameOnCardStage {
        CardNumberStage nameOnCard(@NotNull String nameOnCard);

        Builder from(ProcessPaymentGatewayCardDetailsDirect other);
    }

    public interface CardNumberStage {
        ExpirationMonthStage cardNumber(@NotNull String cardNumber);
    }

    public interface ExpirationMonthStage {
        ExpirationYearStage expirationMonth(int expirationMonth);
    }

    public interface ExpirationYearStage {
        CvvStage expirationYear(int expirationYear);
    }

    public interface CvvStage {
        PostalCodeStage cvv(@NotNull String cvv);
    }

    public interface PostalCodeStage {
        CountryStage postalCode(@NotNull String postalCode);
    }

    public interface CountryStage {
        _FinalStage country(@NotNull CountryCode country);
    }

    public interface _FinalStage {
        ProcessPaymentGatewayCardDetailsDirect build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameOnCardStage,
                    CardNumberStage,
                    ExpirationMonthStage,
                    ExpirationYearStage,
                    CvvStage,
                    PostalCodeStage,
                    CountryStage,
                    _FinalStage {
        private String nameOnCard;

        private String cardNumber;

        private int expirationMonth;

        private int expirationYear;

        private String cvv;

        private String postalCode;

        private CountryCode country;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessPaymentGatewayCardDetailsDirect other) {
            nameOnCard(other.getNameOnCard());
            cardNumber(other.getCardNumber());
            expirationMonth(other.getExpirationMonth());
            expirationYear(other.getExpirationYear());
            cvv(other.getCvv());
            postalCode(other.getPostalCode());
            country(other.getCountry());
            return this;
        }

        /**
         * <p>The name on the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("nameOnCard")
        public CardNumberStage nameOnCard(@NotNull String nameOnCard) {
            this.nameOnCard = Objects.requireNonNull(nameOnCard, "nameOnCard must not be null");
            return this;
        }

        /**
         * <p>The number of the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cardNumber")
        public ExpirationMonthStage cardNumber(@NotNull String cardNumber) {
            this.cardNumber = Objects.requireNonNull(cardNumber, "cardNumber must not be null");
            return this;
        }

        /**
         * <p>The month of the expiration date of the card to use for the payment. This must be a number between 1 and 12.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expirationMonth")
        public ExpirationYearStage expirationMonth(int expirationMonth) {
            this.expirationMonth = expirationMonth;
            return this;
        }

        /**
         * <p>The year of the expiration date of the card to use for the payment. This must be the full year, not the last two digits.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expirationYear")
        public CvvStage expirationYear(int expirationYear) {
            this.expirationYear = expirationYear;
            return this;
        }

        /**
         * <p>The CVV of the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cvv")
        public PostalCodeStage cvv(@NotNull String cvv) {
            this.cvv = Objects.requireNonNull(cvv, "cvv must not be null");
            return this;
        }

        /**
         * <p>The postal code of the address of the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("postalCode")
        public CountryStage postalCode(@NotNull String postalCode) {
            this.postalCode = Objects.requireNonNull(postalCode, "postalCode must not be null");
            return this;
        }

        /**
         * <p>The country of the address of the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("country")
        public _FinalStage country(@NotNull CountryCode country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        @java.lang.Override
        public ProcessPaymentGatewayCardDetailsDirect build() {
            return new ProcessPaymentGatewayCardDetailsDirect(
                    nameOnCard,
                    cardNumber,
                    expirationMonth,
                    expirationYear,
                    cvv,
                    postalCode,
                    country,
                    additionalProperties);
        }
    }
}
