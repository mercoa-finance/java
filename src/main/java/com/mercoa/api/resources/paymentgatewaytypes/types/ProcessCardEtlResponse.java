/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessCardEtlResponse.Builder.class)
public final class ProcessCardEtlResponse {
    private final String invoiceId;

    private final boolean hasPaymentLink;

    private final boolean hasRoutingAndAccountNumber;

    private final Map<String, Object> additionalProperties;

    private ProcessCardEtlResponse(
            String invoiceId,
            boolean hasPaymentLink,
            boolean hasRoutingAndAccountNumber,
            Map<String, Object> additionalProperties) {
        this.invoiceId = invoiceId;
        this.hasPaymentLink = hasPaymentLink;
        this.hasRoutingAndAccountNumber = hasRoutingAndAccountNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the invoice
     */
    @JsonProperty("invoiceId")
    public String getInvoiceId() {
        return invoiceId;
    }

    /**
     * @return Whether the invoice has a payment link
     */
    @JsonProperty("hasPaymentLink")
    public boolean getHasPaymentLink() {
        return hasPaymentLink;
    }

    /**
     * @return Whether the invoice has a routing and account number
     */
    @JsonProperty("hasRoutingAndAccountNumber")
    public boolean getHasRoutingAndAccountNumber() {
        return hasRoutingAndAccountNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessCardEtlResponse && equalTo((ProcessCardEtlResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessCardEtlResponse other) {
        return invoiceId.equals(other.invoiceId)
                && hasPaymentLink == other.hasPaymentLink
                && hasRoutingAndAccountNumber == other.hasRoutingAndAccountNumber;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.invoiceId, this.hasPaymentLink, this.hasRoutingAndAccountNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceIdStage builder() {
        return new Builder();
    }

    public interface InvoiceIdStage {
        /**
         * <p>The ID of the invoice</p>
         */
        HasPaymentLinkStage invoiceId(@NotNull String invoiceId);

        Builder from(ProcessCardEtlResponse other);
    }

    public interface HasPaymentLinkStage {
        /**
         * <p>Whether the invoice has a payment link</p>
         */
        HasRoutingAndAccountNumberStage hasPaymentLink(boolean hasPaymentLink);
    }

    public interface HasRoutingAndAccountNumberStage {
        /**
         * <p>Whether the invoice has a routing and account number</p>
         */
        _FinalStage hasRoutingAndAccountNumber(boolean hasRoutingAndAccountNumber);
    }

    public interface _FinalStage {
        ProcessCardEtlResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements InvoiceIdStage, HasPaymentLinkStage, HasRoutingAndAccountNumberStage, _FinalStage {
        private String invoiceId;

        private boolean hasPaymentLink;

        private boolean hasRoutingAndAccountNumber;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessCardEtlResponse other) {
            invoiceId(other.getInvoiceId());
            hasPaymentLink(other.getHasPaymentLink());
            hasRoutingAndAccountNumber(other.getHasRoutingAndAccountNumber());
            return this;
        }

        /**
         * <p>The ID of the invoice</p>
         * <p>The ID of the invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceId")
        public HasPaymentLinkStage invoiceId(@NotNull String invoiceId) {
            this.invoiceId = Objects.requireNonNull(invoiceId, "invoiceId must not be null");
            return this;
        }

        /**
         * <p>Whether the invoice has a payment link</p>
         * <p>Whether the invoice has a payment link</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasPaymentLink")
        public HasRoutingAndAccountNumberStage hasPaymentLink(boolean hasPaymentLink) {
            this.hasPaymentLink = hasPaymentLink;
            return this;
        }

        /**
         * <p>Whether the invoice has a routing and account number</p>
         * <p>Whether the invoice has a routing and account number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasRoutingAndAccountNumber")
        public _FinalStage hasRoutingAndAccountNumber(boolean hasRoutingAndAccountNumber) {
            this.hasRoutingAndAccountNumber = hasRoutingAndAccountNumber;
            return this;
        }

        @java.lang.Override
        public ProcessCardEtlResponse build() {
            return new ProcessCardEtlResponse(
                    invoiceId, hasPaymentLink, hasRoutingAndAccountNumber, additionalProperties);
        }
    }
}
