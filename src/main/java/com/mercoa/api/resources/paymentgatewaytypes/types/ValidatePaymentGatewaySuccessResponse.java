/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ValidatePaymentGatewaySuccessResponse.Builder.class)
public final class ValidatePaymentGatewaySuccessResponse {
    private final String jobId;

    private final Optional<String> paymentGatewayUrl;

    private final Optional<ValidatePaymentGatewayCardResponse> card;

    private final Optional<Double> invoiceAmount;

    private final Optional<Double> gatewayAmount;

    private final Optional<String> vendorName;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ValidatePaymentGatewaySuccessResponse(
            String jobId,
            Optional<String> paymentGatewayUrl,
            Optional<ValidatePaymentGatewayCardResponse> card,
            Optional<Double> invoiceAmount,
            Optional<Double> gatewayAmount,
            Optional<String> vendorName,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.paymentGatewayUrl = paymentGatewayUrl;
        this.card = card;
        this.invoiceAmount = invoiceAmount;
        this.gatewayAmount = gatewayAmount;
        this.vendorName = vendorName;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The job ID of the payment gateway validation job
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return The payment gateway URL that was found in the document
     */
    @JsonProperty("paymentGatewayUrl")
    public Optional<String> getPaymentGatewayUrl() {
        return paymentGatewayUrl;
    }

    /**
     * @return Data on the card payments that were extracted from the gateway
     */
    @JsonProperty("card")
    public Optional<ValidatePaymentGatewayCardResponse> getCard() {
        return card;
    }

    /**
     * @return The invoice amount detected from the payment gateway
     */
    @JsonProperty("invoiceAmount")
    public Optional<Double> getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     * @return The amount displayed on the payment gateway (may include fees)
     */
    @JsonProperty("gatewayAmount")
    public Optional<Double> getGatewayAmount() {
        return gatewayAmount;
    }

    /**
     * @return The vendor name detected from the payment gateway
     */
    @JsonProperty("vendorName")
    public Optional<String> getVendorName() {
        return vendorName;
    }

    /**
     * @return The timestamp when the job was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the job was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValidatePaymentGatewaySuccessResponse
                && equalTo((ValidatePaymentGatewaySuccessResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValidatePaymentGatewaySuccessResponse other) {
        return jobId.equals(other.jobId)
                && paymentGatewayUrl.equals(other.paymentGatewayUrl)
                && card.equals(other.card)
                && invoiceAmount.equals(other.invoiceAmount)
                && gatewayAmount.equals(other.gatewayAmount)
                && vendorName.equals(other.vendorName)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.jobId,
                this.paymentGatewayUrl,
                this.card,
                this.invoiceAmount,
                this.gatewayAmount,
                this.vendorName,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        /**
         * <p>The job ID of the payment gateway validation job</p>
         */
        CreatedAtStage jobId(@NotNull String jobId);

        Builder from(ValidatePaymentGatewaySuccessResponse other);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the job was created</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>The timestamp when the job was last updated</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ValidatePaymentGatewaySuccessResponse build();

        /**
         * <p>The payment gateway URL that was found in the document</p>
         */
        _FinalStage paymentGatewayUrl(Optional<String> paymentGatewayUrl);

        _FinalStage paymentGatewayUrl(String paymentGatewayUrl);

        /**
         * <p>Data on the card payments that were extracted from the gateway</p>
         */
        _FinalStage card(Optional<ValidatePaymentGatewayCardResponse> card);

        _FinalStage card(ValidatePaymentGatewayCardResponse card);

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         */
        _FinalStage invoiceAmount(Optional<Double> invoiceAmount);

        _FinalStage invoiceAmount(Double invoiceAmount);

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         */
        _FinalStage gatewayAmount(Optional<Double> gatewayAmount);

        _FinalStage gatewayAmount(Double gatewayAmount);

        /**
         * <p>The vendor name detected from the payment gateway</p>
         */
        _FinalStage vendorName(Optional<String> vendorName);

        _FinalStage vendorName(String vendorName);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String jobId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<String> vendorName = Optional.empty();

        private Optional<Double> gatewayAmount = Optional.empty();

        private Optional<Double> invoiceAmount = Optional.empty();

        private Optional<ValidatePaymentGatewayCardResponse> card = Optional.empty();

        private Optional<String> paymentGatewayUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ValidatePaymentGatewaySuccessResponse other) {
            jobId(other.getJobId());
            paymentGatewayUrl(other.getPaymentGatewayUrl());
            card(other.getCard());
            invoiceAmount(other.getInvoiceAmount());
            gatewayAmount(other.getGatewayAmount());
            vendorName(other.getVendorName());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The job ID of the payment gateway validation job</p>
         * <p>The job ID of the payment gateway validation job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public CreatedAtStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the job was created</p>
         * <p>The timestamp when the job was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the job was last updated</p>
         * <p>The timestamp when the job was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>The vendor name detected from the payment gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage vendorName(String vendorName) {
            this.vendorName = Optional.ofNullable(vendorName);
            return this;
        }

        /**
         * <p>The vendor name detected from the payment gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "vendorName", nulls = Nulls.SKIP)
        public _FinalStage vendorName(Optional<String> vendorName) {
            this.vendorName = vendorName;
            return this;
        }

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage gatewayAmount(Double gatewayAmount) {
            this.gatewayAmount = Optional.ofNullable(gatewayAmount);
            return this;
        }

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gatewayAmount", nulls = Nulls.SKIP)
        public _FinalStage gatewayAmount(Optional<Double> gatewayAmount) {
            this.gatewayAmount = gatewayAmount;
            return this;
        }

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceAmount(Double invoiceAmount) {
            this.invoiceAmount = Optional.ofNullable(invoiceAmount);
            return this;
        }

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceAmount", nulls = Nulls.SKIP)
        public _FinalStage invoiceAmount(Optional<Double> invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        /**
         * <p>Data on the card payments that were extracted from the gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage card(ValidatePaymentGatewayCardResponse card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        /**
         * <p>Data on the card payments that were extracted from the gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public _FinalStage card(Optional<ValidatePaymentGatewayCardResponse> card) {
            this.card = card;
            return this;
        }

        /**
         * <p>The payment gateway URL that was found in the document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentGatewayUrl(String paymentGatewayUrl) {
            this.paymentGatewayUrl = Optional.ofNullable(paymentGatewayUrl);
            return this;
        }

        /**
         * <p>The payment gateway URL that was found in the document</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paymentGatewayUrl", nulls = Nulls.SKIP)
        public _FinalStage paymentGatewayUrl(Optional<String> paymentGatewayUrl) {
            this.paymentGatewayUrl = paymentGatewayUrl;
            return this;
        }

        @java.lang.Override
        public ValidatePaymentGatewaySuccessResponse build() {
            return new ValidatePaymentGatewaySuccessResponse(
                    jobId,
                    paymentGatewayUrl,
                    card,
                    invoiceAmount,
                    gatewayAmount,
                    vendorName,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
