/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessPaymentGatewayRequestHtml.Builder.class)
public final class ProcessPaymentGatewayRequestHtml {
    private final String html;

    private final ProcessPaymentGatewayCardDetails cardDetails;

    private final Map<String, Object> additionalProperties;

    private ProcessPaymentGatewayRequestHtml(
            String html, ProcessPaymentGatewayCardDetails cardDetails, Map<String, Object> additionalProperties) {
        this.html = html;
        this.cardDetails = cardDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The HTML from an email to extract the payment gateway from
     */
    @JsonProperty("html")
    public String getHtml() {
        return html;
    }

    /**
     * @return The details of the card to use for the payment
     */
    @JsonProperty("cardDetails")
    public ProcessPaymentGatewayCardDetails getCardDetails() {
        return cardDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessPaymentGatewayRequestHtml && equalTo((ProcessPaymentGatewayRequestHtml) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessPaymentGatewayRequestHtml other) {
        return html.equals(other.html) && cardDetails.equals(other.cardDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.html, this.cardDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static HtmlStage builder() {
        return new Builder();
    }

    public interface HtmlStage {
        /**
         * <p>The HTML from an email to extract the payment gateway from</p>
         */
        CardDetailsStage html(@NotNull String html);

        Builder from(ProcessPaymentGatewayRequestHtml other);
    }

    public interface CardDetailsStage {
        /**
         * <p>The details of the card to use for the payment</p>
         */
        _FinalStage cardDetails(@NotNull ProcessPaymentGatewayCardDetails cardDetails);
    }

    public interface _FinalStage {
        ProcessPaymentGatewayRequestHtml build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements HtmlStage, CardDetailsStage, _FinalStage {
        private String html;

        private ProcessPaymentGatewayCardDetails cardDetails;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessPaymentGatewayRequestHtml other) {
            html(other.getHtml());
            cardDetails(other.getCardDetails());
            return this;
        }

        /**
         * <p>The HTML from an email to extract the payment gateway from</p>
         * <p>The HTML from an email to extract the payment gateway from</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("html")
        public CardDetailsStage html(@NotNull String html) {
            this.html = Objects.requireNonNull(html, "html must not be null");
            return this;
        }

        /**
         * <p>The details of the card to use for the payment</p>
         * <p>The details of the card to use for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cardDetails")
        public _FinalStage cardDetails(@NotNull ProcessPaymentGatewayCardDetails cardDetails) {
            this.cardDetails = Objects.requireNonNull(cardDetails, "cardDetails must not be null");
            return this;
        }

        @java.lang.Override
        public ProcessPaymentGatewayRequestHtml build() {
            return new ProcessPaymentGatewayRequestHtml(html, cardDetails, additionalProperties);
        }
    }
}
