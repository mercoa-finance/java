/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgatewaytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessPaymentGatewaySuccessResponse.Builder.class)
public final class ProcessPaymentGatewaySuccessResponse {
    private final String jobId;

    private final Optional<String> receiptUrl;

    private final Optional<Double> invoiceAmount;

    private final Optional<Double> gatewayAmount;

    private final Optional<String> vendorName;

    private final List<PaymentGatewayAttempt> attempts;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ProcessPaymentGatewaySuccessResponse(
            String jobId,
            Optional<String> receiptUrl,
            Optional<Double> invoiceAmount,
            Optional<Double> gatewayAmount,
            Optional<String> vendorName,
            List<PaymentGatewayAttempt> attempts,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.receiptUrl = receiptUrl;
        this.invoiceAmount = invoiceAmount;
        this.gatewayAmount = gatewayAmount;
        this.vendorName = vendorName;
        this.attempts = attempts;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The job ID of the payment gateway processing job
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return The URL of the receipt that was downloaded from the payment gateway
     */
    @JsonProperty("receiptUrl")
    public Optional<String> getReceiptUrl() {
        return receiptUrl;
    }

    /**
     * @return The invoice amount detected from the payment gateway
     */
    @JsonProperty("invoiceAmount")
    public Optional<Double> getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     * @return The amount displayed on the payment gateway (may include fees)
     */
    @JsonProperty("gatewayAmount")
    public Optional<Double> getGatewayAmount() {
        return gatewayAmount;
    }

    /**
     * @return The vendor name detected from the payment gateway
     */
    @JsonProperty("vendorName")
    public Optional<String> getVendorName() {
        return vendorName;
    }

    /**
     * @return List of payment gateway attempts for this job
     */
    @JsonProperty("attempts")
    public List<PaymentGatewayAttempt> getAttempts() {
        return attempts;
    }

    /**
     * @return The timestamp when the job was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the job was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessPaymentGatewaySuccessResponse
                && equalTo((ProcessPaymentGatewaySuccessResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessPaymentGatewaySuccessResponse other) {
        return jobId.equals(other.jobId)
                && receiptUrl.equals(other.receiptUrl)
                && invoiceAmount.equals(other.invoiceAmount)
                && gatewayAmount.equals(other.gatewayAmount)
                && vendorName.equals(other.vendorName)
                && attempts.equals(other.attempts)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.jobId,
                this.receiptUrl,
                this.invoiceAmount,
                this.gatewayAmount,
                this.vendorName,
                this.attempts,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        /**
         * <p>The job ID of the payment gateway processing job</p>
         */
        CreatedAtStage jobId(@NotNull String jobId);

        Builder from(ProcessPaymentGatewaySuccessResponse other);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the job was created</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>The timestamp when the job was last updated</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ProcessPaymentGatewaySuccessResponse build();

        /**
         * <p>The URL of the receipt that was downloaded from the payment gateway</p>
         */
        _FinalStage receiptUrl(Optional<String> receiptUrl);

        _FinalStage receiptUrl(String receiptUrl);

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         */
        _FinalStage invoiceAmount(Optional<Double> invoiceAmount);

        _FinalStage invoiceAmount(Double invoiceAmount);

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         */
        _FinalStage gatewayAmount(Optional<Double> gatewayAmount);

        _FinalStage gatewayAmount(Double gatewayAmount);

        /**
         * <p>The vendor name detected from the payment gateway</p>
         */
        _FinalStage vendorName(Optional<String> vendorName);

        _FinalStage vendorName(String vendorName);

        /**
         * <p>List of payment gateway attempts for this job</p>
         */
        _FinalStage attempts(List<PaymentGatewayAttempt> attempts);

        _FinalStage addAttempts(PaymentGatewayAttempt attempts);

        _FinalStage addAllAttempts(List<PaymentGatewayAttempt> attempts);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String jobId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private List<PaymentGatewayAttempt> attempts = new ArrayList<>();

        private Optional<String> vendorName = Optional.empty();

        private Optional<Double> gatewayAmount = Optional.empty();

        private Optional<Double> invoiceAmount = Optional.empty();

        private Optional<String> receiptUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessPaymentGatewaySuccessResponse other) {
            jobId(other.getJobId());
            receiptUrl(other.getReceiptUrl());
            invoiceAmount(other.getInvoiceAmount());
            gatewayAmount(other.getGatewayAmount());
            vendorName(other.getVendorName());
            attempts(other.getAttempts());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The job ID of the payment gateway processing job</p>
         * <p>The job ID of the payment gateway processing job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public CreatedAtStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the job was created</p>
         * <p>The timestamp when the job was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the job was last updated</p>
         * <p>The timestamp when the job was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>List of payment gateway attempts for this job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAttempts(List<PaymentGatewayAttempt> attempts) {
            if (attempts != null) {
                this.attempts.addAll(attempts);
            }
            return this;
        }

        /**
         * <p>List of payment gateway attempts for this job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAttempts(PaymentGatewayAttempt attempts) {
            this.attempts.add(attempts);
            return this;
        }

        /**
         * <p>List of payment gateway attempts for this job</p>
         */
        @java.lang.Override
        @JsonSetter(value = "attempts", nulls = Nulls.SKIP)
        public _FinalStage attempts(List<PaymentGatewayAttempt> attempts) {
            this.attempts.clear();
            this.attempts.addAll(attempts);
            return this;
        }

        /**
         * <p>The vendor name detected from the payment gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage vendorName(String vendorName) {
            this.vendorName = Optional.ofNullable(vendorName);
            return this;
        }

        /**
         * <p>The vendor name detected from the payment gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "vendorName", nulls = Nulls.SKIP)
        public _FinalStage vendorName(Optional<String> vendorName) {
            this.vendorName = vendorName;
            return this;
        }

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage gatewayAmount(Double gatewayAmount) {
            this.gatewayAmount = Optional.ofNullable(gatewayAmount);
            return this;
        }

        /**
         * <p>The amount displayed on the payment gateway (may include fees)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gatewayAmount", nulls = Nulls.SKIP)
        public _FinalStage gatewayAmount(Optional<Double> gatewayAmount) {
            this.gatewayAmount = gatewayAmount;
            return this;
        }

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceAmount(Double invoiceAmount) {
            this.invoiceAmount = Optional.ofNullable(invoiceAmount);
            return this;
        }

        /**
         * <p>The invoice amount detected from the payment gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceAmount", nulls = Nulls.SKIP)
        public _FinalStage invoiceAmount(Optional<Double> invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        /**
         * <p>The URL of the receipt that was downloaded from the payment gateway</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage receiptUrl(String receiptUrl) {
            this.receiptUrl = Optional.ofNullable(receiptUrl);
            return this;
        }

        /**
         * <p>The URL of the receipt that was downloaded from the payment gateway</p>
         */
        @java.lang.Override
        @JsonSetter(value = "receiptUrl", nulls = Nulls.SKIP)
        public _FinalStage receiptUrl(Optional<String> receiptUrl) {
            this.receiptUrl = receiptUrl;
            return this;
        }

        @java.lang.Override
        public ProcessPaymentGatewaySuccessResponse build() {
            return new ProcessPaymentGatewaySuccessResponse(
                    jobId,
                    receiptUrl,
                    invoiceAmount,
                    gatewayAmount,
                    vendorName,
                    attempts,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
