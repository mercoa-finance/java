/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.ocr;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.PubSubRequest;
import com.mercoa.api.resources.commons.types.PubSubResponse;
import com.mercoa.api.resources.ocr.types.CloudMailinRequest;
import com.mercoa.api.resources.ocr.types.OcrAsyncResponse;
import com.mercoa.api.resources.ocr.types.OcrJobResponse;
import com.mercoa.api.resources.ocr.types.OcrRequest;
import com.mercoa.api.resources.ocr.types.OcrResponse;

public class OcrClient {
    protected final ClientOptions clientOptions;

    private final RawOcrClient rawClient;

    public OcrClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawOcrClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawOcrClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Run OCR on an Base64 encoded image or PDF. This endpoint will block until the OCR is complete.
     */
    public OcrResponse ocr(OcrRequest request) {
        return this.rawClient.ocr(request).body();
    }

    /**
     * Run OCR on an Base64 encoded image or PDF. This endpoint will block until the OCR is complete.
     */
    public OcrResponse ocr(OcrRequest request, RequestOptions requestOptions) {
        return this.rawClient.ocr(request, requestOptions).body();
    }

    /**
     * Run OCR on an Base64 encoded image or PDF. This endpoint will return immediately and the OCR will be processed asynchronously.
     */
    public OcrAsyncResponse runAsyncOcr(OcrRequest request) {
        return this.rawClient.runAsyncOcr(request).body();
    }

    /**
     * Run OCR on an Base64 encoded image or PDF. This endpoint will return immediately and the OCR will be processed asynchronously.
     */
    public OcrAsyncResponse runAsyncOcr(OcrRequest request, RequestOptions requestOptions) {
        return this.rawClient.runAsyncOcr(request, requestOptions).body();
    }

    /**
     * Get the status and results of an asynchronous OCR job.
     */
    public OcrJobResponse getAsyncOcr(String jobId) {
        return this.rawClient.getAsyncOcr(jobId).body();
    }

    /**
     * Get the status and results of an asynchronous OCR job.
     */
    public OcrJobResponse getAsyncOcr(String jobId, RequestOptions requestOptions) {
        return this.rawClient.getAsyncOcr(jobId, requestOptions).body();
    }

    public void cloudMailinWebhook(CloudMailinRequest request) {
        this.rawClient.cloudMailinWebhook(request).body();
    }

    public void cloudMailinWebhook(CloudMailinRequest request, RequestOptions requestOptions) {
        this.rawClient.cloudMailinWebhook(request, requestOptions).body();
    }

    /**
     * Internal endpoint for processing async OCR jobs via Pub/Sub messages
     */
    public PubSubResponse processAsyncOcrInternal() {
        return this.rawClient.processAsyncOcrInternal().body();
    }

    /**
     * Internal endpoint for processing async OCR jobs via Pub/Sub messages
     */
    public PubSubResponse processAsyncOcrInternal(PubSubRequest request) {
        return this.rawClient.processAsyncOcrInternal(request).body();
    }

    /**
     * Internal endpoint for processing async OCR jobs via Pub/Sub messages
     */
    public PubSubResponse processAsyncOcrInternal(PubSubRequest request, RequestOptions requestOptions) {
        return this.rawClient.processAsyncOcrInternal(request, requestOptions).body();
    }
}
