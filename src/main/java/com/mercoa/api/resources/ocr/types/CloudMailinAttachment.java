/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.ocr.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CloudMailinAttachment.Builder.class)
public final class CloudMailinAttachment {
    private final Optional<String> content;

    private final Optional<String> url;

    private final Optional<String> fileName;

    private final Optional<String> contentType;

    private final Optional<Object> size;

    private final Optional<Object> disposition;

    private final Optional<Object> contentId;

    private final Map<String, Object> additionalProperties;

    private CloudMailinAttachment(
            Optional<String> content,
            Optional<String> url,
            Optional<String> fileName,
            Optional<String> contentType,
            Optional<Object> size,
            Optional<Object> disposition,
            Optional<Object> contentId,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.url = url;
        this.fileName = fileName;
        this.contentType = contentType;
        this.size = size;
        this.disposition = disposition;
        this.contentId = contentId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    @JsonProperty("file_name")
    public Optional<String> getFileName() {
        return fileName;
    }

    @JsonProperty("content_type")
    public Optional<String> getContentType() {
        return contentType;
    }

    @JsonProperty("size")
    public Optional<Object> getSize() {
        return size;
    }

    @JsonProperty("disposition")
    public Optional<Object> getDisposition() {
        return disposition;
    }

    @JsonProperty("content_id")
    public Optional<Object> getContentId() {
        return contentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CloudMailinAttachment && equalTo((CloudMailinAttachment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CloudMailinAttachment other) {
        return content.equals(other.content)
                && url.equals(other.url)
                && fileName.equals(other.fileName)
                && contentType.equals(other.contentType)
                && size.equals(other.size)
                && disposition.equals(other.disposition)
                && contentId.equals(other.contentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content, this.url, this.fileName, this.contentType, this.size, this.disposition, this.contentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> content = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<String> fileName = Optional.empty();

        private Optional<String> contentType = Optional.empty();

        private Optional<Object> size = Optional.empty();

        private Optional<Object> disposition = Optional.empty();

        private Optional<Object> contentId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CloudMailinAttachment other) {
            content(other.getContent());
            url(other.getUrl());
            fileName(other.getFileName());
            contentType(other.getContentType());
            size(other.getSize());
            disposition(other.getDisposition());
            contentId(other.getContentId());
            return this;
        }

        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @JsonSetter(value = "file_name", nulls = Nulls.SKIP)
        public Builder fileName(Optional<String> fileName) {
            this.fileName = fileName;
            return this;
        }

        public Builder fileName(String fileName) {
            this.fileName = Optional.ofNullable(fileName);
            return this;
        }

        @JsonSetter(value = "content_type", nulls = Nulls.SKIP)
        public Builder contentType(Optional<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            this.contentType = Optional.ofNullable(contentType);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Object> size) {
            this.size = size;
            return this;
        }

        public Builder size(Object size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        @JsonSetter(value = "disposition", nulls = Nulls.SKIP)
        public Builder disposition(Optional<Object> disposition) {
            this.disposition = disposition;
            return this;
        }

        public Builder disposition(Object disposition) {
            this.disposition = Optional.ofNullable(disposition);
            return this;
        }

        @JsonSetter(value = "content_id", nulls = Nulls.SKIP)
        public Builder contentId(Optional<Object> contentId) {
            this.contentId = contentId;
            return this;
        }

        public Builder contentId(Object contentId) {
            this.contentId = Optional.ofNullable(contentId);
            return this;
        }

        public CloudMailinAttachment build() {
            return new CloudMailinAttachment(
                    content, url, fileName, contentType, size, disposition, contentId, additionalProperties);
        }
    }
}
