/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.ocr.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OcrMailbox.Builder.class)
public final class OcrMailbox {
    private final String address;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private OcrMailbox(String address, Optional<String> name, Map<String, Object> additionalProperties) {
        this.address = address;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("Address")
    public String getAddress() {
        return address;
    }

    @JsonProperty("Name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OcrMailbox && equalTo((OcrMailbox) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OcrMailbox other) {
        return address.equals(other.address) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.address, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AddressStage builder() {
        return new Builder();
    }

    public interface AddressStage {
        _FinalStage address(@NotNull String address);

        Builder from(OcrMailbox other);
    }

    public interface _FinalStage {
        OcrMailbox build();

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AddressStage, _FinalStage {
        private String address;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OcrMailbox other) {
            address(other.getAddress());
            name(other.getName());
            return this;
        }

        @java.lang.Override
        @JsonSetter("Address")
        public _FinalStage address(@NotNull String address) {
            this.address = Objects.requireNonNull(address, "address must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "Name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public OcrMailbox build() {
            return new OcrMailbox(address, name, additionalProperties);
        }
    }
}
