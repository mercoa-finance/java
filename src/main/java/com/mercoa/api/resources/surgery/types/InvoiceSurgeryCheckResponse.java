/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.surgery.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceSurgeryCheckResponse.Builder.class)
public final class InvoiceSurgeryCheckResponse {
    private final boolean test;

    private final String checkId;

    private final String checkUrl;

    private final Map<String, Object> additionalProperties;

    private InvoiceSurgeryCheckResponse(
            boolean test, String checkId, String checkUrl, Map<String, Object> additionalProperties) {
        this.test = test;
        this.checkId = checkId;
        this.checkUrl = checkUrl;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("test")
    public boolean getTest() {
        return test;
    }

    @JsonProperty("checkId")
    public String getCheckId() {
        return checkId;
    }

    @JsonProperty("checkUrl")
    public String getCheckUrl() {
        return checkUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceSurgeryCheckResponse && equalTo((InvoiceSurgeryCheckResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceSurgeryCheckResponse other) {
        return test == other.test && checkId.equals(other.checkId) && checkUrl.equals(other.checkUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.test, this.checkId, this.checkUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TestStage builder() {
        return new Builder();
    }

    public interface TestStage {
        CheckIdStage test(boolean test);

        Builder from(InvoiceSurgeryCheckResponse other);
    }

    public interface CheckIdStage {
        CheckUrlStage checkId(@NotNull String checkId);
    }

    public interface CheckUrlStage {
        _FinalStage checkUrl(@NotNull String checkUrl);
    }

    public interface _FinalStage {
        InvoiceSurgeryCheckResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TestStage, CheckIdStage, CheckUrlStage, _FinalStage {
        private boolean test;

        private String checkId;

        private String checkUrl;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceSurgeryCheckResponse other) {
            test(other.getTest());
            checkId(other.getCheckId());
            checkUrl(other.getCheckUrl());
            return this;
        }

        @java.lang.Override
        @JsonSetter("test")
        public CheckIdStage test(boolean test) {
            this.test = test;
            return this;
        }

        @java.lang.Override
        @JsonSetter("checkId")
        public CheckUrlStage checkId(@NotNull String checkId) {
            this.checkId = Objects.requireNonNull(checkId, "checkId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("checkUrl")
        public _FinalStage checkUrl(@NotNull String checkUrl) {
            this.checkUrl = Objects.requireNonNull(checkUrl, "checkUrl must not be null");
            return this;
        }

        @java.lang.Override
        public InvoiceSurgeryCheckResponse build() {
            return new InvoiceSurgeryCheckResponse(test, checkId, checkUrl, additionalProperties);
        }
    }
}
