/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.surgery.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.transaction.types.TransactionFailureReason;
import com.mercoa.api.resources.transaction.types.TransactionStatus;
import com.mercoa.api.resources.transaction.types.TransactionType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionSurgeryRequest.Builder.class)
public final class TransactionSurgeryRequest {
    private final Optional<TransactionType> type;

    private final Optional<TransactionStatus> status;

    private final Optional<TransactionFailureReason> failureReason;

    private final Optional<Integer> checkNumber;

    private final Optional<String> payerId;

    private final Optional<String> vendorId;

    private final Optional<String> paymentSourceId;

    private final Optional<String> paymentDestinationId;

    private final Map<String, Object> additionalProperties;

    private TransactionSurgeryRequest(
            Optional<TransactionType> type,
            Optional<TransactionStatus> status,
            Optional<TransactionFailureReason> failureReason,
            Optional<Integer> checkNumber,
            Optional<String> payerId,
            Optional<String> vendorId,
            Optional<String> paymentSourceId,
            Optional<String> paymentDestinationId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.status = status;
        this.failureReason = failureReason;
        this.checkNumber = checkNumber;
        this.payerId = payerId;
        this.vendorId = vendorId;
        this.paymentSourceId = paymentSourceId;
        this.paymentDestinationId = paymentDestinationId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<TransactionType> getType() {
        return type;
    }

    @JsonProperty("status")
    public Optional<TransactionStatus> getStatus() {
        return status;
    }

    @JsonProperty("failureReason")
    public Optional<TransactionFailureReason> getFailureReason() {
        return failureReason;
    }

    @JsonProperty("checkNumber")
    public Optional<Integer> getCheckNumber() {
        return checkNumber;
    }

    @JsonProperty("payerId")
    public Optional<String> getPayerId() {
        return payerId;
    }

    @JsonProperty("vendorId")
    public Optional<String> getVendorId() {
        return vendorId;
    }

    @JsonProperty("paymentSourceId")
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    @JsonProperty("paymentDestinationId")
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionSurgeryRequest && equalTo((TransactionSurgeryRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionSurgeryRequest other) {
        return type.equals(other.type)
                && status.equals(other.status)
                && failureReason.equals(other.failureReason)
                && checkNumber.equals(other.checkNumber)
                && payerId.equals(other.payerId)
                && vendorId.equals(other.vendorId)
                && paymentSourceId.equals(other.paymentSourceId)
                && paymentDestinationId.equals(other.paymentDestinationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.status,
                this.failureReason,
                this.checkNumber,
                this.payerId,
                this.vendorId,
                this.paymentSourceId,
                this.paymentDestinationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransactionType> type = Optional.empty();

        private Optional<TransactionStatus> status = Optional.empty();

        private Optional<TransactionFailureReason> failureReason = Optional.empty();

        private Optional<Integer> checkNumber = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransactionSurgeryRequest other) {
            type(other.getType());
            status(other.getStatus());
            failureReason(other.getFailureReason());
            checkNumber(other.getCheckNumber());
            payerId(other.getPayerId());
            vendorId(other.getVendorId());
            paymentSourceId(other.getPaymentSourceId());
            paymentDestinationId(other.getPaymentDestinationId());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<TransactionType> type) {
            this.type = type;
            return this;
        }

        public Builder type(TransactionType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TransactionStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TransactionStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "failureReason", nulls = Nulls.SKIP)
        public Builder failureReason(Optional<TransactionFailureReason> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        public Builder failureReason(TransactionFailureReason failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        @JsonSetter(value = "checkNumber", nulls = Nulls.SKIP)
        public Builder checkNumber(Optional<Integer> checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        public Builder checkNumber(Integer checkNumber) {
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public Builder payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        public Builder payerId(String payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(String vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public Builder paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        public Builder paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.ofNullable(paymentSourceId);
            return this;
        }

        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public Builder paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        public Builder paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.ofNullable(paymentDestinationId);
            return this;
        }

        public TransactionSurgeryRequest build() {
            return new TransactionSurgeryRequest(
                    type,
                    status,
                    failureReason,
                    checkNumber,
                    payerId,
                    vendorId,
                    paymentSourceId,
                    paymentDestinationId,
                    additionalProperties);
        }
    }
}
