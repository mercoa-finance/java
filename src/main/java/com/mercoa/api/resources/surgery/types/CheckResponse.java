/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.surgery.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckResponse.Builder.class)
public final class CheckResponse {
    private final String id;

    private final String uri;

    private final Optional<String> checkeeperId;

    private final String bankAccountId;

    private final String invoiceId;

    private final int checkNumber;

    private final String status;

    private final String createdAt;

    private final String updatedAt;

    private final Map<String, Object> additionalProperties;

    private CheckResponse(
            String id,
            String uri,
            Optional<String> checkeeperId,
            String bankAccountId,
            String invoiceId,
            int checkNumber,
            String status,
            String createdAt,
            String updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.uri = uri;
        this.checkeeperId = checkeeperId;
        this.bankAccountId = bankAccountId;
        this.invoiceId = invoiceId;
        this.checkNumber = checkNumber;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("uri")
    public String getUri() {
        return uri;
    }

    @JsonProperty("checkeeperId")
    public Optional<String> getCheckeeperId() {
        return checkeeperId;
    }

    @JsonProperty("bankAccountId")
    public String getBankAccountId() {
        return bankAccountId;
    }

    @JsonProperty("invoiceId")
    public String getInvoiceId() {
        return invoiceId;
    }

    @JsonProperty("checkNumber")
    public int getCheckNumber() {
        return checkNumber;
    }

    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    @JsonProperty("createdAt")
    public String getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public String getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckResponse && equalTo((CheckResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckResponse other) {
        return id.equals(other.id)
                && uri.equals(other.uri)
                && checkeeperId.equals(other.checkeeperId)
                && bankAccountId.equals(other.bankAccountId)
                && invoiceId.equals(other.invoiceId)
                && checkNumber == other.checkNumber
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.uri,
                this.checkeeperId,
                this.bankAccountId,
                this.invoiceId,
                this.checkNumber,
                this.status,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UriStage id(@NotNull String id);

        Builder from(CheckResponse other);
    }

    public interface UriStage {
        BankAccountIdStage uri(@NotNull String uri);
    }

    public interface BankAccountIdStage {
        InvoiceIdStage bankAccountId(@NotNull String bankAccountId);
    }

    public interface InvoiceIdStage {
        CheckNumberStage invoiceId(@NotNull String invoiceId);
    }

    public interface CheckNumberStage {
        StatusStage checkNumber(int checkNumber);
    }

    public interface StatusStage {
        CreatedAtStage status(@NotNull String status);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull String createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull String updatedAt);
    }

    public interface _FinalStage {
        CheckResponse build();

        _FinalStage checkeeperId(Optional<String> checkeeperId);

        _FinalStage checkeeperId(String checkeeperId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    UriStage,
                    BankAccountIdStage,
                    InvoiceIdStage,
                    CheckNumberStage,
                    StatusStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String id;

        private String uri;

        private String bankAccountId;

        private String invoiceId;

        private int checkNumber;

        private String status;

        private String createdAt;

        private String updatedAt;

        private Optional<String> checkeeperId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CheckResponse other) {
            id(other.getId());
            uri(other.getUri());
            checkeeperId(other.getCheckeeperId());
            bankAccountId(other.getBankAccountId());
            invoiceId(other.getInvoiceId());
            checkNumber(other.getCheckNumber());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UriStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("uri")
        public BankAccountIdStage uri(@NotNull String uri) {
            this.uri = Objects.requireNonNull(uri, "uri must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("bankAccountId")
        public InvoiceIdStage bankAccountId(@NotNull String bankAccountId) {
            this.bankAccountId = Objects.requireNonNull(bankAccountId, "bankAccountId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceId")
        public CheckNumberStage invoiceId(@NotNull String invoiceId) {
            this.invoiceId = Objects.requireNonNull(invoiceId, "invoiceId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("checkNumber")
        public StatusStage checkNumber(int checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(@NotNull String status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage checkeeperId(String checkeeperId) {
            this.checkeeperId = Optional.ofNullable(checkeeperId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "checkeeperId", nulls = Nulls.SKIP)
        public _FinalStage checkeeperId(Optional<String> checkeeperId) {
            this.checkeeperId = checkeeperId;
            return this;
        }

        @java.lang.Override
        public CheckResponse build() {
            return new CheckResponse(
                    id,
                    uri,
                    checkeeperId,
                    bankAccountId,
                    invoiceId,
                    checkNumber,
                    status,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
