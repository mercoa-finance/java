/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.surgery.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.ApprovalSlotAssignmentWithAction;
import com.mercoa.api.resources.invoicetypes.types.InvoiceFailureType;
import com.mercoa.api.resources.invoicetypes.types.InvoiceLineItemUpdateRequest;
import com.mercoa.api.resources.invoicetypes.types.InvoiceStatus;
import com.mercoa.api.resources.invoicetypes.types.PaymentDestinationOptions;
import com.mercoa.api.resources.invoicetypes.types.PaymentSchedule;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceSurgeryRequest.Builder.class)
public final class InvoiceSurgeryRequest {
    private final Optional<String> foreignId;

    private final Optional<InvoiceStatus> status;

    private final Optional<Double> amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<OffsetDateTime> invoiceDate;

    private final Optional<OffsetDateTime> dueDate;

    private final Optional<OffsetDateTime> deductionDate;

    private final Optional<OffsetDateTime> settlementDate;

    private final Optional<String> invoiceNumber;

    private final Optional<String> noteToSelf;

    private final Optional<PaymentSchedule> paymentSchedule;

    private final Optional<OffsetDateTime> serviceStartDate;

    private final Optional<OffsetDateTime> serviceEndDate;

    private final Optional<String> payerId;

    private final Optional<String> vendorId;

    private final Optional<String> paymentSourceId;

    private final Optional<String> paymentDestinationId;

    private final Optional<Boolean> paymentDestinationConfirmed;

    private final Optional<PaymentDestinationOptions> paymentDestinationOptions;

    private final Optional<String> approvalPolicy;

    private final Optional<List<ApprovalSlotAssignmentWithAction>> approvers;

    private final Optional<Boolean> resetApprovalPolicy;

    private final Optional<List<InvoiceLineItemUpdateRequest>> lineItems;

    private final Optional<Map<String, String>> metadata;

    private final Optional<Double> sourcePaymentMethodFee;

    private final Optional<Double> sourcePlatformMarkupFee;

    private final Optional<Double> destinationPaymentMethodFee;

    private final Optional<Double> destinationPlatformMarkupFee;

    private final Optional<String> uploadedImage;

    private final Optional<String> creatorEntityId;

    private final Optional<String> creatorUserId;

    private final Optional<Boolean> batchPayment;

    private final Optional<InvoiceFailureType> failureType;

    private final Optional<Boolean> deleted;

    private final String actorEmail;

    private final Map<String, Object> additionalProperties;

    private InvoiceSurgeryRequest(
            Optional<String> foreignId,
            Optional<InvoiceStatus> status,
            Optional<Double> amount,
            Optional<CurrencyCode> currency,
            Optional<OffsetDateTime> invoiceDate,
            Optional<OffsetDateTime> dueDate,
            Optional<OffsetDateTime> deductionDate,
            Optional<OffsetDateTime> settlementDate,
            Optional<String> invoiceNumber,
            Optional<String> noteToSelf,
            Optional<PaymentSchedule> paymentSchedule,
            Optional<OffsetDateTime> serviceStartDate,
            Optional<OffsetDateTime> serviceEndDate,
            Optional<String> payerId,
            Optional<String> vendorId,
            Optional<String> paymentSourceId,
            Optional<String> paymentDestinationId,
            Optional<Boolean> paymentDestinationConfirmed,
            Optional<PaymentDestinationOptions> paymentDestinationOptions,
            Optional<String> approvalPolicy,
            Optional<List<ApprovalSlotAssignmentWithAction>> approvers,
            Optional<Boolean> resetApprovalPolicy,
            Optional<List<InvoiceLineItemUpdateRequest>> lineItems,
            Optional<Map<String, String>> metadata,
            Optional<Double> sourcePaymentMethodFee,
            Optional<Double> sourcePlatformMarkupFee,
            Optional<Double> destinationPaymentMethodFee,
            Optional<Double> destinationPlatformMarkupFee,
            Optional<String> uploadedImage,
            Optional<String> creatorEntityId,
            Optional<String> creatorUserId,
            Optional<Boolean> batchPayment,
            Optional<InvoiceFailureType> failureType,
            Optional<Boolean> deleted,
            String actorEmail,
            Map<String, Object> additionalProperties) {
        this.foreignId = foreignId;
        this.status = status;
        this.amount = amount;
        this.currency = currency;
        this.invoiceDate = invoiceDate;
        this.dueDate = dueDate;
        this.deductionDate = deductionDate;
        this.settlementDate = settlementDate;
        this.invoiceNumber = invoiceNumber;
        this.noteToSelf = noteToSelf;
        this.paymentSchedule = paymentSchedule;
        this.serviceStartDate = serviceStartDate;
        this.serviceEndDate = serviceEndDate;
        this.payerId = payerId;
        this.vendorId = vendorId;
        this.paymentSourceId = paymentSourceId;
        this.paymentDestinationId = paymentDestinationId;
        this.paymentDestinationConfirmed = paymentDestinationConfirmed;
        this.paymentDestinationOptions = paymentDestinationOptions;
        this.approvalPolicy = approvalPolicy;
        this.approvers = approvers;
        this.resetApprovalPolicy = resetApprovalPolicy;
        this.lineItems = lineItems;
        this.metadata = metadata;
        this.sourcePaymentMethodFee = sourcePaymentMethodFee;
        this.sourcePlatformMarkupFee = sourcePlatformMarkupFee;
        this.destinationPaymentMethodFee = destinationPaymentMethodFee;
        this.destinationPlatformMarkupFee = destinationPlatformMarkupFee;
        this.uploadedImage = uploadedImage;
        this.creatorEntityId = creatorEntityId;
        this.creatorUserId = creatorUserId;
        this.batchPayment = batchPayment;
        this.failureType = failureType;
        this.deleted = deleted;
        this.actorEmail = actorEmail;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    @JsonProperty("status")
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return Date the invoice was issued.
     */
    @JsonProperty("invoiceDate")
    public Optional<OffsetDateTime> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Due date of invoice.
     */
    @JsonProperty("dueDate")
    public Optional<OffsetDateTime> getDueDate() {
        return dueDate;
    }

    /**
     * @return Date when funds will be deducted from payer's account.
     */
    @JsonProperty("deductionDate")
    public Optional<OffsetDateTime> getDeductionDate() {
        return deductionDate;
    }

    /**
     * @return Date of funds settlement.
     */
    @JsonProperty("settlementDate")
    public Optional<OffsetDateTime> getSettlementDate() {
        return settlementDate;
    }

    @JsonProperty("invoiceNumber")
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Note to self or memo on invoice.
     */
    @JsonProperty("noteToSelf")
    public Optional<String> getNoteToSelf() {
        return noteToSelf;
    }

    @JsonProperty("paymentSchedule")
    public Optional<PaymentSchedule> getPaymentSchedule() {
        return paymentSchedule;
    }

    @JsonProperty("serviceStartDate")
    public Optional<OffsetDateTime> getServiceStartDate() {
        return serviceStartDate;
    }

    @JsonProperty("serviceEndDate")
    public Optional<OffsetDateTime> getServiceEndDate() {
        return serviceEndDate;
    }

    @JsonProperty("payerId")
    public Optional<String> getPayerId() {
        return payerId;
    }

    @JsonProperty("vendorId")
    public Optional<String> getVendorId() {
        return vendorId;
    }

    @JsonProperty("paymentSourceId")
    public Optional<String> getPaymentSourceId() {
        return paymentSourceId;
    }

    @JsonProperty("paymentDestinationId")
    public Optional<String> getPaymentDestinationId() {
        return paymentDestinationId;
    }

    @JsonProperty("paymentDestinationConfirmed")
    public Optional<Boolean> getPaymentDestinationConfirmed() {
        return paymentDestinationConfirmed;
    }

    @JsonProperty("paymentDestinationOptions")
    public Optional<PaymentDestinationOptions> getPaymentDestinationOptions() {
        return paymentDestinationOptions;
    }

    @JsonProperty("approvalPolicy")
    public Optional<String> getApprovalPolicy() {
        return approvalPolicy;
    }

    /**
     * @return Set approvers for this invoice.
     */
    @JsonProperty("approvers")
    public Optional<List<ApprovalSlotAssignmentWithAction>> getApprovers() {
        return approvers;
    }

    @JsonProperty("resetApprovalPolicy")
    public Optional<Boolean> getResetApprovalPolicy() {
        return resetApprovalPolicy;
    }

    @JsonProperty("lineItems")
    public Optional<List<InvoiceLineItemUpdateRequest>> getLineItems() {
        return lineItems;
    }

    /**
     * @return Metadata associated with this invoice. You can specify up to 10 keys, with key names up to 40 characters long and values up to 200 characters long.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    @JsonProperty("sourcePaymentMethodFee")
    public Optional<Double> getSourcePaymentMethodFee() {
        return sourcePaymentMethodFee;
    }

    @JsonProperty("sourcePlatformMarkupFee")
    public Optional<Double> getSourcePlatformMarkupFee() {
        return sourcePlatformMarkupFee;
    }

    @JsonProperty("destinationPaymentMethodFee")
    public Optional<Double> getDestinationPaymentMethodFee() {
        return destinationPaymentMethodFee;
    }

    @JsonProperty("destinationPlatformMarkupFee")
    public Optional<Double> getDestinationPlatformMarkupFee() {
        return destinationPlatformMarkupFee;
    }

    /**
     * @return Base64 encoded image or PDF of invoice. PNG, JPG, WEBP, and PDF are supported. 10MB max.
     */
    @JsonProperty("uploadedImage")
    public Optional<String> getUploadedImage() {
        return uploadedImage;
    }

    /**
     * @return ID of the entity who created this invoice.
     */
    @JsonProperty("creatorEntityId")
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    /**
     * @return ID of the entity user who created this invoice.
     */
    @JsonProperty("creatorUserId")
    public Optional<String> getCreatorUserId() {
        return creatorUserId;
    }

    /**
     * @return If true, this invoice will be paid as a batch payment. Only applicable for AP.
     */
    @JsonProperty("batchPayment")
    public Optional<Boolean> getBatchPayment() {
        return batchPayment;
    }

    /**
     * @return If the invoice failed to be paid, this field will be populated with the type of failure.
     */
    @JsonProperty("failureType")
    public Optional<InvoiceFailureType> getFailureType() {
        return failureType;
    }

    /**
     * @return If true, this invoice is marked as deleted.
     */
    @JsonProperty("deleted")
    public Optional<Boolean> getDeleted() {
        return deleted;
    }

    @JsonProperty("actorEmail")
    public String getActorEmail() {
        return actorEmail;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceSurgeryRequest && equalTo((InvoiceSurgeryRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceSurgeryRequest other) {
        return foreignId.equals(other.foreignId)
                && status.equals(other.status)
                && amount.equals(other.amount)
                && currency.equals(other.currency)
                && invoiceDate.equals(other.invoiceDate)
                && dueDate.equals(other.dueDate)
                && deductionDate.equals(other.deductionDate)
                && settlementDate.equals(other.settlementDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && noteToSelf.equals(other.noteToSelf)
                && paymentSchedule.equals(other.paymentSchedule)
                && serviceStartDate.equals(other.serviceStartDate)
                && serviceEndDate.equals(other.serviceEndDate)
                && payerId.equals(other.payerId)
                && vendorId.equals(other.vendorId)
                && paymentSourceId.equals(other.paymentSourceId)
                && paymentDestinationId.equals(other.paymentDestinationId)
                && paymentDestinationConfirmed.equals(other.paymentDestinationConfirmed)
                && paymentDestinationOptions.equals(other.paymentDestinationOptions)
                && approvalPolicy.equals(other.approvalPolicy)
                && approvers.equals(other.approvers)
                && resetApprovalPolicy.equals(other.resetApprovalPolicy)
                && lineItems.equals(other.lineItems)
                && metadata.equals(other.metadata)
                && sourcePaymentMethodFee.equals(other.sourcePaymentMethodFee)
                && sourcePlatformMarkupFee.equals(other.sourcePlatformMarkupFee)
                && destinationPaymentMethodFee.equals(other.destinationPaymentMethodFee)
                && destinationPlatformMarkupFee.equals(other.destinationPlatformMarkupFee)
                && uploadedImage.equals(other.uploadedImage)
                && creatorEntityId.equals(other.creatorEntityId)
                && creatorUserId.equals(other.creatorUserId)
                && batchPayment.equals(other.batchPayment)
                && failureType.equals(other.failureType)
                && deleted.equals(other.deleted)
                && actorEmail.equals(other.actorEmail);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.foreignId,
                this.status,
                this.amount,
                this.currency,
                this.invoiceDate,
                this.dueDate,
                this.deductionDate,
                this.settlementDate,
                this.invoiceNumber,
                this.noteToSelf,
                this.paymentSchedule,
                this.serviceStartDate,
                this.serviceEndDate,
                this.payerId,
                this.vendorId,
                this.paymentSourceId,
                this.paymentDestinationId,
                this.paymentDestinationConfirmed,
                this.paymentDestinationOptions,
                this.approvalPolicy,
                this.approvers,
                this.resetApprovalPolicy,
                this.lineItems,
                this.metadata,
                this.sourcePaymentMethodFee,
                this.sourcePlatformMarkupFee,
                this.destinationPaymentMethodFee,
                this.destinationPlatformMarkupFee,
                this.uploadedImage,
                this.creatorEntityId,
                this.creatorUserId,
                this.batchPayment,
                this.failureType,
                this.deleted,
                this.actorEmail);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ActorEmailStage builder() {
        return new Builder();
    }

    public interface ActorEmailStage {
        _FinalStage actorEmail(@NotNull String actorEmail);

        Builder from(InvoiceSurgeryRequest other);
    }

    public interface _FinalStage {
        InvoiceSurgeryRequest build();

        _FinalStage foreignId(Optional<String> foreignId);

        _FinalStage foreignId(String foreignId);

        _FinalStage status(Optional<InvoiceStatus> status);

        _FinalStage status(InvoiceStatus status);

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        /**
         * <p>Date the invoice was issued.</p>
         */
        _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate);

        _FinalStage invoiceDate(OffsetDateTime invoiceDate);

        /**
         * <p>Due date of invoice.</p>
         */
        _FinalStage dueDate(Optional<OffsetDateTime> dueDate);

        _FinalStage dueDate(OffsetDateTime dueDate);

        /**
         * <p>Date when funds will be deducted from payer's account.</p>
         */
        _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate);

        _FinalStage deductionDate(OffsetDateTime deductionDate);

        /**
         * <p>Date of funds settlement.</p>
         */
        _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate);

        _FinalStage settlementDate(OffsetDateTime settlementDate);

        _FinalStage invoiceNumber(Optional<String> invoiceNumber);

        _FinalStage invoiceNumber(String invoiceNumber);

        /**
         * <p>Note to self or memo on invoice.</p>
         */
        _FinalStage noteToSelf(Optional<String> noteToSelf);

        _FinalStage noteToSelf(String noteToSelf);

        _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule);

        _FinalStage paymentSchedule(PaymentSchedule paymentSchedule);

        _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate);

        _FinalStage serviceStartDate(OffsetDateTime serviceStartDate);

        _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate);

        _FinalStage serviceEndDate(OffsetDateTime serviceEndDate);

        _FinalStage payerId(Optional<String> payerId);

        _FinalStage payerId(String payerId);

        _FinalStage vendorId(Optional<String> vendorId);

        _FinalStage vendorId(String vendorId);

        _FinalStage paymentSourceId(Optional<String> paymentSourceId);

        _FinalStage paymentSourceId(String paymentSourceId);

        _FinalStage paymentDestinationId(Optional<String> paymentDestinationId);

        _FinalStage paymentDestinationId(String paymentDestinationId);

        _FinalStage paymentDestinationConfirmed(Optional<Boolean> paymentDestinationConfirmed);

        _FinalStage paymentDestinationConfirmed(Boolean paymentDestinationConfirmed);

        _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions);

        _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions);

        _FinalStage approvalPolicy(Optional<String> approvalPolicy);

        _FinalStage approvalPolicy(String approvalPolicy);

        /**
         * <p>Set approvers for this invoice.</p>
         */
        _FinalStage approvers(Optional<List<ApprovalSlotAssignmentWithAction>> approvers);

        _FinalStage approvers(List<ApprovalSlotAssignmentWithAction> approvers);

        _FinalStage resetApprovalPolicy(Optional<Boolean> resetApprovalPolicy);

        _FinalStage resetApprovalPolicy(Boolean resetApprovalPolicy);

        _FinalStage lineItems(Optional<List<InvoiceLineItemUpdateRequest>> lineItems);

        _FinalStage lineItems(List<InvoiceLineItemUpdateRequest> lineItems);

        /**
         * <p>Metadata associated with this invoice. You can specify up to 10 keys, with key names up to 40 characters long and values up to 200 characters long.</p>
         */
        _FinalStage metadata(Optional<Map<String, String>> metadata);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage sourcePaymentMethodFee(Optional<Double> sourcePaymentMethodFee);

        _FinalStage sourcePaymentMethodFee(Double sourcePaymentMethodFee);

        _FinalStage sourcePlatformMarkupFee(Optional<Double> sourcePlatformMarkupFee);

        _FinalStage sourcePlatformMarkupFee(Double sourcePlatformMarkupFee);

        _FinalStage destinationPaymentMethodFee(Optional<Double> destinationPaymentMethodFee);

        _FinalStage destinationPaymentMethodFee(Double destinationPaymentMethodFee);

        _FinalStage destinationPlatformMarkupFee(Optional<Double> destinationPlatformMarkupFee);

        _FinalStage destinationPlatformMarkupFee(Double destinationPlatformMarkupFee);

        /**
         * <p>Base64 encoded image or PDF of invoice. PNG, JPG, WEBP, and PDF are supported. 10MB max.</p>
         */
        _FinalStage uploadedImage(Optional<String> uploadedImage);

        _FinalStage uploadedImage(String uploadedImage);

        /**
         * <p>ID of the entity who created this invoice.</p>
         */
        _FinalStage creatorEntityId(Optional<String> creatorEntityId);

        _FinalStage creatorEntityId(String creatorEntityId);

        /**
         * <p>ID of the entity user who created this invoice.</p>
         */
        _FinalStage creatorUserId(Optional<String> creatorUserId);

        _FinalStage creatorUserId(String creatorUserId);

        /**
         * <p>If true, this invoice will be paid as a batch payment. Only applicable for AP.</p>
         */
        _FinalStage batchPayment(Optional<Boolean> batchPayment);

        _FinalStage batchPayment(Boolean batchPayment);

        /**
         * <p>If the invoice failed to be paid, this field will be populated with the type of failure.</p>
         */
        _FinalStage failureType(Optional<InvoiceFailureType> failureType);

        _FinalStage failureType(InvoiceFailureType failureType);

        /**
         * <p>If true, this invoice is marked as deleted.</p>
         */
        _FinalStage deleted(Optional<Boolean> deleted);

        _FinalStage deleted(Boolean deleted);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ActorEmailStage, _FinalStage {
        private String actorEmail;

        private Optional<Boolean> deleted = Optional.empty();

        private Optional<InvoiceFailureType> failureType = Optional.empty();

        private Optional<Boolean> batchPayment = Optional.empty();

        private Optional<String> creatorUserId = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Optional<String> uploadedImage = Optional.empty();

        private Optional<Double> destinationPlatformMarkupFee = Optional.empty();

        private Optional<Double> destinationPaymentMethodFee = Optional.empty();

        private Optional<Double> sourcePlatformMarkupFee = Optional.empty();

        private Optional<Double> sourcePaymentMethodFee = Optional.empty();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<List<InvoiceLineItemUpdateRequest>> lineItems = Optional.empty();

        private Optional<Boolean> resetApprovalPolicy = Optional.empty();

        private Optional<List<ApprovalSlotAssignmentWithAction>> approvers = Optional.empty();

        private Optional<String> approvalPolicy = Optional.empty();

        private Optional<PaymentDestinationOptions> paymentDestinationOptions = Optional.empty();

        private Optional<Boolean> paymentDestinationConfirmed = Optional.empty();

        private Optional<String> paymentDestinationId = Optional.empty();

        private Optional<String> paymentSourceId = Optional.empty();

        private Optional<String> vendorId = Optional.empty();

        private Optional<String> payerId = Optional.empty();

        private Optional<OffsetDateTime> serviceEndDate = Optional.empty();

        private Optional<OffsetDateTime> serviceStartDate = Optional.empty();

        private Optional<PaymentSchedule> paymentSchedule = Optional.empty();

        private Optional<String> noteToSelf = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<OffsetDateTime> settlementDate = Optional.empty();

        private Optional<OffsetDateTime> deductionDate = Optional.empty();

        private Optional<OffsetDateTime> dueDate = Optional.empty();

        private Optional<OffsetDateTime> invoiceDate = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<InvoiceStatus> status = Optional.empty();

        private Optional<String> foreignId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceSurgeryRequest other) {
            foreignId(other.getForeignId());
            status(other.getStatus());
            amount(other.getAmount());
            currency(other.getCurrency());
            invoiceDate(other.getInvoiceDate());
            dueDate(other.getDueDate());
            deductionDate(other.getDeductionDate());
            settlementDate(other.getSettlementDate());
            invoiceNumber(other.getInvoiceNumber());
            noteToSelf(other.getNoteToSelf());
            paymentSchedule(other.getPaymentSchedule());
            serviceStartDate(other.getServiceStartDate());
            serviceEndDate(other.getServiceEndDate());
            payerId(other.getPayerId());
            vendorId(other.getVendorId());
            paymentSourceId(other.getPaymentSourceId());
            paymentDestinationId(other.getPaymentDestinationId());
            paymentDestinationConfirmed(other.getPaymentDestinationConfirmed());
            paymentDestinationOptions(other.getPaymentDestinationOptions());
            approvalPolicy(other.getApprovalPolicy());
            approvers(other.getApprovers());
            resetApprovalPolicy(other.getResetApprovalPolicy());
            lineItems(other.getLineItems());
            metadata(other.getMetadata());
            sourcePaymentMethodFee(other.getSourcePaymentMethodFee());
            sourcePlatformMarkupFee(other.getSourcePlatformMarkupFee());
            destinationPaymentMethodFee(other.getDestinationPaymentMethodFee());
            destinationPlatformMarkupFee(other.getDestinationPlatformMarkupFee());
            uploadedImage(other.getUploadedImage());
            creatorEntityId(other.getCreatorEntityId());
            creatorUserId(other.getCreatorUserId());
            batchPayment(other.getBatchPayment());
            failureType(other.getFailureType());
            deleted(other.getDeleted());
            actorEmail(other.getActorEmail());
            return this;
        }

        @java.lang.Override
        @JsonSetter("actorEmail")
        public _FinalStage actorEmail(@NotNull String actorEmail) {
            this.actorEmail = Objects.requireNonNull(actorEmail, "actorEmail must not be null");
            return this;
        }

        /**
         * <p>If true, this invoice is marked as deleted.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deleted(Boolean deleted) {
            this.deleted = Optional.ofNullable(deleted);
            return this;
        }

        /**
         * <p>If true, this invoice is marked as deleted.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deleted", nulls = Nulls.SKIP)
        public _FinalStage deleted(Optional<Boolean> deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * <p>If the invoice failed to be paid, this field will be populated with the type of failure.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureType(InvoiceFailureType failureType) {
            this.failureType = Optional.ofNullable(failureType);
            return this;
        }

        /**
         * <p>If the invoice failed to be paid, this field will be populated with the type of failure.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureType", nulls = Nulls.SKIP)
        public _FinalStage failureType(Optional<InvoiceFailureType> failureType) {
            this.failureType = failureType;
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Only applicable for AP.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchPayment(Boolean batchPayment) {
            this.batchPayment = Optional.ofNullable(batchPayment);
            return this;
        }

        /**
         * <p>If true, this invoice will be paid as a batch payment. Only applicable for AP.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchPayment", nulls = Nulls.SKIP)
        public _FinalStage batchPayment(Optional<Boolean> batchPayment) {
            this.batchPayment = batchPayment;
            return this;
        }

        /**
         * <p>ID of the entity user who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorUserId(String creatorUserId) {
            this.creatorUserId = Optional.ofNullable(creatorUserId);
            return this;
        }

        /**
         * <p>ID of the entity user who created this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creatorUserId", nulls = Nulls.SKIP)
        public _FinalStage creatorUserId(Optional<String> creatorUserId) {
            this.creatorUserId = creatorUserId;
            return this;
        }

        /**
         * <p>ID of the entity who created this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        /**
         * <p>ID of the entity who created this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public _FinalStage creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        /**
         * <p>Base64 encoded image or PDF of invoice. PNG, JPG, WEBP, and PDF are supported. 10MB max.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uploadedImage(String uploadedImage) {
            this.uploadedImage = Optional.ofNullable(uploadedImage);
            return this;
        }

        /**
         * <p>Base64 encoded image or PDF of invoice. PNG, JPG, WEBP, and PDF are supported. 10MB max.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "uploadedImage", nulls = Nulls.SKIP)
        public _FinalStage uploadedImage(Optional<String> uploadedImage) {
            this.uploadedImage = uploadedImage;
            return this;
        }

        @java.lang.Override
        public _FinalStage destinationPlatformMarkupFee(Double destinationPlatformMarkupFee) {
            this.destinationPlatformMarkupFee = Optional.ofNullable(destinationPlatformMarkupFee);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationPlatformMarkupFee", nulls = Nulls.SKIP)
        public _FinalStage destinationPlatformMarkupFee(Optional<Double> destinationPlatformMarkupFee) {
            this.destinationPlatformMarkupFee = destinationPlatformMarkupFee;
            return this;
        }

        @java.lang.Override
        public _FinalStage destinationPaymentMethodFee(Double destinationPaymentMethodFee) {
            this.destinationPaymentMethodFee = Optional.ofNullable(destinationPaymentMethodFee);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationPaymentMethodFee", nulls = Nulls.SKIP)
        public _FinalStage destinationPaymentMethodFee(Optional<Double> destinationPaymentMethodFee) {
            this.destinationPaymentMethodFee = destinationPaymentMethodFee;
            return this;
        }

        @java.lang.Override
        public _FinalStage sourcePlatformMarkupFee(Double sourcePlatformMarkupFee) {
            this.sourcePlatformMarkupFee = Optional.ofNullable(sourcePlatformMarkupFee);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sourcePlatformMarkupFee", nulls = Nulls.SKIP)
        public _FinalStage sourcePlatformMarkupFee(Optional<Double> sourcePlatformMarkupFee) {
            this.sourcePlatformMarkupFee = sourcePlatformMarkupFee;
            return this;
        }

        @java.lang.Override
        public _FinalStage sourcePaymentMethodFee(Double sourcePaymentMethodFee) {
            this.sourcePaymentMethodFee = Optional.ofNullable(sourcePaymentMethodFee);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sourcePaymentMethodFee", nulls = Nulls.SKIP)
        public _FinalStage sourcePaymentMethodFee(Optional<Double> sourcePaymentMethodFee) {
            this.sourcePaymentMethodFee = sourcePaymentMethodFee;
            return this;
        }

        /**
         * <p>Metadata associated with this invoice. You can specify up to 10 keys, with key names up to 40 characters long and values up to 200 characters long.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Metadata associated with this invoice. You can specify up to 10 keys, with key names up to 40 characters long and values up to 200 characters long.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage lineItems(List<InvoiceLineItemUpdateRequest> lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public _FinalStage lineItems(Optional<List<InvoiceLineItemUpdateRequest>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        @java.lang.Override
        public _FinalStage resetApprovalPolicy(Boolean resetApprovalPolicy) {
            this.resetApprovalPolicy = Optional.ofNullable(resetApprovalPolicy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "resetApprovalPolicy", nulls = Nulls.SKIP)
        public _FinalStage resetApprovalPolicy(Optional<Boolean> resetApprovalPolicy) {
            this.resetApprovalPolicy = resetApprovalPolicy;
            return this;
        }

        /**
         * <p>Set approvers for this invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage approvers(List<ApprovalSlotAssignmentWithAction> approvers) {
            this.approvers = Optional.ofNullable(approvers);
            return this;
        }

        /**
         * <p>Set approvers for this invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "approvers", nulls = Nulls.SKIP)
        public _FinalStage approvers(Optional<List<ApprovalSlotAssignmentWithAction>> approvers) {
            this.approvers = approvers;
            return this;
        }

        @java.lang.Override
        public _FinalStage approvalPolicy(String approvalPolicy) {
            this.approvalPolicy = Optional.ofNullable(approvalPolicy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "approvalPolicy", nulls = Nulls.SKIP)
        public _FinalStage approvalPolicy(Optional<String> approvalPolicy) {
            this.approvalPolicy = approvalPolicy;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationOptions(PaymentDestinationOptions paymentDestinationOptions) {
            this.paymentDestinationOptions = Optional.ofNullable(paymentDestinationOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationOptions", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationOptions(Optional<PaymentDestinationOptions> paymentDestinationOptions) {
            this.paymentDestinationOptions = paymentDestinationOptions;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationConfirmed(Boolean paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = Optional.ofNullable(paymentDestinationConfirmed);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationConfirmed", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationConfirmed(Optional<Boolean> paymentDestinationConfirmed) {
            this.paymentDestinationConfirmed = paymentDestinationConfirmed;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentDestinationId(String paymentDestinationId) {
            this.paymentDestinationId = Optional.ofNullable(paymentDestinationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentDestinationId", nulls = Nulls.SKIP)
        public _FinalStage paymentDestinationId(Optional<String> paymentDestinationId) {
            this.paymentDestinationId = paymentDestinationId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSourceId(String paymentSourceId) {
            this.paymentSourceId = Optional.ofNullable(paymentSourceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSourceId", nulls = Nulls.SKIP)
        public _FinalStage paymentSourceId(Optional<String> paymentSourceId) {
            this.paymentSourceId = paymentSourceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorId(String vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<String> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        @java.lang.Override
        public _FinalStage payerId(String payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public _FinalStage payerId(Optional<String> payerId) {
            this.payerId = payerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceEndDate(OffsetDateTime serviceEndDate) {
            this.serviceEndDate = Optional.ofNullable(serviceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceEndDate", nulls = Nulls.SKIP)
        public _FinalStage serviceEndDate(Optional<OffsetDateTime> serviceEndDate) {
            this.serviceEndDate = serviceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage serviceStartDate(OffsetDateTime serviceStartDate) {
            this.serviceStartDate = Optional.ofNullable(serviceStartDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "serviceStartDate", nulls = Nulls.SKIP)
        public _FinalStage serviceStartDate(Optional<OffsetDateTime> serviceStartDate) {
            this.serviceStartDate = serviceStartDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentSchedule(PaymentSchedule paymentSchedule) {
            this.paymentSchedule = Optional.ofNullable(paymentSchedule);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentSchedule", nulls = Nulls.SKIP)
        public _FinalStage paymentSchedule(Optional<PaymentSchedule> paymentSchedule) {
            this.paymentSchedule = paymentSchedule;
            return this;
        }

        /**
         * <p>Note to self or memo on invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage noteToSelf(String noteToSelf) {
            this.noteToSelf = Optional.ofNullable(noteToSelf);
            return this;
        }

        /**
         * <p>Note to self or memo on invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "noteToSelf", nulls = Nulls.SKIP)
        public _FinalStage noteToSelf(Optional<String> noteToSelf) {
            this.noteToSelf = noteToSelf;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public _FinalStage invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * <p>Date of funds settlement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage settlementDate(OffsetDateTime settlementDate) {
            this.settlementDate = Optional.ofNullable(settlementDate);
            return this;
        }

        /**
         * <p>Date of funds settlement.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "settlementDate", nulls = Nulls.SKIP)
        public _FinalStage settlementDate(Optional<OffsetDateTime> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        /**
         * <p>Date when funds will be deducted from payer's account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deductionDate(OffsetDateTime deductionDate) {
            this.deductionDate = Optional.ofNullable(deductionDate);
            return this;
        }

        /**
         * <p>Date when funds will be deducted from payer's account.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deductionDate", nulls = Nulls.SKIP)
        public _FinalStage deductionDate(Optional<OffsetDateTime> deductionDate) {
            this.deductionDate = deductionDate;
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dueDate(OffsetDateTime dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * <p>Due date of invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public _FinalStage dueDate(Optional<OffsetDateTime> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDate(OffsetDateTime invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Date the invoice was issued.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<OffsetDateTime> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Total amount of invoice in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public _FinalStage status(InvoiceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage foreignId(String foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public _FinalStage foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        @java.lang.Override
        public InvoiceSurgeryRequest build() {
            return new InvoiceSurgeryRequest(
                    foreignId,
                    status,
                    amount,
                    currency,
                    invoiceDate,
                    dueDate,
                    deductionDate,
                    settlementDate,
                    invoiceNumber,
                    noteToSelf,
                    paymentSchedule,
                    serviceStartDate,
                    serviceEndDate,
                    payerId,
                    vendorId,
                    paymentSourceId,
                    paymentDestinationId,
                    paymentDestinationConfirmed,
                    paymentDestinationOptions,
                    approvalPolicy,
                    approvers,
                    resetApprovalPolicy,
                    lineItems,
                    metadata,
                    sourcePaymentMethodFee,
                    sourcePlatformMarkupFee,
                    destinationPaymentMethodFee,
                    destinationPlatformMarkupFee,
                    uploadedImage,
                    creatorEntityId,
                    creatorUserId,
                    batchPayment,
                    failureType,
                    deleted,
                    actorEmail,
                    additionalProperties);
        }
    }
}
