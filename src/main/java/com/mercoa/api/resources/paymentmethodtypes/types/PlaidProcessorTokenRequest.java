/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PlaidProcessorTokenRequest.Builder.class)
public final class PlaidProcessorTokenRequest {
    private final String processorToken;

    private final Map<String, Object> additionalProperties;

    private PlaidProcessorTokenRequest(String processorToken, Map<String, Object> additionalProperties) {
        this.processorToken = processorToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Plaid processor token for the account. If you already have a processor token for the account (for example, you have linked the account to your app already), use this instead of publicToken.
     */
    @JsonProperty("processorToken")
    public String getProcessorToken() {
        return processorToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PlaidProcessorTokenRequest && equalTo((PlaidProcessorTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PlaidProcessorTokenRequest other) {
        return processorToken.equals(other.processorToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.processorToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProcessorTokenStage builder() {
        return new Builder();
    }

    public interface ProcessorTokenStage {
        _FinalStage processorToken(String processorToken);

        Builder from(PlaidProcessorTokenRequest other);
    }

    public interface _FinalStage {
        PlaidProcessorTokenRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProcessorTokenStage, _FinalStage {
        private String processorToken;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PlaidProcessorTokenRequest other) {
            processorToken(other.getProcessorToken());
            return this;
        }

        /**
         * <p>Plaid processor token for the account. If you already have a processor token for the account (for example, you have linked the account to your app already), use this instead of publicToken.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorToken")
        public _FinalStage processorToken(String processorToken) {
            this.processorToken = processorToken;
            return this;
        }

        @java.lang.Override
        public PlaidProcessorTokenRequest build() {
            return new PlaidProcessorTokenRequest(processorToken, additionalProperties);
        }
    }
}
