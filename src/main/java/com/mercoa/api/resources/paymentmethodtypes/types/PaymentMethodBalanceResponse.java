/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PaymentMethodBalanceResponse.Builder.class)
public final class PaymentMethodBalanceResponse {
    private final double availableBalance;

    private final CurrencyCode currency;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodBalanceResponse(
            double availableBalance, CurrencyCode currency, Map<String, Object> additionalProperties) {
        this.availableBalance = availableBalance;
        this.currency = currency;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("availableBalance")
    public double getAvailableBalance() {
        return availableBalance;
    }

    @JsonProperty("currency")
    public CurrencyCode getCurrency() {
        return currency;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodBalanceResponse && equalTo((PaymentMethodBalanceResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodBalanceResponse other) {
        return availableBalance == other.availableBalance && currency.equals(other.currency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.availableBalance, this.currency);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AvailableBalanceStage builder() {
        return new Builder();
    }

    public interface AvailableBalanceStage {
        CurrencyStage availableBalance(double availableBalance);

        Builder from(PaymentMethodBalanceResponse other);
    }

    public interface CurrencyStage {
        _FinalStage currency(CurrencyCode currency);
    }

    public interface _FinalStage {
        PaymentMethodBalanceResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AvailableBalanceStage, CurrencyStage, _FinalStage {
        private double availableBalance;

        private CurrencyCode currency;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(PaymentMethodBalanceResponse other) {
            availableBalance(other.getAvailableBalance());
            currency(other.getCurrency());
            return this;
        }

        @Override
        @JsonSetter("availableBalance")
        public CurrencyStage availableBalance(double availableBalance) {
            this.availableBalance = availableBalance;
            return this;
        }

        @Override
        @JsonSetter("currency")
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = currency;
            return this;
        }

        @Override
        public PaymentMethodBalanceResponse build() {
            return new PaymentMethodBalanceResponse(availableBalance, currency, additionalProperties);
        }
    }
}
