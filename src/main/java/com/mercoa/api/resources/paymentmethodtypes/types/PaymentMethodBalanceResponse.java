/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentMethodBalanceResponse.Builder.class)
public final class PaymentMethodBalanceResponse {
    private final double availableBalance;

    private final CurrencyCode currency;

    private final PaymentMethodBalanceStatus status;

    private final Optional<OffsetDateTime> updatedAt;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodBalanceResponse(
            double availableBalance,
            CurrencyCode currency,
            PaymentMethodBalanceStatus status,
            Optional<OffsetDateTime> updatedAt,
            Map<String, Object> additionalProperties) {
        this.availableBalance = availableBalance;
        this.currency = currency;
        this.status = status;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("availableBalance")
    public double getAvailableBalance() {
        return availableBalance;
    }

    @JsonProperty("currency")
    public CurrencyCode getCurrency() {
        return currency;
    }

    /**
     * @return If the status is UNAVAILABLE, the account does not support this operation. If the status is ERROR, the account may need to be re-linked with Plaid.
     */
    @JsonProperty("status")
    public PaymentMethodBalanceStatus getStatus() {
        return status;
    }

    /**
     * @return The time the balance was last updated. Will be null if the balance has never been updated.
     */
    @JsonProperty("updatedAt")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodBalanceResponse && equalTo((PaymentMethodBalanceResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodBalanceResponse other) {
        return availableBalance == other.availableBalance
                && currency.equals(other.currency)
                && status.equals(other.status)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.availableBalance, this.currency, this.status, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AvailableBalanceStage builder() {
        return new Builder();
    }

    public interface AvailableBalanceStage {
        CurrencyStage availableBalance(double availableBalance);

        Builder from(PaymentMethodBalanceResponse other);
    }

    public interface CurrencyStage {
        StatusStage currency(CurrencyCode currency);
    }

    public interface StatusStage {
        _FinalStage status(PaymentMethodBalanceStatus status);
    }

    public interface _FinalStage {
        PaymentMethodBalanceResponse build();

        _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt);

        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AvailableBalanceStage, CurrencyStage, StatusStage, _FinalStage {
        private double availableBalance;

        private CurrencyCode currency;

        private PaymentMethodBalanceStatus status;

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMethodBalanceResponse other) {
            availableBalance(other.getAvailableBalance());
            currency(other.getCurrency());
            status(other.getStatus());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("availableBalance")
        public CurrencyStage availableBalance(double availableBalance) {
            this.availableBalance = availableBalance;
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public StatusStage currency(CurrencyCode currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>If the status is UNAVAILABLE, the account does not support this operation. If the status is ERROR, the account may need to be re-linked with Plaid.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(PaymentMethodBalanceStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The time the balance was last updated. Will be null if the balance has never been updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public PaymentMethodBalanceResponse build() {
            return new PaymentMethodBalanceResponse(
                    availableBalance, currency, status, updatedAt, additionalProperties);
        }
    }
}
