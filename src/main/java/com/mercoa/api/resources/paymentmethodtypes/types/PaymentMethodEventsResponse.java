/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentMethodEventsResponse.Builder.class)
public final class PaymentMethodEventsResponse {
    private final List<PaymentMethodEvent> data;

    private final int count;

    private final boolean hasMore;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodEventsResponse(
            List<PaymentMethodEvent> data, int count, boolean hasMore, Map<String, Object> additionalProperties) {
        this.data = data;
        this.count = count;
        this.hasMore = hasMore;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The list of events
     */
    @JsonProperty("data")
    public List<PaymentMethodEvent> getData() {
        return data;
    }

    /**
     * @return The total number of events
     */
    @JsonProperty("count")
    public int getCount() {
        return count;
    }

    /**
     * @return Whether there are more events to fetch
     */
    @JsonProperty("hasMore")
    public boolean getHasMore() {
        return hasMore;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodEventsResponse && equalTo((PaymentMethodEventsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodEventsResponse other) {
        return data.equals(other.data) && count == other.count && hasMore == other.hasMore;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.count, this.hasMore);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountStage builder() {
        return new Builder();
    }

    public interface CountStage {
        HasMoreStage count(int count);

        Builder from(PaymentMethodEventsResponse other);
    }

    public interface HasMoreStage {
        _FinalStage hasMore(boolean hasMore);
    }

    public interface _FinalStage {
        PaymentMethodEventsResponse build();

        _FinalStage data(List<PaymentMethodEvent> data);

        _FinalStage addData(PaymentMethodEvent data);

        _FinalStage addAllData(List<PaymentMethodEvent> data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountStage, HasMoreStage, _FinalStage {
        private int count;

        private boolean hasMore;

        private List<PaymentMethodEvent> data = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMethodEventsResponse other) {
            data(other.getData());
            count(other.getCount());
            hasMore(other.getHasMore());
            return this;
        }

        /**
         * <p>The total number of events</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("count")
        public HasMoreStage count(int count) {
            this.count = count;
            return this;
        }

        /**
         * <p>Whether there are more events to fetch</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hasMore")
        public _FinalStage hasMore(boolean hasMore) {
            this.hasMore = hasMore;
            return this;
        }

        /**
         * <p>The list of events</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllData(List<PaymentMethodEvent> data) {
            this.data.addAll(data);
            return this;
        }

        /**
         * <p>The list of events</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addData(PaymentMethodEvent data) {
            this.data.add(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(List<PaymentMethodEvent> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        @java.lang.Override
        public PaymentMethodEventsResponse build() {
            return new PaymentMethodEventsResponse(data, count, hasMore, additionalProperties);
        }
    }
}
