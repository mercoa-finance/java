/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomPaymentMethodSchemaFee.Builder.class)
public final class CustomPaymentMethodSchemaFee {
    private final CustomPaymentMethodFeeType type;

    private final Optional<Double> amount;

    private final Map<String, Object> additionalProperties;

    private CustomPaymentMethodSchemaFee(
            CustomPaymentMethodFeeType type, Optional<Double> amount, Map<String, Object> additionalProperties) {
        this.type = type;
        this.amount = amount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public CustomPaymentMethodFeeType getType() {
        return type;
    }

    /**
     * @return If type is 'flat', this is the flat amount that will be charged as a fee. For example, if the fee is $2.50, set this to 2.50. If type is 'percentage', this is the percentage of the payment amount that will be charged as a fee. For example, if the fee is 2.5%, set this to 2.5.
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomPaymentMethodSchemaFee && equalTo((CustomPaymentMethodSchemaFee) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomPaymentMethodSchemaFee other) {
        return type.equals(other.type) && amount.equals(other.amount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.amount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(CustomPaymentMethodFeeType type);

        Builder from(CustomPaymentMethodSchemaFee other);
    }

    public interface _FinalStage {
        CustomPaymentMethodSchemaFee build();

        _FinalStage amount(Optional<Double> amount);

        _FinalStage amount(Double amount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private CustomPaymentMethodFeeType type;

        private Optional<Double> amount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CustomPaymentMethodSchemaFee other) {
            type(other.getType());
            amount(other.getAmount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(CustomPaymentMethodFeeType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>If type is 'flat', this is the flat amount that will be charged as a fee. For example, if the fee is $2.50, set this to 2.50. If type is 'percentage', this is the percentage of the payment amount that will be charged as a fee. For example, if the fee is 2.5%, set this to 2.5.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public _FinalStage amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public CustomPaymentMethodSchemaFee build() {
            return new CustomPaymentMethodSchemaFee(type, amount, additionalProperties);
        }
    }
}
