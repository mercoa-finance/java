/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PlaidAccessTokenRequest.Builder.class)
public final class PlaidAccessTokenRequest {
    private final Optional<String> accountId;

    private final String accessToken;

    private final Map<String, Object> additionalProperties;

    private PlaidAccessTokenRequest(
            Optional<String> accountId, String accessToken, Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.accessToken = accessToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Plaid account ID. If not provided, will try to match the provided routing number and account number.
     */
    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Plaid access token for the account. If you already have an access token for the account (for example, you have linked the account to your app already), use this instead of publicToken.
     */
    @JsonProperty("accessToken")
    public String getAccessToken() {
        return accessToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PlaidAccessTokenRequest && equalTo((PlaidAccessTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PlaidAccessTokenRequest other) {
        return accountId.equals(other.accountId) && accessToken.equals(other.accessToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.accessToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccessTokenStage builder() {
        return new Builder();
    }

    public interface AccessTokenStage {
        /**
         * <p>Plaid access token for the account. If you already have an access token for the account (for example, you have linked the account to your app already), use this instead of publicToken.</p>
         */
        _FinalStage accessToken(@NotNull String accessToken);

        Builder from(PlaidAccessTokenRequest other);
    }

    public interface _FinalStage {
        PlaidAccessTokenRequest build();

        /**
         * <p>Plaid account ID. If not provided, will try to match the provided routing number and account number.</p>
         */
        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccessTokenStage, _FinalStage {
        private String accessToken;

        private Optional<String> accountId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PlaidAccessTokenRequest other) {
            accountId(other.getAccountId());
            accessToken(other.getAccessToken());
            return this;
        }

        /**
         * <p>Plaid access token for the account. If you already have an access token for the account (for example, you have linked the account to your app already), use this instead of publicToken.</p>
         * <p>Plaid access token for the account. If you already have an access token for the account (for example, you have linked the account to your app already), use this instead of publicToken.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accessToken")
        public _FinalStage accessToken(@NotNull String accessToken) {
            this.accessToken = Objects.requireNonNull(accessToken, "accessToken must not be null");
            return this;
        }

        /**
         * <p>Plaid account ID. If not provided, will try to match the provided routing number and account number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        /**
         * <p>Plaid account ID. If not provided, will try to match the provided routing number and account number.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public PlaidAccessTokenRequest build() {
            return new PlaidAccessTokenRequest(accountId, accessToken, additionalProperties);
        }
    }
}
