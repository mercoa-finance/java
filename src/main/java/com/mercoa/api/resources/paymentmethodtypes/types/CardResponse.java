/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CardResponse.Builder.class)
public final class CardResponse implements IPaymentMethodBaseResponse {
    private final String id;

    private final boolean isDefaultSource;

    private final boolean isDefaultDestination;

    private final List<CurrencyCode> supportedCurrencies;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final CardType cardType;

    private final CardBrand cardBrand;

    private final String lastFour;

    private final String expMonth;

    private final String expYear;

    private final Map<String, Object> additionalProperties;

    private CardResponse(
            String id,
            boolean isDefaultSource,
            boolean isDefaultDestination,
            List<CurrencyCode> supportedCurrencies,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            CardType cardType,
            CardBrand cardBrand,
            String lastFour,
            String expMonth,
            String expYear,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.isDefaultSource = isDefaultSource;
        this.isDefaultDestination = isDefaultDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.cardType = cardType;
        this.cardBrand = cardBrand;
        this.lastFour = lastFour;
        this.expMonth = expMonth;
        this.expYear = expYear;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return Indicates whether this payment method is the default source for the entity
     */
    @JsonProperty("isDefaultSource")
    @java.lang.Override
    public boolean getIsDefaultSource() {
        return isDefaultSource;
    }

    /**
     * @return Indicates whether this payment method is the default destination for the entity
     */
    @JsonProperty("isDefaultDestination")
    @java.lang.Override
    public boolean getIsDefaultDestination() {
        return isDefaultDestination;
    }

    @JsonProperty("supportedCurrencies")
    @java.lang.Override
    public List<CurrencyCode> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("cardType")
    public CardType getCardType() {
        return cardType;
    }

    @JsonProperty("cardBrand")
    public CardBrand getCardBrand() {
        return cardBrand;
    }

    @JsonProperty("lastFour")
    public String getLastFour() {
        return lastFour;
    }

    @JsonProperty("expMonth")
    public String getExpMonth() {
        return expMonth;
    }

    @JsonProperty("expYear")
    public String getExpYear() {
        return expYear;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardResponse && equalTo((CardResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardResponse other) {
        return id.equals(other.id)
                && isDefaultSource == other.isDefaultSource
                && isDefaultDestination == other.isDefaultDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && cardType.equals(other.cardType)
                && cardBrand.equals(other.cardBrand)
                && lastFour.equals(other.lastFour)
                && expMonth.equals(other.expMonth)
                && expYear.equals(other.expYear);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.isDefaultSource,
                this.isDefaultDestination,
                this.supportedCurrencies,
                this.createdAt,
                this.updatedAt,
                this.cardType,
                this.cardBrand,
                this.lastFour,
                this.expMonth,
                this.expYear);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IsDefaultSourceStage id(String id);

        Builder from(CardResponse other);
    }

    public interface IsDefaultSourceStage {
        IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource);
    }

    public interface IsDefaultDestinationStage {
        CreatedAtStage isDefaultDestination(boolean isDefaultDestination);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        CardTypeStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface CardTypeStage {
        CardBrandStage cardType(CardType cardType);
    }

    public interface CardBrandStage {
        LastFourStage cardBrand(CardBrand cardBrand);
    }

    public interface LastFourStage {
        ExpMonthStage lastFour(String lastFour);
    }

    public interface ExpMonthStage {
        ExpYearStage expMonth(String expMonth);
    }

    public interface ExpYearStage {
        _FinalStage expYear(String expYear);
    }

    public interface _FinalStage {
        CardResponse build();

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies);

        _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IsDefaultSourceStage,
                    IsDefaultDestinationStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    CardTypeStage,
                    CardBrandStage,
                    LastFourStage,
                    ExpMonthStage,
                    ExpYearStage,
                    _FinalStage {
        private String id;

        private boolean isDefaultSource;

        private boolean isDefaultDestination;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private CardType cardType;

        private CardBrand cardBrand;

        private String lastFour;

        private String expMonth;

        private String expYear;

        private List<CurrencyCode> supportedCurrencies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CardResponse other) {
            id(other.getId());
            isDefaultSource(other.getIsDefaultSource());
            isDefaultDestination(other.getIsDefaultDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            cardType(other.getCardType());
            cardBrand(other.getCardBrand());
            lastFour(other.getLastFour());
            expMonth(other.getExpMonth());
            expYear(other.getExpYear());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IsDefaultSourceStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultSource")
        public IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource) {
            this.isDefaultSource = isDefaultSource;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultDestination")
        public CreatedAtStage isDefaultDestination(boolean isDefaultDestination) {
            this.isDefaultDestination = isDefaultDestination;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public CardTypeStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardType")
        public CardBrandStage cardType(CardType cardType) {
            this.cardType = cardType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardBrand")
        public LastFourStage cardBrand(CardBrand cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        @java.lang.Override
        @JsonSetter("lastFour")
        public ExpMonthStage lastFour(String lastFour) {
            this.lastFour = lastFour;
            return this;
        }

        @java.lang.Override
        @JsonSetter("expMonth")
        public ExpYearStage expMonth(String expMonth) {
            this.expMonth = expMonth;
            return this;
        }

        @java.lang.Override
        @JsonSetter("expYear")
        public _FinalStage expYear(String expYear) {
            this.expYear = expYear;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies) {
            this.supportedCurrencies.add(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.clear();
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public CardResponse build() {
            return new CardResponse(
                    id,
                    isDefaultSource,
                    isDefaultDestination,
                    supportedCurrencies,
                    createdAt,
                    updatedAt,
                    cardType,
                    cardBrand,
                    lastFour,
                    expMonth,
                    expYear,
                    additionalProperties);
        }
    }
}
