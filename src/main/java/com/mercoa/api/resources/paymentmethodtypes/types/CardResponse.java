/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardResponse.Builder.class)
public final class CardResponse implements IPaymentMethodBaseResponse {
    private final String id;

    private final boolean isDefaultSource;

    private final boolean isDefaultDestination;

    private final List<CurrencyCode> supportedCurrencies;

    private final Optional<String> externalAccountingSystemId;

    private final boolean frozen;

    private final Map<String, String> metadata;

    private final Optional<Boolean> confirmedByEntity;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final CardType cardType;

    private final CardBrand cardBrand;

    private final String lastFour;

    private final String expMonth;

    private final String expYear;

    private final Map<String, Object> additionalProperties;

    private CardResponse(
            String id,
            boolean isDefaultSource,
            boolean isDefaultDestination,
            List<CurrencyCode> supportedCurrencies,
            Optional<String> externalAccountingSystemId,
            boolean frozen,
            Map<String, String> metadata,
            Optional<Boolean> confirmedByEntity,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            CardType cardType,
            CardBrand cardBrand,
            String lastFour,
            String expMonth,
            String expYear,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.isDefaultSource = isDefaultSource;
        this.isDefaultDestination = isDefaultDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.externalAccountingSystemId = externalAccountingSystemId;
        this.frozen = frozen;
        this.metadata = metadata;
        this.confirmedByEntity = confirmedByEntity;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.cardType = cardType;
        this.cardBrand = cardBrand;
        this.lastFour = lastFour;
        this.expMonth = expMonth;
        this.expYear = expYear;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return Indicates whether this payment method is the default source for the entity
     */
    @JsonProperty("isDefaultSource")
    @java.lang.Override
    public boolean getIsDefaultSource() {
        return isDefaultSource;
    }

    /**
     * @return Indicates whether this payment method is the default destination for the entity
     */
    @JsonProperty("isDefaultDestination")
    @java.lang.Override
    public boolean getIsDefaultDestination() {
        return isDefaultDestination;
    }

    @JsonProperty("supportedCurrencies")
    @java.lang.Override
    public List<CurrencyCode> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    /**
     * @return ID for this payment method in the external accounting system (e.g Rutter or Codat)
     */
    @JsonProperty("externalAccountingSystemId")
    @java.lang.Override
    public Optional<String> getExternalAccountingSystemId() {
        return externalAccountingSystemId;
    }

    /**
     * @return Frozen payment methods cannot be used for payments, but will still be returned in API responses.
     */
    @JsonProperty("frozen")
    @java.lang.Override
    public boolean getFrozen() {
        return frozen;
    }

    /**
     * @return Metadata associated with this payment method.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return (ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.
     */
    @JsonProperty("confirmedByEntity")
    @java.lang.Override
    public Optional<Boolean> getConfirmedByEntity() {
        return confirmedByEntity;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("cardType")
    public CardType getCardType() {
        return cardType;
    }

    @JsonProperty("cardBrand")
    public CardBrand getCardBrand() {
        return cardBrand;
    }

    @JsonProperty("lastFour")
    public String getLastFour() {
        return lastFour;
    }

    @JsonProperty("expMonth")
    public String getExpMonth() {
        return expMonth;
    }

    @JsonProperty("expYear")
    public String getExpYear() {
        return expYear;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardResponse && equalTo((CardResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardResponse other) {
        return id.equals(other.id)
                && isDefaultSource == other.isDefaultSource
                && isDefaultDestination == other.isDefaultDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && externalAccountingSystemId.equals(other.externalAccountingSystemId)
                && frozen == other.frozen
                && metadata.equals(other.metadata)
                && confirmedByEntity.equals(other.confirmedByEntity)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && cardType.equals(other.cardType)
                && cardBrand.equals(other.cardBrand)
                && lastFour.equals(other.lastFour)
                && expMonth.equals(other.expMonth)
                && expYear.equals(other.expYear);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.isDefaultSource,
                this.isDefaultDestination,
                this.supportedCurrencies,
                this.externalAccountingSystemId,
                this.frozen,
                this.metadata,
                this.confirmedByEntity,
                this.createdAt,
                this.updatedAt,
                this.cardType,
                this.cardBrand,
                this.lastFour,
                this.expMonth,
                this.expYear);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IsDefaultSourceStage id(@NotNull String id);

        Builder from(CardResponse other);
    }

    public interface IsDefaultSourceStage {
        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         */
        IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource);
    }

    public interface IsDefaultDestinationStage {
        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         */
        FrozenStage isDefaultDestination(boolean isDefaultDestination);
    }

    public interface FrozenStage {
        /**
         * <p>Frozen payment methods cannot be used for payments, but will still be returned in API responses.</p>
         */
        CreatedAtStage frozen(boolean frozen);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        CardTypeStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface CardTypeStage {
        CardBrandStage cardType(@NotNull CardType cardType);
    }

    public interface CardBrandStage {
        LastFourStage cardBrand(@NotNull CardBrand cardBrand);
    }

    public interface LastFourStage {
        ExpMonthStage lastFour(@NotNull String lastFour);
    }

    public interface ExpMonthStage {
        ExpYearStage expMonth(@NotNull String expMonth);
    }

    public interface ExpYearStage {
        _FinalStage expYear(@NotNull String expYear);
    }

    public interface _FinalStage {
        CardResponse build();

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies);

        _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies);

        /**
         * <p>ID for this payment method in the external accounting system (e.g Rutter or Codat)</p>
         */
        _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId);

        _FinalStage externalAccountingSystemId(String externalAccountingSystemId);

        /**
         * <p>Metadata associated with this payment method.</p>
         */
        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        /**
         * <p>(ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.</p>
         */
        _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity);

        _FinalStage confirmedByEntity(Boolean confirmedByEntity);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IsDefaultSourceStage,
                    IsDefaultDestinationStage,
                    FrozenStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    CardTypeStage,
                    CardBrandStage,
                    LastFourStage,
                    ExpMonthStage,
                    ExpYearStage,
                    _FinalStage {
        private String id;

        private boolean isDefaultSource;

        private boolean isDefaultDestination;

        private boolean frozen;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private CardType cardType;

        private CardBrand cardBrand;

        private String lastFour;

        private String expMonth;

        private String expYear;

        private Optional<Boolean> confirmedByEntity = Optional.empty();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private Optional<String> externalAccountingSystemId = Optional.empty();

        private List<CurrencyCode> supportedCurrencies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CardResponse other) {
            id(other.getId());
            isDefaultSource(other.getIsDefaultSource());
            isDefaultDestination(other.getIsDefaultDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            externalAccountingSystemId(other.getExternalAccountingSystemId());
            frozen(other.getFrozen());
            metadata(other.getMetadata());
            confirmedByEntity(other.getConfirmedByEntity());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            cardType(other.getCardType());
            cardBrand(other.getCardBrand());
            lastFour(other.getLastFour());
            expMonth(other.getExpMonth());
            expYear(other.getExpYear());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IsDefaultSourceStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultSource")
        public IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource) {
            this.isDefaultSource = isDefaultSource;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultDestination")
        public FrozenStage isDefaultDestination(boolean isDefaultDestination) {
            this.isDefaultDestination = isDefaultDestination;
            return this;
        }

        /**
         * <p>Frozen payment methods cannot be used for payments, but will still be returned in API responses.</p>
         * <p>Frozen payment methods cannot be used for payments, but will still be returned in API responses.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("frozen")
        public CreatedAtStage frozen(boolean frozen) {
            this.frozen = frozen;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public CardTypeStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardType")
        public CardBrandStage cardType(@NotNull CardType cardType) {
            this.cardType = Objects.requireNonNull(cardType, "cardType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardBrand")
        public LastFourStage cardBrand(@NotNull CardBrand cardBrand) {
            this.cardBrand = Objects.requireNonNull(cardBrand, "cardBrand must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("lastFour")
        public ExpMonthStage lastFour(@NotNull String lastFour) {
            this.lastFour = Objects.requireNonNull(lastFour, "lastFour must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("expMonth")
        public ExpYearStage expMonth(@NotNull String expMonth) {
            this.expMonth = Objects.requireNonNull(expMonth, "expMonth must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("expYear")
        public _FinalStage expYear(@NotNull String expYear) {
            this.expYear = Objects.requireNonNull(expYear, "expYear must not be null");
            return this;
        }

        /**
         * <p>(ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage confirmedByEntity(Boolean confirmedByEntity) {
            this.confirmedByEntity = Optional.ofNullable(confirmedByEntity);
            return this;
        }

        /**
         * <p>(ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "confirmedByEntity", nulls = Nulls.SKIP)
        public _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity) {
            this.confirmedByEntity = confirmedByEntity;
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>ID for this payment method in the external accounting system (e.g Rutter or Codat)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalAccountingSystemId(String externalAccountingSystemId) {
            this.externalAccountingSystemId = Optional.ofNullable(externalAccountingSystemId);
            return this;
        }

        /**
         * <p>ID for this payment method in the external accounting system (e.g Rutter or Codat)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "externalAccountingSystemId", nulls = Nulls.SKIP)
        public _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId) {
            this.externalAccountingSystemId = externalAccountingSystemId;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies) {
            this.supportedCurrencies.add(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.clear();
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public CardResponse build() {
            return new CardResponse(
                    id,
                    isDefaultSource,
                    isDefaultDestination,
                    supportedCurrencies,
                    externalAccountingSystemId,
                    frozen,
                    metadata,
                    confirmedByEntity,
                    createdAt,
                    updatedAt,
                    cardType,
                    cardBrand,
                    lastFour,
                    expMonth,
                    expYear,
                    additionalProperties);
        }
    }
}
