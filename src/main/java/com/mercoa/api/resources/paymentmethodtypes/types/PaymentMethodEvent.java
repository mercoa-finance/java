/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentMethodEvent.Builder.class)
public final class PaymentMethodEvent {
    private final String id;

    private final PaymentMethodResponse data;

    private final List<String> webhookIds;

    private final Optional<String> userId;

    private final Optional<String> updatedByEntityId;

    private final OffsetDateTime createdAt;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodEvent(
            String id,
            PaymentMethodResponse data,
            List<String> webhookIds,
            Optional<String> userId,
            Optional<String> updatedByEntityId,
            OffsetDateTime createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.data = data;
        this.webhookIds = webhookIds;
        this.userId = userId;
        this.updatedByEntityId = updatedByEntityId;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the event
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The payment method data at the time of the event
     */
    @JsonProperty("data")
    public PaymentMethodResponse getData() {
        return data;
    }

    /**
     * @return The list of webhook IDs associated with this event
     */
    @JsonProperty("webhookIds")
    public List<String> getWebhookIds() {
        return webhookIds;
    }

    /**
     * @return The ID of the user who triggered the event
     */
    @JsonProperty("userId")
    public Optional<String> getUserId() {
        return userId;
    }

    /**
     * @return The ID of the entity that updated the payment method
     */
    @JsonProperty("updatedByEntityId")
    public Optional<String> getUpdatedByEntityId() {
        return updatedByEntityId;
    }

    /**
     * @return The timestamp when the event was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodEvent && equalTo((PaymentMethodEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodEvent other) {
        return id.equals(other.id)
                && data.equals(other.data)
                && webhookIds.equals(other.webhookIds)
                && userId.equals(other.userId)
                && updatedByEntityId.equals(other.updatedByEntityId)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.data, this.webhookIds, this.userId, this.updatedByEntityId, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The ID of the event</p>
         */
        DataStage id(@NotNull String id);

        Builder from(PaymentMethodEvent other);
    }

    public interface DataStage {
        /**
         * <p>The payment method data at the time of the event</p>
         */
        CreatedAtStage data(@NotNull PaymentMethodResponse data);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the event was created</p>
         */
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        PaymentMethodEvent build();

        /**
         * <p>The list of webhook IDs associated with this event</p>
         */
        _FinalStage webhookIds(List<String> webhookIds);

        _FinalStage addWebhookIds(String webhookIds);

        _FinalStage addAllWebhookIds(List<String> webhookIds);

        /**
         * <p>The ID of the user who triggered the event</p>
         */
        _FinalStage userId(Optional<String> userId);

        _FinalStage userId(String userId);

        /**
         * <p>The ID of the entity that updated the payment method</p>
         */
        _FinalStage updatedByEntityId(Optional<String> updatedByEntityId);

        _FinalStage updatedByEntityId(String updatedByEntityId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, DataStage, CreatedAtStage, _FinalStage {
        private String id;

        private PaymentMethodResponse data;

        private OffsetDateTime createdAt;

        private Optional<String> updatedByEntityId = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private List<String> webhookIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMethodEvent other) {
            id(other.getId());
            data(other.getData());
            webhookIds(other.getWebhookIds());
            userId(other.getUserId());
            updatedByEntityId(other.getUpdatedByEntityId());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The ID of the event</p>
         * <p>The ID of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public DataStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The payment method data at the time of the event</p>
         * <p>The payment method data at the time of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("data")
        public CreatedAtStage data(@NotNull PaymentMethodResponse data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the event was created</p>
         * <p>The timestamp when the event was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The ID of the entity that updated the payment method</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedByEntityId(String updatedByEntityId) {
            this.updatedByEntityId = Optional.ofNullable(updatedByEntityId);
            return this;
        }

        /**
         * <p>The ID of the entity that updated the payment method</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updatedByEntityId", nulls = Nulls.SKIP)
        public _FinalStage updatedByEntityId(Optional<String> updatedByEntityId) {
            this.updatedByEntityId = updatedByEntityId;
            return this;
        }

        /**
         * <p>The ID of the user who triggered the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userId(String userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * <p>The ID of the user who triggered the event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public _FinalStage userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllWebhookIds(List<String> webhookIds) {
            if (webhookIds != null) {
                this.webhookIds.addAll(webhookIds);
            }
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addWebhookIds(String webhookIds) {
            this.webhookIds.add(webhookIds);
            return this;
        }

        /**
         * <p>The list of webhook IDs associated with this event</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webhookIds", nulls = Nulls.SKIP)
        public _FinalStage webhookIds(List<String> webhookIds) {
            this.webhookIds.clear();
            this.webhookIds.addAll(webhookIds);
            return this;
        }

        @java.lang.Override
        public PaymentMethodEvent build() {
            return new PaymentMethodEvent(
                    id, data, webhookIds, userId, updatedByEntityId, createdAt, additionalProperties);
        }
    }
}
