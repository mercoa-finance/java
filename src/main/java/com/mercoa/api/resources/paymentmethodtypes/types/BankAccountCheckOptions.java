/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.Address;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankAccountCheckOptions.Builder.class)
public final class BankAccountCheckOptions {
    private final Optional<Boolean> enabled;

    private final Optional<Integer> initialCheckNumber;

    private final Optional<String> routingNumberOverride;

    private final Optional<String> accountNumberOverride;

    private final Optional<String> accountHolderNameOverride;

    private final Optional<Address> accountHolderAddressOverride;

    private final String signatoryName;

    private final Optional<String> signatureImage;

    private final Optional<Boolean> useSignatureImage;

    private final Map<String, Object> additionalProperties;

    private BankAccountCheckOptions(
            Optional<Boolean> enabled,
            Optional<Integer> initialCheckNumber,
            Optional<String> routingNumberOverride,
            Optional<String> accountNumberOverride,
            Optional<String> accountHolderNameOverride,
            Optional<Address> accountHolderAddressOverride,
            String signatoryName,
            Optional<String> signatureImage,
            Optional<Boolean> useSignatureImage,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.initialCheckNumber = initialCheckNumber;
        this.routingNumberOverride = routingNumberOverride;
        this.accountNumberOverride = accountNumberOverride;
        this.accountHolderNameOverride = accountHolderNameOverride;
        this.accountHolderAddressOverride = accountHolderAddressOverride;
        this.signatoryName = signatoryName;
        this.signatureImage = signatureImage;
        this.useSignatureImage = useSignatureImage;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If true, will allow the user to print checks from this bank account
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return If provided, will start the check number sequence at the provided number. If not provided, will start at 5000.
     */
    @JsonProperty("initialCheckNumber")
    public Optional<Integer> getInitialCheckNumber() {
        return initialCheckNumber;
    }

    /**
     * @return If provided, will print a check with the provided routing number instead of the one from the bank account
     */
    @JsonProperty("routingNumberOverride")
    public Optional<String> getRoutingNumberOverride() {
        return routingNumberOverride;
    }

    /**
     * @return If provided, will print a check with the provided account number instead of the one from the bank account
     */
    @JsonProperty("accountNumberOverride")
    public Optional<String> getAccountNumberOverride() {
        return accountNumberOverride;
    }

    /**
     * @return If provided, will print a check with the provided account holder name instead of the payer name from the invoice
     */
    @JsonProperty("accountHolderNameOverride")
    public Optional<String> getAccountHolderNameOverride() {
        return accountHolderNameOverride;
    }

    /**
     * @return If provided, will print a check with the provided account holder address instead of the payer address from the invoice
     */
    @JsonProperty("accountHolderAddressOverride")
    public Optional<Address> getAccountHolderAddressOverride() {
        return accountHolderAddressOverride;
    }

    /**
     * @return Name of the person who's signature will be printed on the check.
     */
    @JsonProperty("signatoryName")
    public String getSignatoryName() {
        return signatoryName;
    }

    /**
     * @return Base64 encoded image of the signature. If not provided, will use the signatoryName to generate a signature. Mercoa will automatically grayscale, resize, and convert the image to a PNG the image to fit on the check.
     */
    @JsonProperty("signatureImage")
    public Optional<String> getSignatureImage() {
        return signatureImage;
    }

    /**
     * @return If true, will print checks with the provided signatureImage. If false, will print checks with a generated signature from the signatoryName. If this parameter is not set the default behavior is to use the signatureImage if provided.
     */
    @JsonProperty("useSignatureImage")
    public Optional<Boolean> getUseSignatureImage() {
        return useSignatureImage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccountCheckOptions && equalTo((BankAccountCheckOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccountCheckOptions other) {
        return enabled.equals(other.enabled)
                && initialCheckNumber.equals(other.initialCheckNumber)
                && routingNumberOverride.equals(other.routingNumberOverride)
                && accountNumberOverride.equals(other.accountNumberOverride)
                && accountHolderNameOverride.equals(other.accountHolderNameOverride)
                && accountHolderAddressOverride.equals(other.accountHolderAddressOverride)
                && signatoryName.equals(other.signatoryName)
                && signatureImage.equals(other.signatureImage)
                && useSignatureImage.equals(other.useSignatureImage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.enabled,
                this.initialCheckNumber,
                this.routingNumberOverride,
                this.accountNumberOverride,
                this.accountHolderNameOverride,
                this.accountHolderAddressOverride,
                this.signatoryName,
                this.signatureImage,
                this.useSignatureImage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SignatoryNameStage builder() {
        return new Builder();
    }

    public interface SignatoryNameStage {
        /**
         * <p>Name of the person who's signature will be printed on the check.</p>
         */
        _FinalStage signatoryName(@NotNull String signatoryName);

        Builder from(BankAccountCheckOptions other);
    }

    public interface _FinalStage {
        BankAccountCheckOptions build();

        /**
         * <p>If true, will allow the user to print checks from this bank account</p>
         */
        _FinalStage enabled(Optional<Boolean> enabled);

        _FinalStage enabled(Boolean enabled);

        /**
         * <p>If provided, will start the check number sequence at the provided number. If not provided, will start at 5000.</p>
         */
        _FinalStage initialCheckNumber(Optional<Integer> initialCheckNumber);

        _FinalStage initialCheckNumber(Integer initialCheckNumber);

        /**
         * <p>If provided, will print a check with the provided routing number instead of the one from the bank account</p>
         */
        _FinalStage routingNumberOverride(Optional<String> routingNumberOverride);

        _FinalStage routingNumberOverride(String routingNumberOverride);

        /**
         * <p>If provided, will print a check with the provided account number instead of the one from the bank account</p>
         */
        _FinalStage accountNumberOverride(Optional<String> accountNumberOverride);

        _FinalStage accountNumberOverride(String accountNumberOverride);

        /**
         * <p>If provided, will print a check with the provided account holder name instead of the payer name from the invoice</p>
         */
        _FinalStage accountHolderNameOverride(Optional<String> accountHolderNameOverride);

        _FinalStage accountHolderNameOverride(String accountHolderNameOverride);

        /**
         * <p>If provided, will print a check with the provided account holder address instead of the payer address from the invoice</p>
         */
        _FinalStage accountHolderAddressOverride(Optional<Address> accountHolderAddressOverride);

        _FinalStage accountHolderAddressOverride(Address accountHolderAddressOverride);

        /**
         * <p>Base64 encoded image of the signature. If not provided, will use the signatoryName to generate a signature. Mercoa will automatically grayscale, resize, and convert the image to a PNG the image to fit on the check.</p>
         */
        _FinalStage signatureImage(Optional<String> signatureImage);

        _FinalStage signatureImage(String signatureImage);

        /**
         * <p>If true, will print checks with the provided signatureImage. If false, will print checks with a generated signature from the signatoryName. If this parameter is not set the default behavior is to use the signatureImage if provided.</p>
         */
        _FinalStage useSignatureImage(Optional<Boolean> useSignatureImage);

        _FinalStage useSignatureImage(Boolean useSignatureImage);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SignatoryNameStage, _FinalStage {
        private String signatoryName;

        private Optional<Boolean> useSignatureImage = Optional.empty();

        private Optional<String> signatureImage = Optional.empty();

        private Optional<Address> accountHolderAddressOverride = Optional.empty();

        private Optional<String> accountHolderNameOverride = Optional.empty();

        private Optional<String> accountNumberOverride = Optional.empty();

        private Optional<String> routingNumberOverride = Optional.empty();

        private Optional<Integer> initialCheckNumber = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankAccountCheckOptions other) {
            enabled(other.getEnabled());
            initialCheckNumber(other.getInitialCheckNumber());
            routingNumberOverride(other.getRoutingNumberOverride());
            accountNumberOverride(other.getAccountNumberOverride());
            accountHolderNameOverride(other.getAccountHolderNameOverride());
            accountHolderAddressOverride(other.getAccountHolderAddressOverride());
            signatoryName(other.getSignatoryName());
            signatureImage(other.getSignatureImage());
            useSignatureImage(other.getUseSignatureImage());
            return this;
        }

        /**
         * <p>Name of the person who's signature will be printed on the check.</p>
         * <p>Name of the person who's signature will be printed on the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("signatoryName")
        public _FinalStage signatoryName(@NotNull String signatoryName) {
            this.signatoryName = Objects.requireNonNull(signatoryName, "signatoryName must not be null");
            return this;
        }

        /**
         * <p>If true, will print checks with the provided signatureImage. If false, will print checks with a generated signature from the signatoryName. If this parameter is not set the default behavior is to use the signatureImage if provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage useSignatureImage(Boolean useSignatureImage) {
            this.useSignatureImage = Optional.ofNullable(useSignatureImage);
            return this;
        }

        /**
         * <p>If true, will print checks with the provided signatureImage. If false, will print checks with a generated signature from the signatoryName. If this parameter is not set the default behavior is to use the signatureImage if provided.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "useSignatureImage", nulls = Nulls.SKIP)
        public _FinalStage useSignatureImage(Optional<Boolean> useSignatureImage) {
            this.useSignatureImage = useSignatureImage;
            return this;
        }

        /**
         * <p>Base64 encoded image of the signature. If not provided, will use the signatoryName to generate a signature. Mercoa will automatically grayscale, resize, and convert the image to a PNG the image to fit on the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage signatureImage(String signatureImage) {
            this.signatureImage = Optional.ofNullable(signatureImage);
            return this;
        }

        /**
         * <p>Base64 encoded image of the signature. If not provided, will use the signatoryName to generate a signature. Mercoa will automatically grayscale, resize, and convert the image to a PNG the image to fit on the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "signatureImage", nulls = Nulls.SKIP)
        public _FinalStage signatureImage(Optional<String> signatureImage) {
            this.signatureImage = signatureImage;
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account holder address instead of the payer address from the invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountHolderAddressOverride(Address accountHolderAddressOverride) {
            this.accountHolderAddressOverride = Optional.ofNullable(accountHolderAddressOverride);
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account holder address instead of the payer address from the invoice</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountHolderAddressOverride", nulls = Nulls.SKIP)
        public _FinalStage accountHolderAddressOverride(Optional<Address> accountHolderAddressOverride) {
            this.accountHolderAddressOverride = accountHolderAddressOverride;
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account holder name instead of the payer name from the invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountHolderNameOverride(String accountHolderNameOverride) {
            this.accountHolderNameOverride = Optional.ofNullable(accountHolderNameOverride);
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account holder name instead of the payer name from the invoice</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountHolderNameOverride", nulls = Nulls.SKIP)
        public _FinalStage accountHolderNameOverride(Optional<String> accountHolderNameOverride) {
            this.accountHolderNameOverride = accountHolderNameOverride;
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account number instead of the one from the bank account</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountNumberOverride(String accountNumberOverride) {
            this.accountNumberOverride = Optional.ofNullable(accountNumberOverride);
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided account number instead of the one from the bank account</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountNumberOverride", nulls = Nulls.SKIP)
        public _FinalStage accountNumberOverride(Optional<String> accountNumberOverride) {
            this.accountNumberOverride = accountNumberOverride;
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided routing number instead of the one from the bank account</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage routingNumberOverride(String routingNumberOverride) {
            this.routingNumberOverride = Optional.ofNullable(routingNumberOverride);
            return this;
        }

        /**
         * <p>If provided, will print a check with the provided routing number instead of the one from the bank account</p>
         */
        @java.lang.Override
        @JsonSetter(value = "routingNumberOverride", nulls = Nulls.SKIP)
        public _FinalStage routingNumberOverride(Optional<String> routingNumberOverride) {
            this.routingNumberOverride = routingNumberOverride;
            return this;
        }

        /**
         * <p>If provided, will start the check number sequence at the provided number. If not provided, will start at 5000.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage initialCheckNumber(Integer initialCheckNumber) {
            this.initialCheckNumber = Optional.ofNullable(initialCheckNumber);
            return this;
        }

        /**
         * <p>If provided, will start the check number sequence at the provided number. If not provided, will start at 5000.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "initialCheckNumber", nulls = Nulls.SKIP)
        public _FinalStage initialCheckNumber(Optional<Integer> initialCheckNumber) {
            this.initialCheckNumber = initialCheckNumber;
            return this;
        }

        /**
         * <p>If true, will allow the user to print checks from this bank account</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>If true, will allow the user to print checks from this bank account</p>
         */
        @java.lang.Override
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public _FinalStage enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        @java.lang.Override
        public BankAccountCheckOptions build() {
            return new BankAccountCheckOptions(
                    enabled,
                    initialCheckNumber,
                    routingNumberOverride,
                    accountNumberOverride,
                    accountHolderNameOverride,
                    accountHolderAddressOverride,
                    signatoryName,
                    signatureImage,
                    useSignatureImage,
                    additionalProperties);
        }
    }
}
