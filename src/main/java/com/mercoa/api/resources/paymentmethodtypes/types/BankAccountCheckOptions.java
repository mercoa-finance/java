/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BankAccountCheckOptions.Builder.class)
public final class BankAccountCheckOptions {
    private final Optional<Boolean> enabled;

    private final Optional<Integer> initialCheckNumber;

    private final Optional<String> routingNumberOverride;

    private final Optional<String> accountNumberOverride;

    private final Optional<String> signatoryName;

    private final Map<String, Object> additionalProperties;

    private BankAccountCheckOptions(
            Optional<Boolean> enabled,
            Optional<Integer> initialCheckNumber,
            Optional<String> routingNumberOverride,
            Optional<String> accountNumberOverride,
            Optional<String> signatoryName,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.initialCheckNumber = initialCheckNumber;
        this.routingNumberOverride = routingNumberOverride;
        this.accountNumberOverride = accountNumberOverride;
        this.signatoryName = signatoryName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If true, will allow the user to print checks from this bank account
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return If provided, will start the check number sequence at the provided number. If not provided, will start at 5000.
     */
    @JsonProperty("initialCheckNumber")
    public Optional<Integer> getInitialCheckNumber() {
        return initialCheckNumber;
    }

    /**
     * @return If provided, will print a check with the provided routing number instead of the one from the bank account
     */
    @JsonProperty("routingNumberOverride")
    public Optional<String> getRoutingNumberOverride() {
        return routingNumberOverride;
    }

    /**
     * @return If provided, will print a check with the provided account number instead of the one from the bank account
     */
    @JsonProperty("accountNumberOverride")
    public Optional<String> getAccountNumberOverride() {
        return accountNumberOverride;
    }

    /**
     * @return If provided, will print a check with a generated signature from the provided name
     */
    @JsonProperty("signatoryName")
    public Optional<String> getSignatoryName() {
        return signatoryName;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccountCheckOptions && equalTo((BankAccountCheckOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccountCheckOptions other) {
        return enabled.equals(other.enabled)
                && initialCheckNumber.equals(other.initialCheckNumber)
                && routingNumberOverride.equals(other.routingNumberOverride)
                && accountNumberOverride.equals(other.accountNumberOverride)
                && signatoryName.equals(other.signatoryName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.enabled,
                this.initialCheckNumber,
                this.routingNumberOverride,
                this.accountNumberOverride,
                this.signatoryName);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Integer> initialCheckNumber = Optional.empty();

        private Optional<String> routingNumberOverride = Optional.empty();

        private Optional<String> accountNumberOverride = Optional.empty();

        private Optional<String> signatoryName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BankAccountCheckOptions other) {
            enabled(other.getEnabled());
            initialCheckNumber(other.getInitialCheckNumber());
            routingNumberOverride(other.getRoutingNumberOverride());
            accountNumberOverride(other.getAccountNumberOverride());
            signatoryName(other.getSignatoryName());
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.of(enabled);
            return this;
        }

        @JsonSetter(value = "initialCheckNumber", nulls = Nulls.SKIP)
        public Builder initialCheckNumber(Optional<Integer> initialCheckNumber) {
            this.initialCheckNumber = initialCheckNumber;
            return this;
        }

        public Builder initialCheckNumber(Integer initialCheckNumber) {
            this.initialCheckNumber = Optional.of(initialCheckNumber);
            return this;
        }

        @JsonSetter(value = "routingNumberOverride", nulls = Nulls.SKIP)
        public Builder routingNumberOverride(Optional<String> routingNumberOverride) {
            this.routingNumberOverride = routingNumberOverride;
            return this;
        }

        public Builder routingNumberOverride(String routingNumberOverride) {
            this.routingNumberOverride = Optional.of(routingNumberOverride);
            return this;
        }

        @JsonSetter(value = "accountNumberOverride", nulls = Nulls.SKIP)
        public Builder accountNumberOverride(Optional<String> accountNumberOverride) {
            this.accountNumberOverride = accountNumberOverride;
            return this;
        }

        public Builder accountNumberOverride(String accountNumberOverride) {
            this.accountNumberOverride = Optional.of(accountNumberOverride);
            return this;
        }

        @JsonSetter(value = "signatoryName", nulls = Nulls.SKIP)
        public Builder signatoryName(Optional<String> signatoryName) {
            this.signatoryName = signatoryName;
            return this;
        }

        public Builder signatoryName(String signatoryName) {
            this.signatoryName = Optional.of(signatoryName);
            return this;
        }

        public BankAccountCheckOptions build() {
            return new BankAccountCheckOptions(
                    enabled,
                    initialCheckNumber,
                    routingNumberOverride,
                    accountNumberOverride,
                    signatoryName,
                    additionalProperties);
        }
    }
}
