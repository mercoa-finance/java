/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomPaymentMethodSchemaField.Builder.class)
public final class CustomPaymentMethodSchemaField {
    private final String name;

    private final Optional<String> displayName;

    private final CustomPaymentMethodSchemaFieldType type;

    private final boolean optional;

    private final Optional<Boolean> useAsAccountName;

    private final Optional<Boolean> useAsAccountNumber;

    private final Optional<List<String>> options;

    private final Map<String, Object> additionalProperties;

    private CustomPaymentMethodSchemaField(
            String name,
            Optional<String> displayName,
            CustomPaymentMethodSchemaFieldType type,
            boolean optional,
            Optional<Boolean> useAsAccountName,
            Optional<Boolean> useAsAccountNumber,
            Optional<List<String>> options,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.displayName = displayName;
        this.type = type;
        this.optional = optional;
        this.useAsAccountName = useAsAccountName;
        this.useAsAccountNumber = useAsAccountNumber;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("displayName")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    @JsonProperty("type")
    public CustomPaymentMethodSchemaFieldType getType() {
        return type;
    }

    /**
     * @return Indicates whether this field is optional
     */
    @JsonProperty("optional")
    public boolean getOptional() {
        return optional;
    }

    /**
     * @return Indicates whether this field should be used as the name of the payment method. Only one field can be used as the name. Will set the accountName field of the payment method to the value of this field.
     */
    @JsonProperty("useAsAccountName")
    public Optional<Boolean> getUseAsAccountName() {
        return useAsAccountName;
    }

    /**
     * @return Indicates whether this field should be used as the account number of the payment method. Only one field can be used as the account number. Will set the accountNumber field of the payment method to the value of this field.
     */
    @JsonProperty("useAsAccountNumber")
    public Optional<Boolean> getUseAsAccountNumber() {
        return useAsAccountNumber;
    }

    /**
     * @return When type is 'select', provide options that can be selected
     */
    @JsonProperty("options")
    public Optional<List<String>> getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomPaymentMethodSchemaField && equalTo((CustomPaymentMethodSchemaField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomPaymentMethodSchemaField other) {
        return name.equals(other.name)
                && displayName.equals(other.displayName)
                && type.equals(other.type)
                && optional == other.optional
                && useAsAccountName.equals(other.useAsAccountName)
                && useAsAccountNumber.equals(other.useAsAccountNumber)
                && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.displayName,
                this.type,
                this.optional,
                this.useAsAccountName,
                this.useAsAccountNumber,
                this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        TypeStage name(@NotNull String name);

        Builder from(CustomPaymentMethodSchemaField other);
    }

    public interface TypeStage {
        OptionalStage type(@NotNull CustomPaymentMethodSchemaFieldType type);
    }

    public interface OptionalStage {
        _FinalStage optional(boolean optional);
    }

    public interface _FinalStage {
        CustomPaymentMethodSchemaField build();

        _FinalStage displayName(Optional<String> displayName);

        _FinalStage displayName(String displayName);

        _FinalStage useAsAccountName(Optional<Boolean> useAsAccountName);

        _FinalStage useAsAccountName(Boolean useAsAccountName);

        _FinalStage useAsAccountNumber(Optional<Boolean> useAsAccountNumber);

        _FinalStage useAsAccountNumber(Boolean useAsAccountNumber);

        _FinalStage options(Optional<List<String>> options);

        _FinalStage options(List<String> options);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, TypeStage, OptionalStage, _FinalStage {
        private String name;

        private CustomPaymentMethodSchemaFieldType type;

        private boolean optional;

        private Optional<List<String>> options = Optional.empty();

        private Optional<Boolean> useAsAccountNumber = Optional.empty();

        private Optional<Boolean> useAsAccountName = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CustomPaymentMethodSchemaField other) {
            name(other.getName());
            displayName(other.getDisplayName());
            type(other.getType());
            optional(other.getOptional());
            useAsAccountName(other.getUseAsAccountName());
            useAsAccountNumber(other.getUseAsAccountNumber());
            options(other.getOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public TypeStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public OptionalStage type(@NotNull CustomPaymentMethodSchemaFieldType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Indicates whether this field is optional</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("optional")
        public _FinalStage optional(boolean optional) {
            this.optional = optional;
            return this;
        }

        /**
         * <p>When type is 'select', provide options that can be selected</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(List<String> options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<List<String>> options) {
            this.options = options;
            return this;
        }

        /**
         * <p>Indicates whether this field should be used as the account number of the payment method. Only one field can be used as the account number. Will set the accountNumber field of the payment method to the value of this field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage useAsAccountNumber(Boolean useAsAccountNumber) {
            this.useAsAccountNumber = Optional.ofNullable(useAsAccountNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "useAsAccountNumber", nulls = Nulls.SKIP)
        public _FinalStage useAsAccountNumber(Optional<Boolean> useAsAccountNumber) {
            this.useAsAccountNumber = useAsAccountNumber;
            return this;
        }

        /**
         * <p>Indicates whether this field should be used as the name of the payment method. Only one field can be used as the name. Will set the accountName field of the payment method to the value of this field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage useAsAccountName(Boolean useAsAccountName) {
            this.useAsAccountName = Optional.ofNullable(useAsAccountName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "useAsAccountName", nulls = Nulls.SKIP)
        public _FinalStage useAsAccountName(Optional<Boolean> useAsAccountName) {
            this.useAsAccountName = useAsAccountName;
            return this;
        }

        @java.lang.Override
        public _FinalStage displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "displayName", nulls = Nulls.SKIP)
        public _FinalStage displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        @java.lang.Override
        public CustomPaymentMethodSchemaField build() {
            return new CustomPaymentMethodSchemaField(
                    name,
                    displayName,
                    type,
                    optional,
                    useAsAccountName,
                    useAsAccountNumber,
                    options,
                    additionalProperties);
        }
    }
}
