/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class PaymentMethodResponse {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private PaymentMethodResponse(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static PaymentMethodResponse bankAccount(BankAccountResponse value) {
        return new PaymentMethodResponse(new BankAccountValue(value));
    }

    public static PaymentMethodResponse card(CardResponse value) {
        return new PaymentMethodResponse(new CardValue(value));
    }

    public static PaymentMethodResponse check(CheckResponse value) {
        return new PaymentMethodResponse(new CheckValue(value));
    }

    public static PaymentMethodResponse custom(CustomPaymentMethodResponse value) {
        return new PaymentMethodResponse(new CustomValue(value));
    }

    public static PaymentMethodResponse offPlatform(PaymentMethodBaseResponse value) {
        return new PaymentMethodResponse(new OffPlatformValue(value));
    }

    public static PaymentMethodResponse utility(UtilityPaymentMethodResponse value) {
        return new PaymentMethodResponse(new UtilityValue(value));
    }

    public static PaymentMethodResponse wallet(WalletResponse value) {
        return new PaymentMethodResponse(new WalletValue(value));
    }

    public boolean isBankAccount() {
        return value instanceof BankAccountValue;
    }

    public boolean isCard() {
        return value instanceof CardValue;
    }

    public boolean isCheck() {
        return value instanceof CheckValue;
    }

    public boolean isCustom() {
        return value instanceof CustomValue;
    }

    public boolean isOffPlatform() {
        return value instanceof OffPlatformValue;
    }

    public boolean isUtility() {
        return value instanceof UtilityValue;
    }

    public boolean isWallet() {
        return value instanceof WalletValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<BankAccountResponse> getBankAccount() {
        if (isBankAccount()) {
            return Optional.of(((BankAccountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CardResponse> getCard() {
        if (isCard()) {
            return Optional.of(((CardValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CheckResponse> getCheck() {
        if (isCheck()) {
            return Optional.of(((CheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CustomPaymentMethodResponse> getCustom() {
        if (isCustom()) {
            return Optional.of(((CustomValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PaymentMethodBaseResponse> getOffPlatform() {
        if (isOffPlatform()) {
            return Optional.of(((OffPlatformValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UtilityPaymentMethodResponse> getUtility() {
        if (isUtility()) {
            return Optional.of(((UtilityValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<WalletResponse> getWallet() {
        if (isWallet()) {
            return Optional.of(((WalletValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitBankAccount(BankAccountResponse bankAccount);

        T visitCard(CardResponse card);

        T visitCheck(CheckResponse check);

        T visitCustom(CustomPaymentMethodResponse custom);

        T visitOffPlatform(PaymentMethodBaseResponse offPlatform);

        T visitUtility(UtilityPaymentMethodResponse utility);

        T visitWallet(WalletResponse wallet);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(BankAccountValue.class),
        @JsonSubTypes.Type(CardValue.class),
        @JsonSubTypes.Type(CheckValue.class),
        @JsonSubTypes.Type(CustomValue.class),
        @JsonSubTypes.Type(OffPlatformValue.class),
        @JsonSubTypes.Type(UtilityValue.class),
        @JsonSubTypes.Type(WalletValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("bankAccount")
    @JsonIgnoreProperties("type")
    private static final class BankAccountValue implements Value {
        @JsonUnwrapped
        private BankAccountResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BankAccountValue() {}

        private BankAccountValue(BankAccountResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBankAccount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BankAccountValue && equalTo((BankAccountValue) other);
        }

        private boolean equalTo(BankAccountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("card")
    @JsonIgnoreProperties("type")
    private static final class CardValue implements Value {
        @JsonUnwrapped
        private CardResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CardValue() {}

        private CardValue(CardResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCard(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CardValue && equalTo((CardValue) other);
        }

        private boolean equalTo(CardValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("check")
    @JsonIgnoreProperties("type")
    private static final class CheckValue implements Value {
        @JsonUnwrapped
        private CheckResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CheckValue() {}

        private CheckValue(CheckResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CheckValue && equalTo((CheckValue) other);
        }

        private boolean equalTo(CheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("custom")
    @JsonIgnoreProperties("type")
    private static final class CustomValue implements Value {
        @JsonUnwrapped
        private CustomPaymentMethodResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomValue() {}

        private CustomValue(CustomPaymentMethodResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustom(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomValue && equalTo((CustomValue) other);
        }

        private boolean equalTo(CustomValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("offPlatform")
    @JsonIgnoreProperties("type")
    private static final class OffPlatformValue implements Value {
        @JsonUnwrapped
        private PaymentMethodBaseResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OffPlatformValue() {}

        private OffPlatformValue(PaymentMethodBaseResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOffPlatform(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OffPlatformValue && equalTo((OffPlatformValue) other);
        }

        private boolean equalTo(OffPlatformValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("utility")
    @JsonIgnoreProperties("type")
    private static final class UtilityValue implements Value {
        @JsonUnwrapped
        private UtilityPaymentMethodResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UtilityValue() {}

        private UtilityValue(UtilityPaymentMethodResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUtility(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UtilityValue && equalTo((UtilityValue) other);
        }

        private boolean equalTo(UtilityValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("wallet")
    @JsonIgnoreProperties("type")
    private static final class WalletValue implements Value {
        @JsonUnwrapped
        private WalletResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WalletValue() {}

        private WalletValue(WalletResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWallet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WalletValue && equalTo((WalletValue) other);
        }

        private boolean equalTo(WalletValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "PaymentMethodResponse{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
