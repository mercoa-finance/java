/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankAccountResponse.Builder.class)
public final class BankAccountResponse implements IPaymentMethodBaseResponse {
    private final String id;

    private final boolean isDefaultSource;

    private final boolean isDefaultDestination;

    private final List<CurrencyCode> supportedCurrencies;

    private final Optional<String> externalAccountingSystemId;

    private final boolean frozen;

    private final Map<String, String> metadata;

    private final Optional<Boolean> confirmedByEntity;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final String accountName;

    private final String bankName;

    private final String routingNumber;

    private final String accountNumber;

    private final BankType accountType;

    private final BankStatus status;

    private final Optional<BankAccountCheckOptions> checkOptions;

    private final Map<String, Object> additionalProperties;

    private BankAccountResponse(
            String id,
            boolean isDefaultSource,
            boolean isDefaultDestination,
            List<CurrencyCode> supportedCurrencies,
            Optional<String> externalAccountingSystemId,
            boolean frozen,
            Map<String, String> metadata,
            Optional<Boolean> confirmedByEntity,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String accountName,
            String bankName,
            String routingNumber,
            String accountNumber,
            BankType accountType,
            BankStatus status,
            Optional<BankAccountCheckOptions> checkOptions,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.isDefaultSource = isDefaultSource;
        this.isDefaultDestination = isDefaultDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.externalAccountingSystemId = externalAccountingSystemId;
        this.frozen = frozen;
        this.metadata = metadata;
        this.confirmedByEntity = confirmedByEntity;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.accountName = accountName;
        this.bankName = bankName;
        this.routingNumber = routingNumber;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.status = status;
        this.checkOptions = checkOptions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return Indicates whether this payment method is the default source for the entity
     */
    @JsonProperty("isDefaultSource")
    @java.lang.Override
    public boolean getIsDefaultSource() {
        return isDefaultSource;
    }

    /**
     * @return Indicates whether this payment method is the default destination for the entity
     */
    @JsonProperty("isDefaultDestination")
    @java.lang.Override
    public boolean getIsDefaultDestination() {
        return isDefaultDestination;
    }

    @JsonProperty("supportedCurrencies")
    @java.lang.Override
    public List<CurrencyCode> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    /**
     * @return ID for this payment method in the external accounting system (e.g Rutter or Codat)
     */
    @JsonProperty("externalAccountingSystemId")
    @java.lang.Override
    public Optional<String> getExternalAccountingSystemId() {
        return externalAccountingSystemId;
    }

    /**
     * @return Frozen payment methods cannot be used for payments, but will still be returned in API responses.
     */
    @JsonProperty("frozen")
    @java.lang.Override
    public boolean getFrozen() {
        return frozen;
    }

    /**
     * @return Metadata associated with this payment method.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return (ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.
     */
    @JsonProperty("confirmedByEntity")
    @java.lang.Override
    public Optional<Boolean> getConfirmedByEntity() {
        return confirmedByEntity;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("accountName")
    public String getAccountName() {
        return accountName;
    }

    @JsonProperty("bankName")
    public String getBankName() {
        return bankName;
    }

    @JsonProperty("routingNumber")
    public String getRoutingNumber() {
        return routingNumber;
    }

    @JsonProperty("accountNumber")
    public String getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("accountType")
    public BankType getAccountType() {
        return accountType;
    }

    @JsonProperty("status")
    public BankStatus getStatus() {
        return status;
    }

    /**
     * @return If check printing is enabled for the account, will return the check options for this bank account
     */
    @JsonProperty("checkOptions")
    public Optional<BankAccountCheckOptions> getCheckOptions() {
        return checkOptions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccountResponse && equalTo((BankAccountResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccountResponse other) {
        return id.equals(other.id)
                && isDefaultSource == other.isDefaultSource
                && isDefaultDestination == other.isDefaultDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && externalAccountingSystemId.equals(other.externalAccountingSystemId)
                && frozen == other.frozen
                && metadata.equals(other.metadata)
                && confirmedByEntity.equals(other.confirmedByEntity)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && accountName.equals(other.accountName)
                && bankName.equals(other.bankName)
                && routingNumber.equals(other.routingNumber)
                && accountNumber.equals(other.accountNumber)
                && accountType.equals(other.accountType)
                && status.equals(other.status)
                && checkOptions.equals(other.checkOptions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.isDefaultSource,
                this.isDefaultDestination,
                this.supportedCurrencies,
                this.externalAccountingSystemId,
                this.frozen,
                this.metadata,
                this.confirmedByEntity,
                this.createdAt,
                this.updatedAt,
                this.accountName,
                this.bankName,
                this.routingNumber,
                this.accountNumber,
                this.accountType,
                this.status,
                this.checkOptions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IsDefaultSourceStage id(@NotNull String id);

        Builder from(BankAccountResponse other);
    }

    public interface IsDefaultSourceStage {
        IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource);
    }

    public interface IsDefaultDestinationStage {
        FrozenStage isDefaultDestination(boolean isDefaultDestination);
    }

    public interface FrozenStage {
        CreatedAtStage frozen(boolean frozen);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        AccountNameStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface AccountNameStage {
        BankNameStage accountName(@NotNull String accountName);
    }

    public interface BankNameStage {
        RoutingNumberStage bankName(@NotNull String bankName);
    }

    public interface RoutingNumberStage {
        AccountNumberStage routingNumber(@NotNull String routingNumber);
    }

    public interface AccountNumberStage {
        AccountTypeStage accountNumber(@NotNull String accountNumber);
    }

    public interface AccountTypeStage {
        StatusStage accountType(@NotNull BankType accountType);
    }

    public interface StatusStage {
        _FinalStage status(@NotNull BankStatus status);
    }

    public interface _FinalStage {
        BankAccountResponse build();

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies);

        _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId);

        _FinalStage externalAccountingSystemId(String externalAccountingSystemId);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity);

        _FinalStage confirmedByEntity(Boolean confirmedByEntity);

        _FinalStage checkOptions(Optional<BankAccountCheckOptions> checkOptions);

        _FinalStage checkOptions(BankAccountCheckOptions checkOptions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IsDefaultSourceStage,
                    IsDefaultDestinationStage,
                    FrozenStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    AccountNameStage,
                    BankNameStage,
                    RoutingNumberStage,
                    AccountNumberStage,
                    AccountTypeStage,
                    StatusStage,
                    _FinalStage {
        private String id;

        private boolean isDefaultSource;

        private boolean isDefaultDestination;

        private boolean frozen;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String accountName;

        private String bankName;

        private String routingNumber;

        private String accountNumber;

        private BankType accountType;

        private BankStatus status;

        private Optional<BankAccountCheckOptions> checkOptions = Optional.empty();

        private Optional<Boolean> confirmedByEntity = Optional.empty();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private Optional<String> externalAccountingSystemId = Optional.empty();

        private List<CurrencyCode> supportedCurrencies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankAccountResponse other) {
            id(other.getId());
            isDefaultSource(other.getIsDefaultSource());
            isDefaultDestination(other.getIsDefaultDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            externalAccountingSystemId(other.getExternalAccountingSystemId());
            frozen(other.getFrozen());
            metadata(other.getMetadata());
            confirmedByEntity(other.getConfirmedByEntity());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            accountName(other.getAccountName());
            bankName(other.getBankName());
            routingNumber(other.getRoutingNumber());
            accountNumber(other.getAccountNumber());
            accountType(other.getAccountType());
            status(other.getStatus());
            checkOptions(other.getCheckOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IsDefaultSourceStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultSource")
        public IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource) {
            this.isDefaultSource = isDefaultSource;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultDestination")
        public FrozenStage isDefaultDestination(boolean isDefaultDestination) {
            this.isDefaultDestination = isDefaultDestination;
            return this;
        }

        /**
         * <p>Frozen payment methods cannot be used for payments, but will still be returned in API responses.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("frozen")
        public CreatedAtStage frozen(boolean frozen) {
            this.frozen = frozen;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public AccountNameStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountName")
        public BankNameStage accountName(@NotNull String accountName) {
            this.accountName = Objects.requireNonNull(accountName, "accountName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("bankName")
        public RoutingNumberStage bankName(@NotNull String bankName) {
            this.bankName = Objects.requireNonNull(bankName, "bankName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("routingNumber")
        public AccountNumberStage routingNumber(@NotNull String routingNumber) {
            this.routingNumber = Objects.requireNonNull(routingNumber, "routingNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountNumber")
        public AccountTypeStage accountNumber(@NotNull String accountNumber) {
            this.accountNumber = Objects.requireNonNull(accountNumber, "accountNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountType")
        public StatusStage accountType(@NotNull BankType accountType) {
            this.accountType = Objects.requireNonNull(accountType, "accountType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull BankStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>If check printing is enabled for the account, will return the check options for this bank account</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage checkOptions(BankAccountCheckOptions checkOptions) {
            this.checkOptions = Optional.ofNullable(checkOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "checkOptions", nulls = Nulls.SKIP)
        public _FinalStage checkOptions(Optional<BankAccountCheckOptions> checkOptions) {
            this.checkOptions = checkOptions;
            return this;
        }

        /**
         * <p>(ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage confirmedByEntity(Boolean confirmedByEntity) {
            this.confirmedByEntity = Optional.ofNullable(confirmedByEntity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "confirmedByEntity", nulls = Nulls.SKIP)
        public _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity) {
            this.confirmedByEntity = confirmedByEntity;
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>ID for this payment method in the external accounting system (e.g Rutter or Codat)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalAccountingSystemId(String externalAccountingSystemId) {
            this.externalAccountingSystemId = Optional.ofNullable(externalAccountingSystemId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalAccountingSystemId", nulls = Nulls.SKIP)
        public _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId) {
            this.externalAccountingSystemId = externalAccountingSystemId;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies) {
            this.supportedCurrencies.add(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.clear();
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public BankAccountResponse build() {
            return new BankAccountResponse(
                    id,
                    isDefaultSource,
                    isDefaultDestination,
                    supportedCurrencies,
                    externalAccountingSystemId,
                    frozen,
                    metadata,
                    confirmedByEntity,
                    createdAt,
                    updatedAt,
                    accountName,
                    bankName,
                    routingNumber,
                    accountNumber,
                    accountType,
                    status,
                    checkOptions,
                    additionalProperties);
        }
    }
}
