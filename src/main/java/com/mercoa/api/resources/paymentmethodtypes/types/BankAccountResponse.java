/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BankAccountResponse.Builder.class)
public final class BankAccountResponse implements IPaymentMethodBaseResponse {
    private final String id;

    private final boolean isDefaultSource;

    private final boolean isDefaultDestination;

    private final List<CurrencyCode> supportedCurrencies;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final String accountName;

    private final String bankName;

    private final String routingNumber;

    private final String accountNumber;

    private final BankType accountType;

    private final BankStatus status;

    private final Optional<BankAccountCheckOptions> checkOptions;

    private final Map<String, Object> additionalProperties;

    private BankAccountResponse(
            String id,
            boolean isDefaultSource,
            boolean isDefaultDestination,
            List<CurrencyCode> supportedCurrencies,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String accountName,
            String bankName,
            String routingNumber,
            String accountNumber,
            BankType accountType,
            BankStatus status,
            Optional<BankAccountCheckOptions> checkOptions,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.isDefaultSource = isDefaultSource;
        this.isDefaultDestination = isDefaultDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.accountName = accountName;
        this.bankName = bankName;
        this.routingNumber = routingNumber;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.status = status;
        this.checkOptions = checkOptions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return Indicates whether this payment method is the default source for the entity
     */
    @JsonProperty("isDefaultSource")
    @java.lang.Override
    public boolean getIsDefaultSource() {
        return isDefaultSource;
    }

    /**
     * @return Indicates whether this payment method is the default destination for the entity
     */
    @JsonProperty("isDefaultDestination")
    @java.lang.Override
    public boolean getIsDefaultDestination() {
        return isDefaultDestination;
    }

    @JsonProperty("supportedCurrencies")
    @java.lang.Override
    public List<CurrencyCode> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("accountName")
    public String getAccountName() {
        return accountName;
    }

    @JsonProperty("bankName")
    public String getBankName() {
        return bankName;
    }

    @JsonProperty("routingNumber")
    public String getRoutingNumber() {
        return routingNumber;
    }

    @JsonProperty("accountNumber")
    public String getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("accountType")
    public BankType getAccountType() {
        return accountType;
    }

    @JsonProperty("status")
    public BankStatus getStatus() {
        return status;
    }

    /**
     * @return If check printing is enabled for the account, will return the check options for this bank account
     */
    @JsonProperty("checkOptions")
    public Optional<BankAccountCheckOptions> getCheckOptions() {
        return checkOptions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccountResponse && equalTo((BankAccountResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccountResponse other) {
        return id.equals(other.id)
                && isDefaultSource == other.isDefaultSource
                && isDefaultDestination == other.isDefaultDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && accountName.equals(other.accountName)
                && bankName.equals(other.bankName)
                && routingNumber.equals(other.routingNumber)
                && accountNumber.equals(other.accountNumber)
                && accountType.equals(other.accountType)
                && status.equals(other.status)
                && checkOptions.equals(other.checkOptions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.isDefaultSource,
                this.isDefaultDestination,
                this.supportedCurrencies,
                this.createdAt,
                this.updatedAt,
                this.accountName,
                this.bankName,
                this.routingNumber,
                this.accountNumber,
                this.accountType,
                this.status,
                this.checkOptions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IsDefaultSourceStage id(String id);

        Builder from(BankAccountResponse other);
    }

    public interface IsDefaultSourceStage {
        IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource);
    }

    public interface IsDefaultDestinationStage {
        CreatedAtStage isDefaultDestination(boolean isDefaultDestination);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        AccountNameStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface AccountNameStage {
        BankNameStage accountName(String accountName);
    }

    public interface BankNameStage {
        RoutingNumberStage bankName(String bankName);
    }

    public interface RoutingNumberStage {
        AccountNumberStage routingNumber(String routingNumber);
    }

    public interface AccountNumberStage {
        AccountTypeStage accountNumber(String accountNumber);
    }

    public interface AccountTypeStage {
        StatusStage accountType(BankType accountType);
    }

    public interface StatusStage {
        _FinalStage status(BankStatus status);
    }

    public interface _FinalStage {
        BankAccountResponse build();

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies);

        _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage checkOptions(Optional<BankAccountCheckOptions> checkOptions);

        _FinalStage checkOptions(BankAccountCheckOptions checkOptions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IsDefaultSourceStage,
                    IsDefaultDestinationStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    AccountNameStage,
                    BankNameStage,
                    RoutingNumberStage,
                    AccountNumberStage,
                    AccountTypeStage,
                    StatusStage,
                    _FinalStage {
        private String id;

        private boolean isDefaultSource;

        private boolean isDefaultDestination;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String accountName;

        private String bankName;

        private String routingNumber;

        private String accountNumber;

        private BankType accountType;

        private BankStatus status;

        private Optional<BankAccountCheckOptions> checkOptions = Optional.empty();

        private List<CurrencyCode> supportedCurrencies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankAccountResponse other) {
            id(other.getId());
            isDefaultSource(other.getIsDefaultSource());
            isDefaultDestination(other.getIsDefaultDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            accountName(other.getAccountName());
            bankName(other.getBankName());
            routingNumber(other.getRoutingNumber());
            accountNumber(other.getAccountNumber());
            accountType(other.getAccountType());
            status(other.getStatus());
            checkOptions(other.getCheckOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IsDefaultSourceStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultSource")
        public IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource) {
            this.isDefaultSource = isDefaultSource;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultDestination")
        public CreatedAtStage isDefaultDestination(boolean isDefaultDestination) {
            this.isDefaultDestination = isDefaultDestination;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public AccountNameStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountName")
        public BankNameStage accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("bankName")
        public RoutingNumberStage bankName(String bankName) {
            this.bankName = bankName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("routingNumber")
        public AccountNumberStage routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountNumber")
        public AccountTypeStage accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountType")
        public StatusStage accountType(BankType accountType) {
            this.accountType = accountType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(BankStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>If check printing is enabled for the account, will return the check options for this bank account</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage checkOptions(BankAccountCheckOptions checkOptions) {
            this.checkOptions = Optional.of(checkOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "checkOptions", nulls = Nulls.SKIP)
        public _FinalStage checkOptions(Optional<BankAccountCheckOptions> checkOptions) {
            this.checkOptions = checkOptions;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies) {
            this.supportedCurrencies.add(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.clear();
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public BankAccountResponse build() {
            return new BankAccountResponse(
                    id,
                    isDefaultSource,
                    isDefaultDestination,
                    supportedCurrencies,
                    createdAt,
                    updatedAt,
                    accountName,
                    bankName,
                    routingNumber,
                    accountNumber,
                    accountType,
                    status,
                    checkOptions,
                    additionalProperties);
        }
    }
}
