/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckResponse.Builder.class)
public final class CheckResponse implements IPaymentMethodBaseResponse {
    private final String id;

    private final boolean isDefaultSource;

    private final boolean isDefaultDestination;

    private final List<CurrencyCode> supportedCurrencies;

    private final Optional<String> externalAccountingSystemId;

    private final boolean frozen;

    private final Map<String, String> metadata;

    private final Optional<Boolean> confirmedByEntity;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final String payToTheOrderOf;

    private final String addressLine1;

    private final Optional<String> addressLine2;

    private final String city;

    private final String stateOrProvince;

    private final String postalCode;

    private final String country;

    private final Map<String, Object> additionalProperties;

    private CheckResponse(
            String id,
            boolean isDefaultSource,
            boolean isDefaultDestination,
            List<CurrencyCode> supportedCurrencies,
            Optional<String> externalAccountingSystemId,
            boolean frozen,
            Map<String, String> metadata,
            Optional<Boolean> confirmedByEntity,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String payToTheOrderOf,
            String addressLine1,
            Optional<String> addressLine2,
            String city,
            String stateOrProvince,
            String postalCode,
            String country,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.isDefaultSource = isDefaultSource;
        this.isDefaultDestination = isDefaultDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.externalAccountingSystemId = externalAccountingSystemId;
        this.frozen = frozen;
        this.metadata = metadata;
        this.confirmedByEntity = confirmedByEntity;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.payToTheOrderOf = payToTheOrderOf;
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.city = city;
        this.stateOrProvince = stateOrProvince;
        this.postalCode = postalCode;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return Indicates whether this payment method is the default source for the entity
     */
    @JsonProperty("isDefaultSource")
    @java.lang.Override
    public boolean getIsDefaultSource() {
        return isDefaultSource;
    }

    /**
     * @return Indicates whether this payment method is the default destination for the entity
     */
    @JsonProperty("isDefaultDestination")
    @java.lang.Override
    public boolean getIsDefaultDestination() {
        return isDefaultDestination;
    }

    @JsonProperty("supportedCurrencies")
    @java.lang.Override
    public List<CurrencyCode> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    /**
     * @return ID for this payment method in the external accounting system (e.g Rutter or Codat)
     */
    @JsonProperty("externalAccountingSystemId")
    @java.lang.Override
    public Optional<String> getExternalAccountingSystemId() {
        return externalAccountingSystemId;
    }

    /**
     * @return Frozen payment methods cannot be used for payments, but will still be returned in API responses.
     */
    @JsonProperty("frozen")
    @java.lang.Override
    public boolean getFrozen() {
        return frozen;
    }

    /**
     * @return Metadata associated with this payment method.
     */
    @JsonProperty("metadata")
    @java.lang.Override
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return (ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.
     */
    @JsonProperty("confirmedByEntity")
    @java.lang.Override
    public Optional<Boolean> getConfirmedByEntity() {
        return confirmedByEntity;
    }

    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("payToTheOrderOf")
    public String getPayToTheOrderOf() {
        return payToTheOrderOf;
    }

    @JsonProperty("addressLine1")
    public String getAddressLine1() {
        return addressLine1;
    }

    @JsonProperty("addressLine2")
    public Optional<String> getAddressLine2() {
        return addressLine2;
    }

    @JsonProperty("city")
    public String getCity() {
        return city;
    }

    @JsonProperty("stateOrProvince")
    public String getStateOrProvince() {
        return stateOrProvince;
    }

    @JsonProperty("postalCode")
    public String getPostalCode() {
        return postalCode;
    }

    @JsonProperty("country")
    public String getCountry() {
        return country;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckResponse && equalTo((CheckResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckResponse other) {
        return id.equals(other.id)
                && isDefaultSource == other.isDefaultSource
                && isDefaultDestination == other.isDefaultDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && externalAccountingSystemId.equals(other.externalAccountingSystemId)
                && frozen == other.frozen
                && metadata.equals(other.metadata)
                && confirmedByEntity.equals(other.confirmedByEntity)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && payToTheOrderOf.equals(other.payToTheOrderOf)
                && addressLine1.equals(other.addressLine1)
                && addressLine2.equals(other.addressLine2)
                && city.equals(other.city)
                && stateOrProvince.equals(other.stateOrProvince)
                && postalCode.equals(other.postalCode)
                && country.equals(other.country);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.isDefaultSource,
                this.isDefaultDestination,
                this.supportedCurrencies,
                this.externalAccountingSystemId,
                this.frozen,
                this.metadata,
                this.confirmedByEntity,
                this.createdAt,
                this.updatedAt,
                this.payToTheOrderOf,
                this.addressLine1,
                this.addressLine2,
                this.city,
                this.stateOrProvince,
                this.postalCode,
                this.country);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        IsDefaultSourceStage id(@NotNull String id);

        Builder from(CheckResponse other);
    }

    public interface IsDefaultSourceStage {
        IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource);
    }

    public interface IsDefaultDestinationStage {
        FrozenStage isDefaultDestination(boolean isDefaultDestination);
    }

    public interface FrozenStage {
        CreatedAtStage frozen(boolean frozen);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        PayToTheOrderOfStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface PayToTheOrderOfStage {
        AddressLine1Stage payToTheOrderOf(@NotNull String payToTheOrderOf);
    }

    public interface AddressLine1Stage {
        CityStage addressLine1(@NotNull String addressLine1);
    }

    public interface CityStage {
        StateOrProvinceStage city(@NotNull String city);
    }

    public interface StateOrProvinceStage {
        PostalCodeStage stateOrProvince(@NotNull String stateOrProvince);
    }

    public interface PostalCodeStage {
        CountryStage postalCode(@NotNull String postalCode);
    }

    public interface CountryStage {
        _FinalStage country(@NotNull String country);
    }

    public interface _FinalStage {
        CheckResponse build();

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies);

        _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId);

        _FinalStage externalAccountingSystemId(String externalAccountingSystemId);

        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity);

        _FinalStage confirmedByEntity(Boolean confirmedByEntity);

        _FinalStage addressLine2(Optional<String> addressLine2);

        _FinalStage addressLine2(String addressLine2);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    IsDefaultSourceStage,
                    IsDefaultDestinationStage,
                    FrozenStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    PayToTheOrderOfStage,
                    AddressLine1Stage,
                    CityStage,
                    StateOrProvinceStage,
                    PostalCodeStage,
                    CountryStage,
                    _FinalStage {
        private String id;

        private boolean isDefaultSource;

        private boolean isDefaultDestination;

        private boolean frozen;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String payToTheOrderOf;

        private String addressLine1;

        private String city;

        private String stateOrProvince;

        private String postalCode;

        private String country;

        private Optional<String> addressLine2 = Optional.empty();

        private Optional<Boolean> confirmedByEntity = Optional.empty();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private Optional<String> externalAccountingSystemId = Optional.empty();

        private List<CurrencyCode> supportedCurrencies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CheckResponse other) {
            id(other.getId());
            isDefaultSource(other.getIsDefaultSource());
            isDefaultDestination(other.getIsDefaultDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            externalAccountingSystemId(other.getExternalAccountingSystemId());
            frozen(other.getFrozen());
            metadata(other.getMetadata());
            confirmedByEntity(other.getConfirmedByEntity());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            payToTheOrderOf(other.getPayToTheOrderOf());
            addressLine1(other.getAddressLine1());
            addressLine2(other.getAddressLine2());
            city(other.getCity());
            stateOrProvince(other.getStateOrProvince());
            postalCode(other.getPostalCode());
            country(other.getCountry());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public IsDefaultSourceStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default source for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultSource")
        public IsDefaultDestinationStage isDefaultSource(boolean isDefaultSource) {
            this.isDefaultSource = isDefaultSource;
            return this;
        }

        /**
         * <p>Indicates whether this payment method is the default destination for the entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefaultDestination")
        public FrozenStage isDefaultDestination(boolean isDefaultDestination) {
            this.isDefaultDestination = isDefaultDestination;
            return this;
        }

        /**
         * <p>Frozen payment methods cannot be used for payments, but will still be returned in API responses.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("frozen")
        public CreatedAtStage frozen(boolean frozen) {
            this.frozen = frozen;
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public PayToTheOrderOfStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("payToTheOrderOf")
        public AddressLine1Stage payToTheOrderOf(@NotNull String payToTheOrderOf) {
            this.payToTheOrderOf = Objects.requireNonNull(payToTheOrderOf, "payToTheOrderOf must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("addressLine1")
        public CityStage addressLine1(@NotNull String addressLine1) {
            this.addressLine1 = Objects.requireNonNull(addressLine1, "addressLine1 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("city")
        public StateOrProvinceStage city(@NotNull String city) {
            this.city = Objects.requireNonNull(city, "city must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("stateOrProvince")
        public PostalCodeStage stateOrProvince(@NotNull String stateOrProvince) {
            this.stateOrProvince = Objects.requireNonNull(stateOrProvince, "stateOrProvince must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("postalCode")
        public CountryStage postalCode(@NotNull String postalCode) {
            this.postalCode = Objects.requireNonNull(postalCode, "postalCode must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("country")
        public _FinalStage country(@NotNull String country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addressLine2(String addressLine2) {
            this.addressLine2 = Optional.ofNullable(addressLine2);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "addressLine2", nulls = Nulls.SKIP)
        public _FinalStage addressLine2(Optional<String> addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }

        /**
         * <p>(ALPHA, MAY BE REMOVED) Indicates whether the payment method has been verified by the entity. This is useful if another entity has added this payment method to this entity, and you want the owner of the payment method to verify it is correct.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage confirmedByEntity(Boolean confirmedByEntity) {
            this.confirmedByEntity = Optional.ofNullable(confirmedByEntity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "confirmedByEntity", nulls = Nulls.SKIP)
        public _FinalStage confirmedByEntity(Optional<Boolean> confirmedByEntity) {
            this.confirmedByEntity = confirmedByEntity;
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata associated with this payment method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>ID for this payment method in the external accounting system (e.g Rutter or Codat)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalAccountingSystemId(String externalAccountingSystemId) {
            this.externalAccountingSystemId = Optional.ofNullable(externalAccountingSystemId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalAccountingSystemId", nulls = Nulls.SKIP)
        public _FinalStage externalAccountingSystemId(Optional<String> externalAccountingSystemId) {
            this.externalAccountingSystemId = externalAccountingSystemId;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllSupportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addSupportedCurrencies(CurrencyCode supportedCurrencies) {
            this.supportedCurrencies.add(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies.clear();
            this.supportedCurrencies.addAll(supportedCurrencies);
            return this;
        }

        @java.lang.Override
        public CheckResponse build() {
            return new CheckResponse(
                    id,
                    isDefaultSource,
                    isDefaultDestination,
                    supportedCurrencies,
                    externalAccountingSystemId,
                    frozen,
                    metadata,
                    confirmedByEntity,
                    createdAt,
                    updatedAt,
                    payToTheOrderOf,
                    addressLine1,
                    addressLine2,
                    city,
                    stateOrProvince,
                    postalCode,
                    country,
                    additionalProperties);
        }
    }
}
