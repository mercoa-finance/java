/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.webhooks.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.entitytypes.types.EntityResponse;
import com.mercoa.api.resources.entitytypes.types.EntityUserResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityStatusChangedWebhook.Builder.class)
public final class EntityStatusChangedWebhook {
    private final String eventType;

    private final EntityResponse entity;

    private final String updatedByEntityId;

    private final String newStatus;

    private final String previousStatus;

    private final Optional<EntityUserResponse> user;

    private final Map<String, Object> additionalProperties;

    private EntityStatusChangedWebhook(
            String eventType,
            EntityResponse entity,
            String updatedByEntityId,
            String newStatus,
            String previousStatus,
            Optional<EntityUserResponse> user,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.entity = entity;
        this.updatedByEntityId = updatedByEntityId;
        this.newStatus = newStatus;
        this.previousStatus = previousStatus;
        this.user = user;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of the event.
     */
    @JsonProperty("eventType")
    public String getEventType() {
        return eventType;
    }

    /**
     * @return The entity involved in the event.
     */
    @JsonProperty("entity")
    public EntityResponse getEntity() {
        return entity;
    }

    /**
     * @return The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
     * If the entity was created or updated by an admin, this will be 'admin'.
     */
    @JsonProperty("updatedByEntityId")
    public String getUpdatedByEntityId() {
        return updatedByEntityId;
    }

    /**
     * @return The new status of the entity.
     */
    @JsonProperty("newStatus")
    public String getNewStatus() {
        return newStatus;
    }

    /**
     * @return The previous status of the entity.
     */
    @JsonProperty("previousStatus")
    public String getPreviousStatus() {
        return previousStatus;
    }

    /**
     * @return User who initiated the change.
     */
    @JsonProperty("user")
    public Optional<EntityUserResponse> getUser() {
        return user;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityStatusChangedWebhook && equalTo((EntityStatusChangedWebhook) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityStatusChangedWebhook other) {
        return eventType.equals(other.eventType)
                && entity.equals(other.entity)
                && updatedByEntityId.equals(other.updatedByEntityId)
                && newStatus.equals(other.newStatus)
                && previousStatus.equals(other.previousStatus)
                && user.equals(other.user);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.eventType, this.entity, this.updatedByEntityId, this.newStatus, this.previousStatus, this.user);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventTypeStage builder() {
        return new Builder();
    }

    public interface EventTypeStage {
        /**
         * <p>The type of the event.</p>
         */
        EntityStage eventType(@NotNull String eventType);

        Builder from(EntityStatusChangedWebhook other);
    }

    public interface EntityStage {
        /**
         * <p>The entity involved in the event.</p>
         */
        UpdatedByEntityIdStage entity(@NotNull EntityResponse entity);
    }

    public interface UpdatedByEntityIdStage {
        /**
         * <p>The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
         * If the entity was created or updated by an admin, this will be 'admin'.</p>
         */
        NewStatusStage updatedByEntityId(@NotNull String updatedByEntityId);
    }

    public interface NewStatusStage {
        /**
         * <p>The new status of the entity.</p>
         */
        PreviousStatusStage newStatus(@NotNull String newStatus);
    }

    public interface PreviousStatusStage {
        /**
         * <p>The previous status of the entity.</p>
         */
        _FinalStage previousStatus(@NotNull String previousStatus);
    }

    public interface _FinalStage {
        EntityStatusChangedWebhook build();

        /**
         * <p>User who initiated the change.</p>
         */
        _FinalStage user(Optional<EntityUserResponse> user);

        _FinalStage user(EntityUserResponse user);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EventTypeStage,
                    EntityStage,
                    UpdatedByEntityIdStage,
                    NewStatusStage,
                    PreviousStatusStage,
                    _FinalStage {
        private String eventType;

        private EntityResponse entity;

        private String updatedByEntityId;

        private String newStatus;

        private String previousStatus;

        private Optional<EntityUserResponse> user = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EntityStatusChangedWebhook other) {
            eventType(other.getEventType());
            entity(other.getEntity());
            updatedByEntityId(other.getUpdatedByEntityId());
            newStatus(other.getNewStatus());
            previousStatus(other.getPreviousStatus());
            user(other.getUser());
            return this;
        }

        /**
         * <p>The type of the event.</p>
         * <p>The type of the event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventType")
        public EntityStage eventType(@NotNull String eventType) {
            this.eventType = Objects.requireNonNull(eventType, "eventType must not be null");
            return this;
        }

        /**
         * <p>The entity involved in the event.</p>
         * <p>The entity involved in the event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("entity")
        public UpdatedByEntityIdStage entity(@NotNull EntityResponse entity) {
            this.entity = Objects.requireNonNull(entity, "entity must not be null");
            return this;
        }

        /**
         * <p>The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
         * If the entity was created or updated by an admin, this will be 'admin'.</p>
         * <p>The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
         * If the entity was created or updated by an admin, this will be 'admin'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedByEntityId")
        public NewStatusStage updatedByEntityId(@NotNull String updatedByEntityId) {
            this.updatedByEntityId = Objects.requireNonNull(updatedByEntityId, "updatedByEntityId must not be null");
            return this;
        }

        /**
         * <p>The new status of the entity.</p>
         * <p>The new status of the entity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("newStatus")
        public PreviousStatusStage newStatus(@NotNull String newStatus) {
            this.newStatus = Objects.requireNonNull(newStatus, "newStatus must not be null");
            return this;
        }

        /**
         * <p>The previous status of the entity.</p>
         * <p>The previous status of the entity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("previousStatus")
        public _FinalStage previousStatus(@NotNull String previousStatus) {
            this.previousStatus = Objects.requireNonNull(previousStatus, "previousStatus must not be null");
            return this;
        }

        /**
         * <p>User who initiated the change.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage user(EntityUserResponse user) {
            this.user = Optional.ofNullable(user);
            return this;
        }

        /**
         * <p>User who initiated the change.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "user", nulls = Nulls.SKIP)
        public _FinalStage user(Optional<EntityUserResponse> user) {
            this.user = user;
            return this;
        }

        @java.lang.Override
        public EntityStatusChangedWebhook build() {
            return new EntityStatusChangedWebhook(
                    eventType, entity, updatedByEntityId, newStatus, previousStatus, user, additionalProperties);
        }
    }
}
