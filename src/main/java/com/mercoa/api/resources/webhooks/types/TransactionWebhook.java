/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.webhooks.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.transaction.types.TransactionResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionWebhook.Builder.class)
public final class TransactionWebhook {
    private final String eventType;

    private final TransactionResponse transaction;

    private final Map<String, Object> additionalProperties;

    private TransactionWebhook(
            String eventType, TransactionResponse transaction, Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.transaction = transaction;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventType")
    public String getEventType() {
        return eventType;
    }

    @JsonProperty("transaction")
    public TransactionResponse getTransaction() {
        return transaction;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionWebhook && equalTo((TransactionWebhook) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionWebhook other) {
        return eventType.equals(other.eventType) && transaction.equals(other.transaction);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventType, this.transaction);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventTypeStage builder() {
        return new Builder();
    }

    public interface EventTypeStage {
        TransactionStage eventType(String eventType);

        Builder from(TransactionWebhook other);
    }

    public interface TransactionStage {
        _FinalStage transaction(TransactionResponse transaction);
    }

    public interface _FinalStage {
        TransactionWebhook build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventTypeStage, TransactionStage, _FinalStage {
        private String eventType;

        private TransactionResponse transaction;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransactionWebhook other) {
            eventType(other.getEventType());
            transaction(other.getTransaction());
            return this;
        }

        @java.lang.Override
        @JsonSetter("eventType")
        public TransactionStage eventType(String eventType) {
            this.eventType = eventType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("transaction")
        public _FinalStage transaction(TransactionResponse transaction) {
            this.transaction = transaction;
            return this;
        }

        @java.lang.Override
        public TransactionWebhook build() {
            return new TransactionWebhook(eventType, transaction, additionalProperties);
        }
    }
}
