/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.webhooks.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentgatewaytypes.types.ValidatePaymentGatewayResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentGatewayValidationJobCompletedWebhook.Builder.class)
public final class PaymentGatewayValidationJobCompletedWebhook {
    private final String eventType;

    private final String jobId;

    private final ValidatePaymentGatewayResponse data;

    private final Map<String, Object> additionalProperties;

    private PaymentGatewayValidationJobCompletedWebhook(
            String eventType,
            String jobId,
            ValidatePaymentGatewayResponse data,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.jobId = jobId;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of the event.
     */
    @JsonProperty("eventType")
    public String getEventType() {
        return eventType;
    }

    /**
     * @return The ID of the payment gateway validation job that completed.
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    @JsonProperty("data")
    public ValidatePaymentGatewayResponse getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentGatewayValidationJobCompletedWebhook
                && equalTo((PaymentGatewayValidationJobCompletedWebhook) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentGatewayValidationJobCompletedWebhook other) {
        return eventType.equals(other.eventType) && jobId.equals(other.jobId) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventType, this.jobId, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventTypeStage builder() {
        return new Builder();
    }

    public interface EventTypeStage {
        /**
         * <p>The type of the event.</p>
         */
        JobIdStage eventType(@NotNull String eventType);

        Builder from(PaymentGatewayValidationJobCompletedWebhook other);
    }

    public interface JobIdStage {
        /**
         * <p>The ID of the payment gateway validation job that completed.</p>
         */
        DataStage jobId(@NotNull String jobId);
    }

    public interface DataStage {
        _FinalStage data(@NotNull ValidatePaymentGatewayResponse data);
    }

    public interface _FinalStage {
        PaymentGatewayValidationJobCompletedWebhook build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventTypeStage, JobIdStage, DataStage, _FinalStage {
        private String eventType;

        private String jobId;

        private ValidatePaymentGatewayResponse data;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentGatewayValidationJobCompletedWebhook other) {
            eventType(other.getEventType());
            jobId(other.getJobId());
            data(other.getData());
            return this;
        }

        /**
         * <p>The type of the event.</p>
         * <p>The type of the event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventType")
        public JobIdStage eventType(@NotNull String eventType) {
            this.eventType = Objects.requireNonNull(eventType, "eventType must not be null");
            return this;
        }

        /**
         * <p>The ID of the payment gateway validation job that completed.</p>
         * <p>The ID of the payment gateway validation job that completed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public DataStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("data")
        public _FinalStage data(@NotNull ValidatePaymentGatewayResponse data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        @java.lang.Override
        public PaymentGatewayValidationJobCompletedWebhook build() {
            return new PaymentGatewayValidationJobCompletedWebhook(eventType, jobId, data, additionalProperties);
        }
    }
}
