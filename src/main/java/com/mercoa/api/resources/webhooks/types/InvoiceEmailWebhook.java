/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.webhooks.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InvoiceEmailWebhook.Builder.class)
public final class InvoiceEmailWebhook {
    private final String eventType;

    private final Optional<InvoiceResponse> invoice;

    private final Optional<String> existingInvoiceId;

    private final Map<String, Object> additionalProperties;

    private InvoiceEmailWebhook(
            String eventType,
            Optional<InvoiceResponse> invoice,
            Optional<String> existingInvoiceId,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.invoice = invoice;
        this.existingInvoiceId = existingInvoiceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventType")
    public String getEventType() {
        return eventType;
    }

    /**
     * @return If an invoice was created from the email, this will be present.
     */
    @JsonProperty("invoice")
    public Optional<InvoiceResponse> getInvoice() {
        return invoice;
    }

    /**
     * @return If an existing invoice already exists for the email, this will be present.
     */
    @JsonProperty("existingInvoiceId")
    public Optional<String> getExistingInvoiceId() {
        return existingInvoiceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceEmailWebhook && equalTo((InvoiceEmailWebhook) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceEmailWebhook other) {
        return eventType.equals(other.eventType)
                && invoice.equals(other.invoice)
                && existingInvoiceId.equals(other.existingInvoiceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventType, this.invoice, this.existingInvoiceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventTypeStage builder() {
        return new Builder();
    }

    public interface EventTypeStage {
        _FinalStage eventType(String eventType);

        Builder from(InvoiceEmailWebhook other);
    }

    public interface _FinalStage {
        InvoiceEmailWebhook build();

        _FinalStage invoice(Optional<InvoiceResponse> invoice);

        _FinalStage invoice(InvoiceResponse invoice);

        _FinalStage existingInvoiceId(Optional<String> existingInvoiceId);

        _FinalStage existingInvoiceId(String existingInvoiceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventTypeStage, _FinalStage {
        private String eventType;

        private Optional<String> existingInvoiceId = Optional.empty();

        private Optional<InvoiceResponse> invoice = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvoiceEmailWebhook other) {
            eventType(other.getEventType());
            invoice(other.getInvoice());
            existingInvoiceId(other.getExistingInvoiceId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("eventType")
        public _FinalStage eventType(String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * <p>If an existing invoice already exists for the email, this will be present.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage existingInvoiceId(String existingInvoiceId) {
            this.existingInvoiceId = Optional.of(existingInvoiceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "existingInvoiceId", nulls = Nulls.SKIP)
        public _FinalStage existingInvoiceId(Optional<String> existingInvoiceId) {
            this.existingInvoiceId = existingInvoiceId;
            return this;
        }

        /**
         * <p>If an invoice was created from the email, this will be present.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoice(InvoiceResponse invoice) {
            this.invoice = Optional.of(invoice);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoice", nulls = Nulls.SKIP)
        public _FinalStage invoice(Optional<InvoiceResponse> invoice) {
            this.invoice = invoice;
            return this;
        }

        @java.lang.Override
        public InvoiceEmailWebhook build() {
            return new InvoiceEmailWebhook(eventType, invoice, existingInvoiceId, additionalProperties);
        }
    }
}
