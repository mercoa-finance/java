/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.contract;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.contract.requests.ApplyContractFeedbackRequest;
import com.mercoa.api.resources.contract.requests.ApplyInvoiceFeedbackRequest;
import com.mercoa.api.resources.contract.requests.FindContractRequest;
import com.mercoa.api.resources.contract.requests.PreviewContractInvoicesRequest;
import com.mercoa.api.resources.contracttypes.types.ContractCreateRequest;
import com.mercoa.api.resources.contracttypes.types.ContractResponse;
import com.mercoa.api.resources.contracttypes.types.ContractUpdateRequest;
import com.mercoa.api.resources.contracttypes.types.FindContractResponse;
import com.mercoa.api.resources.contracttypes.types.GenerateContractAsyncJobResponse;
import com.mercoa.api.resources.contracttypes.types.GenerateContractAsyncResponse;
import com.mercoa.api.resources.contracttypes.types.GenerateContractRequest;
import com.mercoa.api.resources.contracttypes.types.GenerateContractResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncContractClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawContractClient rawClient;

    public AsyncContractClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawContractClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawContractClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Generate a new contract object from a Base64 encoded PDF of a contract. This endpoint will block until the contract is generated.
     */
    public CompletableFuture<GenerateContractResponse> generateContract(GenerateContractRequest request) {
        return this.rawClient.generateContract(request).thenApply(response -> response.body());
    }

    /**
     * Generate a new contract object from a Base64 encoded PDF of a contract. This endpoint will block until the contract is generated.
     */
    public CompletableFuture<GenerateContractResponse> generateContract(
            GenerateContractRequest request, RequestOptions requestOptions) {
        return this.rawClient.generateContract(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a new contract object from a Base64 encoded PDF of a contract. This endpoint will return immediately and the contract will be generated asynchronously.
     */
    public CompletableFuture<GenerateContractAsyncResponse> generateContractRunAsync(GenerateContractRequest request) {
        return this.rawClient.generateContractRunAsync(request).thenApply(response -> response.body());
    }

    /**
     * Generate a new contract object from a Base64 encoded PDF of a contract. This endpoint will return immediately and the contract will be generated asynchronously.
     */
    public CompletableFuture<GenerateContractAsyncResponse> generateContractRunAsync(
            GenerateContractRequest request, RequestOptions requestOptions) {
        return this.rawClient.generateContractRunAsync(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get the status and results of an asynchronous contract generation job.
     */
    public CompletableFuture<GenerateContractAsyncJobResponse> generateContractGetAsync(String jobId) {
        return this.rawClient.generateContractGetAsync(jobId).thenApply(response -> response.body());
    }

    /**
     * Get the status and results of an asynchronous contract generation job.
     */
    public CompletableFuture<GenerateContractAsyncJobResponse> generateContractGetAsync(
            String jobId, RequestOptions requestOptions) {
        return this.rawClient.generateContractGetAsync(jobId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate previews of the invoices that will be created from the provided contract.
     */
    public CompletableFuture<List<InvoiceResponse>> previewInvoices(PreviewContractInvoicesRequest request) {
        return this.rawClient.previewInvoices(request).thenApply(response -> response.body());
    }

    /**
     * Generate previews of the invoices that will be created from the provided contract.
     */
    public CompletableFuture<List<InvoiceResponse>> previewInvoices(
            PreviewContractInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.previewInvoices(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Apply feedback to a contract, generating an updated contract object.  NOTE: This works by re-extracting the contract details with the provided feedback in mind.
     */
    public CompletableFuture<ContractResponse> applyContractFeedback(
            String contractId, ApplyContractFeedbackRequest request) {
        return this.rawClient.applyContractFeedback(contractId, request).thenApply(response -> response.body());
    }

    /**
     * Apply feedback to a contract, generating an updated contract object.  NOTE: This works by re-extracting the contract details with the provided feedback in mind.
     */
    public CompletableFuture<ContractResponse> applyContractFeedback(
            String contractId, ApplyContractFeedbackRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .applyContractFeedback(contractId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Apply feedback to an invoice, generating an updated invoice object.
     */
    public CompletableFuture<InvoiceResponse> applyInvoiceFeedback(
            String contractId, ApplyInvoiceFeedbackRequest request) {
        return this.rawClient.applyInvoiceFeedback(contractId, request).thenApply(response -> response.body());
    }

    /**
     * Apply feedback to an invoice, generating an updated invoice object.
     */
    public CompletableFuture<InvoiceResponse> applyInvoiceFeedback(
            String contractId, ApplyInvoiceFeedbackRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .applyInvoiceFeedback(contractId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Search contracts for all entities in the organization
     */
    public CompletableFuture<FindContractResponse> find() {
        return this.rawClient.find().thenApply(response -> response.body());
    }

    /**
     * Search contracts for all entities in the organization
     */
    public CompletableFuture<FindContractResponse> find(FindContractRequest request) {
        return this.rawClient.find(request).thenApply(response -> response.body());
    }

    /**
     * Search contracts for all entities in the organization
     */
    public CompletableFuture<FindContractResponse> find(FindContractRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> create(ContractCreateRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> create(ContractCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> get(String contractId) {
        return this.rawClient.get(contractId).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> get(String contractId, RequestOptions requestOptions) {
        return this.rawClient.get(contractId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> update(String contractId) {
        return this.rawClient.update(contractId).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> update(String contractId, ContractUpdateRequest request) {
        return this.rawClient.update(contractId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ContractResponse> update(
            String contractId, ContractUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(contractId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String contractId) {
        return this.rawClient.delete(contractId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String contractId, RequestOptions requestOptions) {
        return this.rawClient.delete(contractId, requestOptions).thenApply(response -> response.body());
    }
}
