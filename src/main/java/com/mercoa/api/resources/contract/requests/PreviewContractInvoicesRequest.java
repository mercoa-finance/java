/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.contract.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.contracttypes.types.ContractCreateRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PreviewContractInvoicesRequest.Builder.class)
public final class PreviewContractInvoicesRequest {
    private final ContractCreateRequest contract;

    private final List<Integer> invoiceIndexes;

    private final Map<String, Object> additionalProperties;

    private PreviewContractInvoicesRequest(
            ContractCreateRequest contract, List<Integer> invoiceIndexes, Map<String, Object> additionalProperties) {
        this.contract = contract;
        this.invoiceIndexes = invoiceIndexes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Contract to preview invoice creation for
     */
    @JsonProperty("contract")
    public ContractCreateRequest getContract() {
        return contract;
    }

    /**
     * @return Indexes of the invoices to generate from each recurrence (e.g. [0, 1, 2] for the first three invoices).  Note that contracts with multiple recurrences will generate more preview invoices, and invalid invoice indexes will be ignored silently. For example, [0, 1, 2] on a contract with 2 recurrences will generate at most 6 invoices, and potentially fewer if some of indexes are out of bounds for a recurrence.
     */
    @JsonProperty("invoiceIndexes")
    public List<Integer> getInvoiceIndexes() {
        return invoiceIndexes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PreviewContractInvoicesRequest && equalTo((PreviewContractInvoicesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PreviewContractInvoicesRequest other) {
        return contract.equals(other.contract) && invoiceIndexes.equals(other.invoiceIndexes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contract, this.invoiceIndexes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContractStage builder() {
        return new Builder();
    }

    public interface ContractStage {
        _FinalStage contract(ContractCreateRequest contract);

        Builder from(PreviewContractInvoicesRequest other);
    }

    public interface _FinalStage {
        PreviewContractInvoicesRequest build();

        _FinalStage invoiceIndexes(List<Integer> invoiceIndexes);

        _FinalStage addInvoiceIndexes(Integer invoiceIndexes);

        _FinalStage addAllInvoiceIndexes(List<Integer> invoiceIndexes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContractStage, _FinalStage {
        private ContractCreateRequest contract;

        private List<Integer> invoiceIndexes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PreviewContractInvoicesRequest other) {
            contract(other.getContract());
            invoiceIndexes(other.getInvoiceIndexes());
            return this;
        }

        /**
         * <p>Contract to preview invoice creation for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("contract")
        public _FinalStage contract(ContractCreateRequest contract) {
            this.contract = contract;
            return this;
        }

        /**
         * <p>Indexes of the invoices to generate from each recurrence (e.g. [0, 1, 2] for the first three invoices).  Note that contracts with multiple recurrences will generate more preview invoices, and invalid invoice indexes will be ignored silently. For example, [0, 1, 2] on a contract with 2 recurrences will generate at most 6 invoices, and potentially fewer if some of indexes are out of bounds for a recurrence.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllInvoiceIndexes(List<Integer> invoiceIndexes) {
            this.invoiceIndexes.addAll(invoiceIndexes);
            return this;
        }

        /**
         * <p>Indexes of the invoices to generate from each recurrence (e.g. [0, 1, 2] for the first three invoices).  Note that contracts with multiple recurrences will generate more preview invoices, and invalid invoice indexes will be ignored silently. For example, [0, 1, 2] on a contract with 2 recurrences will generate at most 6 invoices, and potentially fewer if some of indexes are out of bounds for a recurrence.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addInvoiceIndexes(Integer invoiceIndexes) {
            this.invoiceIndexes.add(invoiceIndexes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceIndexes", nulls = Nulls.SKIP)
        public _FinalStage invoiceIndexes(List<Integer> invoiceIndexes) {
            this.invoiceIndexes.clear();
            this.invoiceIndexes.addAll(invoiceIndexes);
            return this;
        }

        @java.lang.Override
        public PreviewContractInvoicesRequest build() {
            return new PreviewContractInvoicesRequest(contract, invoiceIndexes, additionalProperties);
        }
    }
}
