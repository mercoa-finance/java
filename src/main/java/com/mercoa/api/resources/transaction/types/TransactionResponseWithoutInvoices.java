/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.transaction.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class TransactionResponseWithoutInvoices {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private TransactionResponseWithoutInvoices(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static TransactionResponseWithoutInvoices bankAccountToBankAccount(TransactionResponseAchBase value) {
        return new TransactionResponseWithoutInvoices(new BankAccountToBankAccountValue(value));
    }

    public static TransactionResponseWithoutInvoices bankAccountToMailedCheck(TransactionResponseCheckBase value) {
        return new TransactionResponseWithoutInvoices(new BankAccountToMailedCheckValue(value));
    }

    public static TransactionResponseWithoutInvoices bankAccountToPrintedCheck(TransactionResponseCheckBase value) {
        return new TransactionResponseWithoutInvoices(new BankAccountToPrintedCheckValue(value));
    }

    public static TransactionResponseWithoutInvoices bankAccountToWallet(TransactionResponseAchBase value) {
        return new TransactionResponseWithoutInvoices(new BankAccountToWalletValue(value));
    }

    public static TransactionResponseWithoutInvoices cardToWallet(TransactionResponseBase value) {
        return new TransactionResponseWithoutInvoices(new CardToWalletValue(value));
    }

    public static TransactionResponseWithoutInvoices walletToBankAccount(TransactionResponseAchBase value) {
        return new TransactionResponseWithoutInvoices(new WalletToBankAccountValue(value));
    }

    public static TransactionResponseWithoutInvoices custom(TransactionResponseBase value) {
        return new TransactionResponseWithoutInvoices(new CustomValue(value));
    }

    public static TransactionResponseWithoutInvoices offPlatform(TransactionResponseBase value) {
        return new TransactionResponseWithoutInvoices(new OffPlatformValue(value));
    }

    public boolean isBankAccountToBankAccount() {
        return value instanceof BankAccountToBankAccountValue;
    }

    public boolean isBankAccountToMailedCheck() {
        return value instanceof BankAccountToMailedCheckValue;
    }

    public boolean isBankAccountToPrintedCheck() {
        return value instanceof BankAccountToPrintedCheckValue;
    }

    public boolean isBankAccountToWallet() {
        return value instanceof BankAccountToWalletValue;
    }

    public boolean isCardToWallet() {
        return value instanceof CardToWalletValue;
    }

    public boolean isWalletToBankAccount() {
        return value instanceof WalletToBankAccountValue;
    }

    public boolean isCustom() {
        return value instanceof CustomValue;
    }

    public boolean isOffPlatform() {
        return value instanceof OffPlatformValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<TransactionResponseAchBase> getBankAccountToBankAccount() {
        if (isBankAccountToBankAccount()) {
            return Optional.of(((BankAccountToBankAccountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseCheckBase> getBankAccountToMailedCheck() {
        if (isBankAccountToMailedCheck()) {
            return Optional.of(((BankAccountToMailedCheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseCheckBase> getBankAccountToPrintedCheck() {
        if (isBankAccountToPrintedCheck()) {
            return Optional.of(((BankAccountToPrintedCheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseAchBase> getBankAccountToWallet() {
        if (isBankAccountToWallet()) {
            return Optional.of(((BankAccountToWalletValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseBase> getCardToWallet() {
        if (isCardToWallet()) {
            return Optional.of(((CardToWalletValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseAchBase> getWalletToBankAccount() {
        if (isWalletToBankAccount()) {
            return Optional.of(((WalletToBankAccountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseBase> getCustom() {
        if (isCustom()) {
            return Optional.of(((CustomValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransactionResponseBase> getOffPlatform() {
        if (isOffPlatform()) {
            return Optional.of(((OffPlatformValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitBankAccountToBankAccount(TransactionResponseAchBase bankAccountToBankAccount);

        T visitBankAccountToMailedCheck(TransactionResponseCheckBase bankAccountToMailedCheck);

        T visitBankAccountToPrintedCheck(TransactionResponseCheckBase bankAccountToPrintedCheck);

        T visitBankAccountToWallet(TransactionResponseAchBase bankAccountToWallet);

        T visitCardToWallet(TransactionResponseBase cardToWallet);

        T visitWalletToBankAccount(TransactionResponseAchBase walletToBankAccount);

        T visitCustom(TransactionResponseBase custom);

        T visitOffPlatform(TransactionResponseBase offPlatform);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(BankAccountToBankAccountValue.class),
        @JsonSubTypes.Type(BankAccountToMailedCheckValue.class),
        @JsonSubTypes.Type(BankAccountToPrintedCheckValue.class),
        @JsonSubTypes.Type(BankAccountToWalletValue.class),
        @JsonSubTypes.Type(CardToWalletValue.class),
        @JsonSubTypes.Type(WalletToBankAccountValue.class),
        @JsonSubTypes.Type(CustomValue.class),
        @JsonSubTypes.Type(OffPlatformValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("bankAccountToBankAccount")
    @JsonIgnoreProperties("type")
    private static final class BankAccountToBankAccountValue implements Value {
        @JsonUnwrapped
        private TransactionResponseAchBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BankAccountToBankAccountValue() {}

        private BankAccountToBankAccountValue(TransactionResponseAchBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBankAccountToBankAccount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BankAccountToBankAccountValue && equalTo((BankAccountToBankAccountValue) other);
        }

        private boolean equalTo(BankAccountToBankAccountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("bankAccountToMailedCheck")
    @JsonIgnoreProperties("type")
    private static final class BankAccountToMailedCheckValue implements Value {
        @JsonUnwrapped
        private TransactionResponseCheckBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BankAccountToMailedCheckValue() {}

        private BankAccountToMailedCheckValue(TransactionResponseCheckBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBankAccountToMailedCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BankAccountToMailedCheckValue && equalTo((BankAccountToMailedCheckValue) other);
        }

        private boolean equalTo(BankAccountToMailedCheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("bankAccountToPrintedCheck")
    @JsonIgnoreProperties("type")
    private static final class BankAccountToPrintedCheckValue implements Value {
        @JsonUnwrapped
        private TransactionResponseCheckBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BankAccountToPrintedCheckValue() {}

        private BankAccountToPrintedCheckValue(TransactionResponseCheckBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBankAccountToPrintedCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BankAccountToPrintedCheckValue && equalTo((BankAccountToPrintedCheckValue) other);
        }

        private boolean equalTo(BankAccountToPrintedCheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("bankAccountToWallet")
    @JsonIgnoreProperties("type")
    private static final class BankAccountToWalletValue implements Value {
        @JsonUnwrapped
        private TransactionResponseAchBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BankAccountToWalletValue() {}

        private BankAccountToWalletValue(TransactionResponseAchBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBankAccountToWallet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BankAccountToWalletValue && equalTo((BankAccountToWalletValue) other);
        }

        private boolean equalTo(BankAccountToWalletValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("cardToWallet")
    @JsonIgnoreProperties("type")
    private static final class CardToWalletValue implements Value {
        @JsonUnwrapped
        private TransactionResponseBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CardToWalletValue() {}

        private CardToWalletValue(TransactionResponseBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCardToWallet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CardToWalletValue && equalTo((CardToWalletValue) other);
        }

        private boolean equalTo(CardToWalletValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("walletToBankAccount")
    @JsonIgnoreProperties("type")
    private static final class WalletToBankAccountValue implements Value {
        @JsonUnwrapped
        private TransactionResponseAchBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private WalletToBankAccountValue() {}

        private WalletToBankAccountValue(TransactionResponseAchBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitWalletToBankAccount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof WalletToBankAccountValue && equalTo((WalletToBankAccountValue) other);
        }

        private boolean equalTo(WalletToBankAccountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("custom")
    @JsonIgnoreProperties("type")
    private static final class CustomValue implements Value {
        @JsonUnwrapped
        private TransactionResponseBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomValue() {}

        private CustomValue(TransactionResponseBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustom(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomValue && equalTo((CustomValue) other);
        }

        private boolean equalTo(CustomValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("offPlatform")
    @JsonIgnoreProperties("type")
    private static final class OffPlatformValue implements Value {
        @JsonUnwrapped
        private TransactionResponseBase value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OffPlatformValue() {}

        private OffPlatformValue(TransactionResponseBase value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOffPlatform(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OffPlatformValue && equalTo((OffPlatformValue) other);
        }

        private boolean equalTo(OffPlatformValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "TransactionResponseWithoutInvoices{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
