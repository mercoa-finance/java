/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygrouptypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityGroupRequest.Builder.class)
public final class EntityGroupRequest {
    private final List<String> entityIds;

    private final Optional<String> foreignId;

    private final Optional<String> name;

    private final Optional<String> emailToName;

    private final Map<String, Object> additionalProperties;

    private EntityGroupRequest(
            List<String> entityIds,
            Optional<String> foreignId,
            Optional<String> name,
            Optional<String> emailToName,
            Map<String, Object> additionalProperties) {
        this.entityIds = entityIds;
        this.foreignId = foreignId;
        this.name = name;
        this.emailToName = emailToName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("entityIds")
    public List<String> getEntityIds() {
        return entityIds;
    }

    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("emailToName")
    public Optional<String> getEmailToName() {
        return emailToName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityGroupRequest && equalTo((EntityGroupRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityGroupRequest other) {
        return entityIds.equals(other.entityIds)
                && foreignId.equals(other.foreignId)
                && name.equals(other.name)
                && emailToName.equals(other.emailToName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entityIds, this.foreignId, this.name, this.emailToName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> entityIds = new ArrayList<>();

        private Optional<String> foreignId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> emailToName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityGroupRequest other) {
            entityIds(other.getEntityIds());
            foreignId(other.getForeignId());
            name(other.getName());
            emailToName(other.getEmailToName());
            return this;
        }

        @JsonSetter(value = "entityIds", nulls = Nulls.SKIP)
        public Builder entityIds(List<String> entityIds) {
            this.entityIds.clear();
            this.entityIds.addAll(entityIds);
            return this;
        }

        public Builder addEntityIds(String entityIds) {
            this.entityIds.add(entityIds);
            return this;
        }

        public Builder addAllEntityIds(List<String> entityIds) {
            this.entityIds.addAll(entityIds);
            return this;
        }

        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "emailToName", nulls = Nulls.SKIP)
        public Builder emailToName(Optional<String> emailToName) {
            this.emailToName = emailToName;
            return this;
        }

        public Builder emailToName(String emailToName) {
            this.emailToName = Optional.ofNullable(emailToName);
            return this;
        }

        public EntityGroupRequest build() {
            return new EntityGroupRequest(entityIds, foreignId, name, emailToName, additionalProperties);
        }
    }
}
