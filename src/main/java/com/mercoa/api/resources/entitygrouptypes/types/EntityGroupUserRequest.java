/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygrouptypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EntityGroupUserRequest.Builder.class)
public final class EntityGroupUserRequest {
    private final String foreignId;

    private final Optional<String> email;

    private final Optional<String> name;

    private final Optional<List<EntityGroupUserEntityRequest>> entities;

    private final Map<String, Object> additionalProperties;

    private EntityGroupUserRequest(
            String foreignId,
            Optional<String> email,
            Optional<String> name,
            Optional<List<EntityGroupUserEntityRequest>> entities,
            Map<String, Object> additionalProperties) {
        this.foreignId = foreignId;
        this.email = email;
        this.name = name;
        this.entities = entities;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID used to identify this user in your system. This is a required field and needs to be unique for all users in the group.
     */
    @JsonProperty("foreignId")
    public String getForeignId() {
        return foreignId;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return List of roles per entity. By default, the user will have no roles.
     */
    @JsonProperty("entities")
    public Optional<List<EntityGroupUserEntityRequest>> getEntities() {
        return entities;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityGroupUserRequest && equalTo((EntityGroupUserRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityGroupUserRequest other) {
        return foreignId.equals(other.foreignId)
                && email.equals(other.email)
                && name.equals(other.name)
                && entities.equals(other.entities);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.foreignId, this.email, this.name, this.entities);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ForeignIdStage builder() {
        return new Builder();
    }

    public interface ForeignIdStage {
        _FinalStage foreignId(String foreignId);

        Builder from(EntityGroupUserRequest other);
    }

    public interface _FinalStage {
        EntityGroupUserRequest build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage entities(Optional<List<EntityGroupUserEntityRequest>> entities);

        _FinalStage entities(List<EntityGroupUserEntityRequest> entities);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ForeignIdStage, _FinalStage {
        private String foreignId;

        private Optional<List<EntityGroupUserEntityRequest>> entities = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> email = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EntityGroupUserRequest other) {
            foreignId(other.getForeignId());
            email(other.getEmail());
            name(other.getName());
            entities(other.getEntities());
            return this;
        }

        /**
         * <p>The ID used to identify this user in your system. This is a required field and needs to be unique for all users in the group.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("foreignId")
        public _FinalStage foreignId(String foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        /**
         * <p>List of roles per entity. By default, the user will have no roles.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage entities(List<EntityGroupUserEntityRequest> entities) {
            this.entities = Optional.of(entities);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "entities", nulls = Nulls.SKIP)
        public _FinalStage entities(Optional<List<EntityGroupUserEntityRequest>> entities) {
            this.entities = entities;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public EntityGroupUserRequest build() {
            return new EntityGroupUserRequest(foreignId, email, name, entities, additionalProperties);
        }
    }
}
