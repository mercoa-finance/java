/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitygrouptypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityGroupUserSyncRequest.Builder.class)
public final class EntityGroupUserSyncRequest {
    private final Optional<String> copyUsersFrom;

    private final Optional<List<String>> filterRoles;

    private final Optional<Boolean> addUsers;

    private final Optional<Boolean> removeUsers;

    private final Map<String, Object> additionalProperties;

    private EntityGroupUserSyncRequest(
            Optional<String> copyUsersFrom,
            Optional<List<String>> filterRoles,
            Optional<Boolean> addUsers,
            Optional<Boolean> removeUsers,
            Map<String, Object> additionalProperties) {
        this.copyUsersFrom = copyUsersFrom;
        this.filterRoles = filterRoles;
        this.addUsers = addUsers;
        this.removeUsers = removeUsers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Entity ID / foreign ID of an entity currently in the group to copy users and roles from.
     * If not provided, users will be synced from the entity with the most users that has been updated most recently.
     */
    @JsonProperty("copyUsersFrom")
    public Optional<String> getCopyUsersFrom() {
        return copyUsersFrom;
    }

    /**
     * @return List of roles to filter users by. If not provided, all users will be copied. If provided, only users with the provided roles will be copied.
     */
    @JsonProperty("filterRoles")
    public Optional<List<String>> getFilterRoles() {
        return filterRoles;
    }

    /**
     * @return If true, users will be added to entities if they are not found in the copyUsersFrom entity. Default is true.
     */
    @JsonProperty("addUsers")
    public Optional<Boolean> getAddUsers() {
        return addUsers;
    }

    /**
     * @return If true, users will be removed from entities if they are not found in the copyUsersFrom entity. Default is false.
     */
    @JsonProperty("removeUsers")
    public Optional<Boolean> getRemoveUsers() {
        return removeUsers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityGroupUserSyncRequest && equalTo((EntityGroupUserSyncRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityGroupUserSyncRequest other) {
        return copyUsersFrom.equals(other.copyUsersFrom)
                && filterRoles.equals(other.filterRoles)
                && addUsers.equals(other.addUsers)
                && removeUsers.equals(other.removeUsers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.copyUsersFrom, this.filterRoles, this.addUsers, this.removeUsers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> copyUsersFrom = Optional.empty();

        private Optional<List<String>> filterRoles = Optional.empty();

        private Optional<Boolean> addUsers = Optional.empty();

        private Optional<Boolean> removeUsers = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityGroupUserSyncRequest other) {
            copyUsersFrom(other.getCopyUsersFrom());
            filterRoles(other.getFilterRoles());
            addUsers(other.getAddUsers());
            removeUsers(other.getRemoveUsers());
            return this;
        }

        @JsonSetter(value = "copyUsersFrom", nulls = Nulls.SKIP)
        public Builder copyUsersFrom(Optional<String> copyUsersFrom) {
            this.copyUsersFrom = copyUsersFrom;
            return this;
        }

        public Builder copyUsersFrom(String copyUsersFrom) {
            this.copyUsersFrom = Optional.ofNullable(copyUsersFrom);
            return this;
        }

        @JsonSetter(value = "filterRoles", nulls = Nulls.SKIP)
        public Builder filterRoles(Optional<List<String>> filterRoles) {
            this.filterRoles = filterRoles;
            return this;
        }

        public Builder filterRoles(List<String> filterRoles) {
            this.filterRoles = Optional.ofNullable(filterRoles);
            return this;
        }

        @JsonSetter(value = "addUsers", nulls = Nulls.SKIP)
        public Builder addUsers(Optional<Boolean> addUsers) {
            this.addUsers = addUsers;
            return this;
        }

        public Builder addUsers(Boolean addUsers) {
            this.addUsers = Optional.ofNullable(addUsers);
            return this;
        }

        @JsonSetter(value = "removeUsers", nulls = Nulls.SKIP)
        public Builder removeUsers(Optional<Boolean> removeUsers) {
            this.removeUsers = removeUsers;
            return this;
        }

        public Builder removeUsers(Boolean removeUsers) {
            this.removeUsers = Optional.ofNullable(removeUsers);
            return this;
        }

        public EntityGroupUserSyncRequest build() {
            return new EntityGroupUserSyncRequest(
                    copyUsersFrom, filterRoles, addUsers, removeUsers, additionalProperties);
        }
    }
}
