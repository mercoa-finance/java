/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.vendorcredittypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorCreditRequest.Builder.class)
public final class VendorCreditRequest {
    private final double totalAmount;

    private final CurrencyCode currency;

    private final Optional<String> note;

    private final Map<String, Object> additionalProperties;

    private VendorCreditRequest(
            double totalAmount,
            CurrencyCode currency,
            Optional<String> note,
            Map<String, Object> additionalProperties) {
        this.totalAmount = totalAmount;
        this.currency = currency;
        this.note = note;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total amount of the vendor credit in major units
     */
    @JsonProperty("totalAmount")
    public double getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public CurrencyCode getCurrency() {
        return currency;
    }

    /**
     * @return An optional note to attach to the vendor credit
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorCreditRequest && equalTo((VendorCreditRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorCreditRequest other) {
        return totalAmount == other.totalAmount && currency.equals(other.currency) && note.equals(other.note);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.totalAmount, this.currency, this.note);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalAmountStage builder() {
        return new Builder();
    }

    public interface TotalAmountStage {
        CurrencyStage totalAmount(double totalAmount);

        Builder from(VendorCreditRequest other);
    }

    public interface CurrencyStage {
        _FinalStage currency(@NotNull CurrencyCode currency);
    }

    public interface _FinalStage {
        VendorCreditRequest build();

        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalAmountStage, CurrencyStage, _FinalStage {
        private double totalAmount;

        private CurrencyCode currency;

        private Optional<String> note = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VendorCreditRequest other) {
            totalAmount(other.getTotalAmount());
            currency(other.getCurrency());
            note(other.getNote());
            return this;
        }

        /**
         * <p>Total amount of the vendor credit in major units</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalAmount")
        public CurrencyStage totalAmount(double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("currency")
        public _FinalStage currency(@NotNull CurrencyCode currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        /**
         * <p>An optional note to attach to the vendor credit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        @java.lang.Override
        public VendorCreditRequest build() {
            return new VendorCreditRequest(totalAmount, currency, note, additionalProperties);
        }
    }
}
