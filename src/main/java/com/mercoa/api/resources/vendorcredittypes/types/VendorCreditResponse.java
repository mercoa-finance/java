/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.vendorcredittypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorCreditResponse.Builder.class)
public final class VendorCreditResponse {
    private final String id;

    private final Optional<Double> totalAmount;

    private final Optional<Double> remainingAmount;

    private final Optional<CurrencyCode> currency;

    private final String vendorId;

    private final String payerId;

    private final Optional<String> creatorEntityId;

    private final Optional<String> note;

    private final Optional<List<String>> invoiceIds;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private VendorCreditResponse(
            String id,
            Optional<Double> totalAmount,
            Optional<Double> remainingAmount,
            Optional<CurrencyCode> currency,
            String vendorId,
            String payerId,
            Optional<String> creatorEntityId,
            Optional<String> note,
            Optional<List<String>> invoiceIds,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.totalAmount = totalAmount;
        this.remainingAmount = remainingAmount;
        this.currency = currency;
        this.vendorId = vendorId;
        this.payerId = payerId;
        this.creatorEntityId = creatorEntityId;
        this.note = note;
        this.invoiceIds = invoiceIds;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Total issued amount of the vendor credit in major units
     */
    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Remaining usable amount in the vendor credit in major units
     */
    @JsonProperty("remainingAmount")
    public Optional<Double> getRemainingAmount() {
        return remainingAmount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return ID of the vendor the vendor credit may be used for
     */
    @JsonProperty("vendorId")
    public String getVendorId() {
        return vendorId;
    }

    /**
     * @return ID of the payer who may use the vendor credit
     */
    @JsonProperty("payerId")
    public String getPayerId() {
        return payerId;
    }

    /**
     * @return ID of the entity that created this vendor credit
     */
    @JsonProperty("creatorEntityId")
    public Optional<String> getCreatorEntityId() {
        return creatorEntityId;
    }

    /**
     * @return An optional note to attach to the vendor credit
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    /**
     * @return The IDs of the invoices that this vendor credit has been applied to
     */
    @JsonProperty("invoiceIds")
    public Optional<List<String>> getInvoiceIds() {
        return invoiceIds;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorCreditResponse && equalTo((VendorCreditResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorCreditResponse other) {
        return id.equals(other.id)
                && totalAmount.equals(other.totalAmount)
                && remainingAmount.equals(other.remainingAmount)
                && currency.equals(other.currency)
                && vendorId.equals(other.vendorId)
                && payerId.equals(other.payerId)
                && creatorEntityId.equals(other.creatorEntityId)
                && note.equals(other.note)
                && invoiceIds.equals(other.invoiceIds)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.totalAmount,
                this.remainingAmount,
                this.currency,
                this.vendorId,
                this.payerId,
                this.creatorEntityId,
                this.note,
                this.invoiceIds,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        VendorIdStage id(@NotNull String id);

        Builder from(VendorCreditResponse other);
    }

    public interface VendorIdStage {
        PayerIdStage vendorId(@NotNull String vendorId);
    }

    public interface PayerIdStage {
        CreatedAtStage payerId(@NotNull String payerId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        VendorCreditResponse build();

        _FinalStage totalAmount(Optional<Double> totalAmount);

        _FinalStage totalAmount(Double totalAmount);

        _FinalStage remainingAmount(Optional<Double> remainingAmount);

        _FinalStage remainingAmount(Double remainingAmount);

        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        _FinalStage creatorEntityId(Optional<String> creatorEntityId);

        _FinalStage creatorEntityId(String creatorEntityId);

        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage invoiceIds(Optional<List<String>> invoiceIds);

        _FinalStage invoiceIds(List<String> invoiceIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, VendorIdStage, PayerIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String vendorId;

        private String payerId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<List<String>> invoiceIds = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> creatorEntityId = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        private Optional<Double> remainingAmount = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VendorCreditResponse other) {
            id(other.getId());
            totalAmount(other.getTotalAmount());
            remainingAmount(other.getRemainingAmount());
            currency(other.getCurrency());
            vendorId(other.getVendorId());
            payerId(other.getPayerId());
            creatorEntityId(other.getCreatorEntityId());
            note(other.getNote());
            invoiceIds(other.getInvoiceIds());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public VendorIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>ID of the vendor the vendor credit may be used for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("vendorId")
        public PayerIdStage vendorId(@NotNull String vendorId) {
            this.vendorId = Objects.requireNonNull(vendorId, "vendorId must not be null");
            return this;
        }

        /**
         * <p>ID of the payer who may use the vendor credit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payerId")
        public CreatedAtStage payerId(@NotNull String payerId) {
            this.payerId = Objects.requireNonNull(payerId, "payerId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>The IDs of the invoices that this vendor credit has been applied to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceIds(List<String> invoiceIds) {
            this.invoiceIds = Optional.ofNullable(invoiceIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceIds", nulls = Nulls.SKIP)
        public _FinalStage invoiceIds(Optional<List<String>> invoiceIds) {
            this.invoiceIds = invoiceIds;
            return this;
        }

        /**
         * <p>An optional note to attach to the vendor credit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>ID of the entity that created this vendor credit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage creatorEntityId(String creatorEntityId) {
            this.creatorEntityId = Optional.ofNullable(creatorEntityId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creatorEntityId", nulls = Nulls.SKIP)
        public _FinalStage creatorEntityId(Optional<String> creatorEntityId) {
            this.creatorEntityId = creatorEntityId;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Remaining usable amount in the vendor credit in major units</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage remainingAmount(Double remainingAmount) {
            this.remainingAmount = Optional.ofNullable(remainingAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remainingAmount", nulls = Nulls.SKIP)
        public _FinalStage remainingAmount(Optional<Double> remainingAmount) {
            this.remainingAmount = remainingAmount;
            return this;
        }

        /**
         * <p>Total issued amount of the vendor credit in major units</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public _FinalStage totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        @java.lang.Override
        public VendorCreditResponse build() {
            return new VendorCreditResponse(
                    id,
                    totalAmount,
                    remainingAmount,
                    currency,
                    vendorId,
                    payerId,
                    creatorEntityId,
                    note,
                    invoiceIds,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
