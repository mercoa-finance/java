/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.vendorcredittypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculateVendorCreditUsageResponse.Builder.class)
public final class CalculateVendorCreditUsageResponse {
    private final double remainingAmount;

    private final CurrencyCode currency;

    private final List<VendorCreditResponse> vendorCredits;

    private final Map<String, Object> additionalProperties;

    private CalculateVendorCreditUsageResponse(
            double remainingAmount,
            CurrencyCode currency,
            List<VendorCreditResponse> vendorCredits,
            Map<String, Object> additionalProperties) {
        this.remainingAmount = remainingAmount;
        this.currency = currency;
        this.vendorCredits = vendorCredits;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Remaining amount on the invoice after vendor credits are applied in major units.
     */
    @JsonProperty("remainingAmount")
    public double getRemainingAmount() {
        return remainingAmount;
    }

    /**
     * @return Currency code for the amount. Defaults to USD.
     */
    @JsonProperty("currency")
    public CurrencyCode getCurrency() {
        return currency;
    }

    /**
     * @return Vendor credits that will be applied to the invoice. The objects returned represent the states each vendor credit will be in AFTER they are applied to the invoice, not their current states.
     */
    @JsonProperty("vendorCredits")
    public List<VendorCreditResponse> getVendorCredits() {
        return vendorCredits;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculateVendorCreditUsageResponse
                && equalTo((CalculateVendorCreditUsageResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculateVendorCreditUsageResponse other) {
        return remainingAmount == other.remainingAmount
                && currency.equals(other.currency)
                && vendorCredits.equals(other.vendorCredits);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.remainingAmount, this.currency, this.vendorCredits);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RemainingAmountStage builder() {
        return new Builder();
    }

    public interface RemainingAmountStage {
        CurrencyStage remainingAmount(double remainingAmount);

        Builder from(CalculateVendorCreditUsageResponse other);
    }

    public interface CurrencyStage {
        _FinalStage currency(CurrencyCode currency);
    }

    public interface _FinalStage {
        CalculateVendorCreditUsageResponse build();

        _FinalStage vendorCredits(List<VendorCreditResponse> vendorCredits);

        _FinalStage addVendorCredits(VendorCreditResponse vendorCredits);

        _FinalStage addAllVendorCredits(List<VendorCreditResponse> vendorCredits);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RemainingAmountStage, CurrencyStage, _FinalStage {
        private double remainingAmount;

        private CurrencyCode currency;

        private List<VendorCreditResponse> vendorCredits = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculateVendorCreditUsageResponse other) {
            remainingAmount(other.getRemainingAmount());
            currency(other.getCurrency());
            vendorCredits(other.getVendorCredits());
            return this;
        }

        /**
         * <p>Remaining amount on the invoice after vendor credits are applied in major units.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("remainingAmount")
        public CurrencyStage remainingAmount(double remainingAmount) {
            this.remainingAmount = remainingAmount;
            return this;
        }

        /**
         * <p>Currency code for the amount. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("currency")
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>Vendor credits that will be applied to the invoice. The objects returned represent the states each vendor credit will be in AFTER they are applied to the invoice, not their current states.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllVendorCredits(List<VendorCreditResponse> vendorCredits) {
            this.vendorCredits.addAll(vendorCredits);
            return this;
        }

        /**
         * <p>Vendor credits that will be applied to the invoice. The objects returned represent the states each vendor credit will be in AFTER they are applied to the invoice, not their current states.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addVendorCredits(VendorCreditResponse vendorCredits) {
            this.vendorCredits.add(vendorCredits);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "vendorCredits", nulls = Nulls.SKIP)
        public _FinalStage vendorCredits(List<VendorCreditResponse> vendorCredits) {
            this.vendorCredits.clear();
            this.vendorCredits.addAll(vendorCredits);
            return this;
        }

        @java.lang.Override
        public CalculateVendorCreditUsageResponse build() {
            return new CalculateVendorCreditUsageResponse(
                    remainingAmount, currency, vendorCredits, additionalProperties);
        }
    }
}
