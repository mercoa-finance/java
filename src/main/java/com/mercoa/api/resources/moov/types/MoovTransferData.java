/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.moov.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MoovTransferData.Builder.class)
public final class MoovTransferData {
    private final String accountId;

    private final String transferId;

    private final String status;

    private final Object source;

    private final Object destination;

    private final Map<String, Object> additionalProperties;

    private MoovTransferData(
            String accountId,
            String transferId,
            String status,
            Object source,
            Object destination,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.transferId = transferId;
        this.status = status;
        this.source = source;
        this.destination = destination;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Moov account ID
     */
    @JsonProperty("accountID")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return The Moov transfer ID
     */
    @JsonProperty("transferID")
    public String getTransferId() {
        return transferId;
    }

    /**
     * @return The Moov transfer status
     */
    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    /**
     * @return The Moov transfer source
     */
    @JsonProperty("source")
    public Object getSource() {
        return source;
    }

    /**
     * @return The Moov transfer destination
     */
    @JsonProperty("destination")
    public Object getDestination() {
        return destination;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MoovTransferData && equalTo((MoovTransferData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MoovTransferData other) {
        return accountId.equals(other.accountId)
                && transferId.equals(other.transferId)
                && status.equals(other.status)
                && source.equals(other.source)
                && destination.equals(other.destination);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.transferId, this.status, this.source, this.destination);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        /**
         * <p>The Moov account ID</p>
         */
        TransferIdStage accountId(@NotNull String accountId);

        Builder from(MoovTransferData other);
    }

    public interface TransferIdStage {
        /**
         * <p>The Moov transfer ID</p>
         */
        StatusStage transferId(@NotNull String transferId);
    }

    public interface StatusStage {
        /**
         * <p>The Moov transfer status</p>
         */
        SourceStage status(@NotNull String status);
    }

    public interface SourceStage {
        /**
         * <p>The Moov transfer source</p>
         */
        DestinationStage source(Object source);
    }

    public interface DestinationStage {
        /**
         * <p>The Moov transfer destination</p>
         */
        _FinalStage destination(Object destination);
    }

    public interface _FinalStage {
        MoovTransferData build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AccountIdStage, TransferIdStage, StatusStage, SourceStage, DestinationStage, _FinalStage {
        private String accountId;

        private String transferId;

        private String status;

        private Object source;

        private Object destination;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MoovTransferData other) {
            accountId(other.getAccountId());
            transferId(other.getTransferId());
            status(other.getStatus());
            source(other.getSource());
            destination(other.getDestination());
            return this;
        }

        /**
         * <p>The Moov account ID</p>
         * <p>The Moov account ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accountID")
        public TransferIdStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>The Moov transfer ID</p>
         * <p>The Moov transfer ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferID")
        public StatusStage transferId(@NotNull String transferId) {
            this.transferId = Objects.requireNonNull(transferId, "transferId must not be null");
            return this;
        }

        /**
         * <p>The Moov transfer status</p>
         * <p>The Moov transfer status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public SourceStage status(@NotNull String status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The Moov transfer source</p>
         * <p>The Moov transfer source</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public DestinationStage source(Object source) {
            this.source = source;
            return this;
        }

        /**
         * <p>The Moov transfer destination</p>
         * <p>The Moov transfer destination</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("destination")
        public _FinalStage destination(Object destination) {
            this.destination = destination;
            return this;
        }

        @java.lang.Override
        public MoovTransferData build() {
            return new MoovTransferData(accountId, transferId, status, source, destination, additionalProperties);
        }
    }
}
