/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.moov.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MoovBankAccountData.Builder.class)
public final class MoovBankAccountData {
    private final String bankAccountId;

    private final String accountId;

    private final MoovBankAccountStatus status;

    private final Optional<String> statusReason;

    private final Map<String, Object> additionalProperties;

    private MoovBankAccountData(
            String bankAccountId,
            String accountId,
            MoovBankAccountStatus status,
            Optional<String> statusReason,
            Map<String, Object> additionalProperties) {
        this.bankAccountId = bankAccountId;
        this.accountId = accountId;
        this.status = status;
        this.statusReason = statusReason;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Moov bank account ID
     */
    @JsonProperty("bankAccountID")
    public String getBankAccountId() {
        return bankAccountId;
    }

    /**
     * @return The Moov account ID
     */
    @JsonProperty("accountID")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return The Moov bank account status
     */
    @JsonProperty("status")
    public MoovBankAccountStatus getStatus() {
        return status;
    }

    /**
     * @return The reason for the Moov bank account status
     */
    @JsonProperty("statusReason")
    public Optional<String> getStatusReason() {
        return statusReason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MoovBankAccountData && equalTo((MoovBankAccountData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MoovBankAccountData other) {
        return bankAccountId.equals(other.bankAccountId)
                && accountId.equals(other.accountId)
                && status.equals(other.status)
                && statusReason.equals(other.statusReason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bankAccountId, this.accountId, this.status, this.statusReason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BankAccountIdStage builder() {
        return new Builder();
    }

    public interface BankAccountIdStage {
        /**
         * <p>The Moov bank account ID</p>
         */
        AccountIdStage bankAccountId(@NotNull String bankAccountId);

        Builder from(MoovBankAccountData other);
    }

    public interface AccountIdStage {
        /**
         * <p>The Moov account ID</p>
         */
        StatusStage accountId(@NotNull String accountId);
    }

    public interface StatusStage {
        /**
         * <p>The Moov bank account status</p>
         */
        _FinalStage status(@NotNull MoovBankAccountStatus status);
    }

    public interface _FinalStage {
        MoovBankAccountData build();

        /**
         * <p>The reason for the Moov bank account status</p>
         */
        _FinalStage statusReason(Optional<String> statusReason);

        _FinalStage statusReason(String statusReason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BankAccountIdStage, AccountIdStage, StatusStage, _FinalStage {
        private String bankAccountId;

        private String accountId;

        private MoovBankAccountStatus status;

        private Optional<String> statusReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MoovBankAccountData other) {
            bankAccountId(other.getBankAccountId());
            accountId(other.getAccountId());
            status(other.getStatus());
            statusReason(other.getStatusReason());
            return this;
        }

        /**
         * <p>The Moov bank account ID</p>
         * <p>The Moov bank account ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("bankAccountID")
        public AccountIdStage bankAccountId(@NotNull String bankAccountId) {
            this.bankAccountId = Objects.requireNonNull(bankAccountId, "bankAccountId must not be null");
            return this;
        }

        /**
         * <p>The Moov account ID</p>
         * <p>The Moov account ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accountID")
        public StatusStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>The Moov bank account status</p>
         * <p>The Moov bank account status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull MoovBankAccountStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The reason for the Moov bank account status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage statusReason(String statusReason) {
            this.statusReason = Optional.ofNullable(statusReason);
            return this;
        }

        /**
         * <p>The reason for the Moov bank account status</p>
         */
        @java.lang.Override
        @JsonSetter(value = "statusReason", nulls = Nulls.SKIP)
        public _FinalStage statusReason(Optional<String> statusReason) {
            this.statusReason = statusReason;
            return this;
        }

        @java.lang.Override
        public MoovBankAccountData build() {
            return new MoovBankAccountData(bankAccountId, accountId, status, statusReason, additionalProperties);
        }
    }
}
