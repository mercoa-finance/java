/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.moov.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.moov.types.MoovTransferCallbackBody;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MoovTransferCallback.Builder.class)
public final class MoovTransferCallback {
    private final String xAccountId;

    private final String xSignature;

    private final String xTimestamp;

    private final String xNonce;

    private final String xWebhookId;

    private final MoovTransferCallbackBody body;

    private final Map<String, Object> additionalProperties;

    private MoovTransferCallback(
            String xAccountId,
            String xSignature,
            String xTimestamp,
            String xNonce,
            String xWebhookId,
            MoovTransferCallbackBody body,
            Map<String, Object> additionalProperties) {
        this.xAccountId = xAccountId;
        this.xSignature = xSignature;
        this.xTimestamp = xTimestamp;
        this.xNonce = xNonce;
        this.xWebhookId = xWebhookId;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Moov account ID
     */
    @JsonProperty("X-Account-ID")
    public String getXAccountId() {
        return xAccountId;
    }

    /**
     * @return The Moov signature
     */
    @JsonProperty("X-Signature")
    public String getXSignature() {
        return xSignature;
    }

    /**
     * @return The Moov timestamp
     */
    @JsonProperty("X-Timestamp")
    public String getXTimestamp() {
        return xTimestamp;
    }

    /**
     * @return The Moov nonce
     */
    @JsonProperty("X-Nonce")
    public String getXNonce() {
        return xNonce;
    }

    /**
     * @return The Moov webhook ID
     */
    @JsonProperty("X-Webhook-ID")
    public String getXWebhookId() {
        return xWebhookId;
    }

    @JsonProperty("body")
    public MoovTransferCallbackBody getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MoovTransferCallback && equalTo((MoovTransferCallback) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MoovTransferCallback other) {
        return xAccountId.equals(other.xAccountId)
                && xSignature.equals(other.xSignature)
                && xTimestamp.equals(other.xTimestamp)
                && xNonce.equals(other.xNonce)
                && xWebhookId.equals(other.xWebhookId)
                && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.xAccountId, this.xSignature, this.xTimestamp, this.xNonce, this.xWebhookId, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static XAccountIdStage builder() {
        return new Builder();
    }

    public interface XAccountIdStage {
        /**
         * <p>The Moov account ID</p>
         */
        XSignatureStage xAccountId(@NotNull String xAccountId);

        Builder from(MoovTransferCallback other);
    }

    public interface XSignatureStage {
        /**
         * <p>The Moov signature</p>
         */
        XTimestampStage xSignature(@NotNull String xSignature);
    }

    public interface XTimestampStage {
        /**
         * <p>The Moov timestamp</p>
         */
        XNonceStage xTimestamp(@NotNull String xTimestamp);
    }

    public interface XNonceStage {
        /**
         * <p>The Moov nonce</p>
         */
        XWebhookIdStage xNonce(@NotNull String xNonce);
    }

    public interface XWebhookIdStage {
        /**
         * <p>The Moov webhook ID</p>
         */
        BodyStage xWebhookId(@NotNull String xWebhookId);
    }

    public interface BodyStage {
        _FinalStage body(@NotNull MoovTransferCallbackBody body);
    }

    public interface _FinalStage {
        MoovTransferCallback build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements XAccountIdStage,
                    XSignatureStage,
                    XTimestampStage,
                    XNonceStage,
                    XWebhookIdStage,
                    BodyStage,
                    _FinalStage {
        private String xAccountId;

        private String xSignature;

        private String xTimestamp;

        private String xNonce;

        private String xWebhookId;

        private MoovTransferCallbackBody body;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MoovTransferCallback other) {
            xAccountId(other.getXAccountId());
            xSignature(other.getXSignature());
            xTimestamp(other.getXTimestamp());
            xNonce(other.getXNonce());
            xWebhookId(other.getXWebhookId());
            body(other.getBody());
            return this;
        }

        /**
         * <p>The Moov account ID</p>
         * <p>The Moov account ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("X-Account-ID")
        public XSignatureStage xAccountId(@NotNull String xAccountId) {
            this.xAccountId = Objects.requireNonNull(xAccountId, "xAccountId must not be null");
            return this;
        }

        /**
         * <p>The Moov signature</p>
         * <p>The Moov signature</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("X-Signature")
        public XTimestampStage xSignature(@NotNull String xSignature) {
            this.xSignature = Objects.requireNonNull(xSignature, "xSignature must not be null");
            return this;
        }

        /**
         * <p>The Moov timestamp</p>
         * <p>The Moov timestamp</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("X-Timestamp")
        public XNonceStage xTimestamp(@NotNull String xTimestamp) {
            this.xTimestamp = Objects.requireNonNull(xTimestamp, "xTimestamp must not be null");
            return this;
        }

        /**
         * <p>The Moov nonce</p>
         * <p>The Moov nonce</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("X-Nonce")
        public XWebhookIdStage xNonce(@NotNull String xNonce) {
            this.xNonce = Objects.requireNonNull(xNonce, "xNonce must not be null");
            return this;
        }

        /**
         * <p>The Moov webhook ID</p>
         * <p>The Moov webhook ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("X-Webhook-ID")
        public BodyStage xWebhookId(@NotNull String xWebhookId) {
            this.xWebhookId = Objects.requireNonNull(xWebhookId, "xWebhookId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull MoovTransferCallbackBody body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        @java.lang.Override
        public MoovTransferCallback build() {
            return new MoovTransferCallback(
                    xAccountId, xSignature, xTimestamp, xNonce, xWebhookId, body, additionalProperties);
        }
    }
}
