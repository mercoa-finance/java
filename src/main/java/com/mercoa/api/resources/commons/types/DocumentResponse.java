/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DocumentResponse.Builder.class)
public final class DocumentResponse {
    private final Optional<String> id;

    private final String mimeType;

    private final DocumentType type;

    private final String uri;

    private final Map<String, Object> additionalProperties;

    private DocumentResponse(
            Optional<String> id,
            String mimeType,
            DocumentType type,
            String uri,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.mimeType = mimeType;
        this.type = type;
        this.uri = uri;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID of the document. If not provided, this is a dynamic document that is generated on the fly.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("mimeType")
    public String getMimeType() {
        return mimeType;
    }

    @JsonProperty("type")
    public DocumentType getType() {
        return type;
    }

    @JsonProperty("uri")
    public String getUri() {
        return uri;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentResponse && equalTo((DocumentResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DocumentResponse other) {
        return id.equals(other.id)
                && mimeType.equals(other.mimeType)
                && type.equals(other.type)
                && uri.equals(other.uri);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.mimeType, this.type, this.uri);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MimeTypeStage builder() {
        return new Builder();
    }

    public interface MimeTypeStage {
        TypeStage mimeType(@NotNull String mimeType);

        Builder from(DocumentResponse other);
    }

    public interface TypeStage {
        UriStage type(@NotNull DocumentType type);
    }

    public interface UriStage {
        _FinalStage uri(@NotNull String uri);
    }

    public interface _FinalStage {
        DocumentResponse build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MimeTypeStage, TypeStage, UriStage, _FinalStage {
        private String mimeType;

        private DocumentType type;

        private String uri;

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DocumentResponse other) {
            id(other.getId());
            mimeType(other.getMimeType());
            type(other.getType());
            uri(other.getUri());
            return this;
        }

        @java.lang.Override
        @JsonSetter("mimeType")
        public TypeStage mimeType(@NotNull String mimeType) {
            this.mimeType = Objects.requireNonNull(mimeType, "mimeType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public UriStage type(@NotNull DocumentType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("uri")
        public _FinalStage uri(@NotNull String uri) {
            this.uri = Objects.requireNonNull(uri, "uri must not be null");
            return this;
        }

        /**
         * <p>ID of the document. If not provided, this is a dynamic document that is generated on the fly.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public DocumentResponse build() {
            return new DocumentResponse(id, mimeType, type, uri, additionalProperties);
        }
    }
}
