/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BirthDate.Builder.class)
public final class BirthDate {
    private final Optional<String> day;

    private final Optional<String> month;

    private final Optional<String> year;

    private final Map<String, Object> additionalProperties;

    private BirthDate(
            Optional<String> day,
            Optional<String> month,
            Optional<String> year,
            Map<String, Object> additionalProperties) {
        this.day = day;
        this.month = month;
        this.year = year;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("day")
    public Optional<String> getDay() {
        return day;
    }

    @JsonProperty("month")
    public Optional<String> getMonth() {
        return month;
    }

    @JsonProperty("year")
    public Optional<String> getYear() {
        return year;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BirthDate && equalTo((BirthDate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BirthDate other) {
        return day.equals(other.day) && month.equals(other.month) && year.equals(other.year);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.day, this.month, this.year);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> day = Optional.empty();

        private Optional<String> month = Optional.empty();

        private Optional<String> year = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BirthDate other) {
            day(other.getDay());
            month(other.getMonth());
            year(other.getYear());
            return this;
        }

        @JsonSetter(value = "day", nulls = Nulls.SKIP)
        public Builder day(Optional<String> day) {
            this.day = day;
            return this;
        }

        public Builder day(String day) {
            this.day = Optional.of(day);
            return this;
        }

        @JsonSetter(value = "month", nulls = Nulls.SKIP)
        public Builder month(Optional<String> month) {
            this.month = month;
            return this;
        }

        public Builder month(String month) {
            this.month = Optional.of(month);
            return this;
        }

        @JsonSetter(value = "year", nulls = Nulls.SKIP)
        public Builder year(Optional<String> year) {
            this.year = year;
            return this;
        }

        public Builder year(String year) {
            this.year = Optional.of(year);
            return this;
        }

        public BirthDate build() {
            return new BirthDate(day, month, year, additionalProperties);
        }
    }
}
