/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PubSubRequest.Builder.class)
public final class PubSubRequest {
    private final Optional<Object> message;

    private final Optional<String> subscription;

    private final Map<String, Object> additionalProperties;

    private PubSubRequest(
            Optional<Object> message, Optional<String> subscription, Map<String, Object> additionalProperties) {
        this.message = message;
        this.subscription = subscription;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("message")
    public Optional<Object> getMessage() {
        return message;
    }

    @JsonProperty("subscription")
    public Optional<String> getSubscription() {
        return subscription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PubSubRequest && equalTo((PubSubRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PubSubRequest other) {
        return message.equals(other.message) && subscription.equals(other.subscription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.message, this.subscription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> message = Optional.empty();

        private Optional<String> subscription = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PubSubRequest other) {
            message(other.getMessage());
            subscription(other.getSubscription());
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<Object> message) {
            this.message = message;
            return this;
        }

        public Builder message(Object message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        @JsonSetter(value = "subscription", nulls = Nulls.SKIP)
        public Builder subscription(Optional<String> subscription) {
            this.subscription = subscription;
            return this;
        }

        public Builder subscription(String subscription) {
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        public PubSubRequest build() {
            return new PubSubRequest(message, subscription, additionalProperties);
        }
    }
}
