/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.contracttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GenerateContractAsyncJobResponse.Builder.class)
public final class GenerateContractAsyncJobResponse {
    private final String jobId;

    private final ContractJobStatus status;

    private final Optional<ContractResponse> contract;

    private final Map<String, Object> additionalProperties;

    private GenerateContractAsyncJobResponse(
            String jobId,
            ContractJobStatus status,
            Optional<ContractResponse> contract,
            Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.status = status;
        this.contract = contract;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Job ID
     */
    @JsonProperty("jobId")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return Job status
     */
    @JsonProperty("status")
    public ContractJobStatus getStatus() {
        return status;
    }

    /**
     * @return Contract
     */
    @JsonProperty("contract")
    public Optional<ContractResponse> getContract() {
        return contract;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GenerateContractAsyncJobResponse && equalTo((GenerateContractAsyncJobResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GenerateContractAsyncJobResponse other) {
        return jobId.equals(other.jobId) && status.equals(other.status) && contract.equals(other.contract);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.jobId, this.status, this.contract);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        StatusStage jobId(@NotNull String jobId);

        Builder from(GenerateContractAsyncJobResponse other);
    }

    public interface StatusStage {
        _FinalStage status(@NotNull ContractJobStatus status);
    }

    public interface _FinalStage {
        GenerateContractAsyncJobResponse build();

        _FinalStage contract(Optional<ContractResponse> contract);

        _FinalStage contract(ContractResponse contract);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, StatusStage, _FinalStage {
        private String jobId;

        private ContractJobStatus status;

        private Optional<ContractResponse> contract = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GenerateContractAsyncJobResponse other) {
            jobId(other.getJobId());
            status(other.getStatus());
            contract(other.getContract());
            return this;
        }

        /**
         * <p>Job ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("jobId")
        public StatusStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>Job status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull ContractJobStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Contract</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contract(ContractResponse contract) {
            this.contract = Optional.ofNullable(contract);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "contract", nulls = Nulls.SKIP)
        public _FinalStage contract(Optional<ContractResponse> contract) {
            this.contract = contract;
            return this;
        }

        @java.lang.Override
        public GenerateContractAsyncJobResponse build() {
            return new GenerateContractAsyncJobResponse(jobId, status, contract, additionalProperties);
        }
    }
}
