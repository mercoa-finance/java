/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.contracttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContractRecurrenceResponse.Builder.class)
public final class ContractRecurrenceResponse {
    private final String id;

    private final String contractId;

    private final String rrule;

    private final String justification;

    private final String filteredContractSummary;

    private final ContractInvoiceSchema invoiceSchema;

    private final List<String> createdInvoiceIds;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ContractRecurrenceResponse(
            String id,
            String contractId,
            String rrule,
            String justification,
            String filteredContractSummary,
            ContractInvoiceSchema invoiceSchema,
            List<String> createdInvoiceIds,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.contractId = contractId;
        this.rrule = rrule;
        this.justification = justification;
        this.filteredContractSummary = filteredContractSummary;
        this.invoiceSchema = invoiceSchema;
        this.createdInvoiceIds = createdInvoiceIds;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("contractId")
    public String getContractId() {
        return contractId;
    }

    /**
     * @return RFC 5545 RRULE string
     */
    @JsonProperty("rrule")
    public String getRrule() {
        return rrule;
    }

    /**
     * @return Natural language justification for the recurrence
     */
    @JsonProperty("justification")
    public String getJustification() {
        return justification;
    }

    /**
     * @return Natural language summary of the contract, filtered to only include information relevant to the recurrence
     */
    @JsonProperty("filteredContractSummary")
    public String getFilteredContractSummary() {
        return filteredContractSummary;
    }

    /**
     * @return Schema of the invoices to be created by this recurrence
     */
    @JsonProperty("invoiceSchema")
    public ContractInvoiceSchema getInvoiceSchema() {
        return invoiceSchema;
    }

    /**
     * @return IDs of invoices created by the recurrence
     */
    @JsonProperty("createdInvoiceIds")
    public List<String> getCreatedInvoiceIds() {
        return createdInvoiceIds;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContractRecurrenceResponse && equalTo((ContractRecurrenceResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ContractRecurrenceResponse other) {
        return id.equals(other.id)
                && contractId.equals(other.contractId)
                && rrule.equals(other.rrule)
                && justification.equals(other.justification)
                && filteredContractSummary.equals(other.filteredContractSummary)
                && invoiceSchema.equals(other.invoiceSchema)
                && createdInvoiceIds.equals(other.createdInvoiceIds)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.contractId,
                this.rrule,
                this.justification,
                this.filteredContractSummary,
                this.invoiceSchema,
                this.createdInvoiceIds,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        ContractIdStage id(@NotNull String id);

        Builder from(ContractRecurrenceResponse other);
    }

    public interface ContractIdStage {
        RruleStage contractId(@NotNull String contractId);
    }

    public interface RruleStage {
        JustificationStage rrule(@NotNull String rrule);
    }

    public interface JustificationStage {
        FilteredContractSummaryStage justification(@NotNull String justification);
    }

    public interface FilteredContractSummaryStage {
        InvoiceSchemaStage filteredContractSummary(@NotNull String filteredContractSummary);
    }

    public interface InvoiceSchemaStage {
        CreatedAtStage invoiceSchema(@NotNull ContractInvoiceSchema invoiceSchema);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ContractRecurrenceResponse build();

        _FinalStage createdInvoiceIds(List<String> createdInvoiceIds);

        _FinalStage addCreatedInvoiceIds(String createdInvoiceIds);

        _FinalStage addAllCreatedInvoiceIds(List<String> createdInvoiceIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    ContractIdStage,
                    RruleStage,
                    JustificationStage,
                    FilteredContractSummaryStage,
                    InvoiceSchemaStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String id;

        private String contractId;

        private String rrule;

        private String justification;

        private String filteredContractSummary;

        private ContractInvoiceSchema invoiceSchema;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private List<String> createdInvoiceIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ContractRecurrenceResponse other) {
            id(other.getId());
            contractId(other.getContractId());
            rrule(other.getRrule());
            justification(other.getJustification());
            filteredContractSummary(other.getFilteredContractSummary());
            invoiceSchema(other.getInvoiceSchema());
            createdInvoiceIds(other.getCreatedInvoiceIds());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public ContractIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("contractId")
        public RruleStage contractId(@NotNull String contractId) {
            this.contractId = Objects.requireNonNull(contractId, "contractId must not be null");
            return this;
        }

        /**
         * <p>RFC 5545 RRULE string</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rrule")
        public JustificationStage rrule(@NotNull String rrule) {
            this.rrule = Objects.requireNonNull(rrule, "rrule must not be null");
            return this;
        }

        /**
         * <p>Natural language justification for the recurrence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("justification")
        public FilteredContractSummaryStage justification(@NotNull String justification) {
            this.justification = Objects.requireNonNull(justification, "justification must not be null");
            return this;
        }

        /**
         * <p>Natural language summary of the contract, filtered to only include information relevant to the recurrence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("filteredContractSummary")
        public InvoiceSchemaStage filteredContractSummary(@NotNull String filteredContractSummary) {
            this.filteredContractSummary =
                    Objects.requireNonNull(filteredContractSummary, "filteredContractSummary must not be null");
            return this;
        }

        /**
         * <p>Schema of the invoices to be created by this recurrence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoiceSchema")
        public CreatedAtStage invoiceSchema(@NotNull ContractInvoiceSchema invoiceSchema) {
            this.invoiceSchema = Objects.requireNonNull(invoiceSchema, "invoiceSchema must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>IDs of invoices created by the recurrence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCreatedInvoiceIds(List<String> createdInvoiceIds) {
            this.createdInvoiceIds.addAll(createdInvoiceIds);
            return this;
        }

        /**
         * <p>IDs of invoices created by the recurrence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCreatedInvoiceIds(String createdInvoiceIds) {
            this.createdInvoiceIds.add(createdInvoiceIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "createdInvoiceIds", nulls = Nulls.SKIP)
        public _FinalStage createdInvoiceIds(List<String> createdInvoiceIds) {
            this.createdInvoiceIds.clear();
            this.createdInvoiceIds.addAll(createdInvoiceIds);
            return this;
        }

        @java.lang.Override
        public ContractRecurrenceResponse build() {
            return new ContractRecurrenceResponse(
                    id,
                    contractId,
                    rrule,
                    justification,
                    filteredContractSummary,
                    invoiceSchema,
                    createdInvoiceIds,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
