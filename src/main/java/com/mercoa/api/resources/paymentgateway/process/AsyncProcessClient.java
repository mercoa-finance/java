/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgateway.process;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.PubSubRequest;
import com.mercoa.api.resources.commons.types.PubSubResponse;
import com.mercoa.api.resources.paymentgateway.process.requests.SearchPaymentGatewayProcessJobsRequest;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessCardEtlRequest;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessCardEtlResponse;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessDataExtractionRequest;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessDataExtractionResponse;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessPaymentGatewayRequest;
import com.mercoa.api.resources.paymentgatewaytypes.types.ProcessPaymentGatewayResponse;
import com.mercoa.api.resources.paymentgatewaytypes.types.SearchPaymentGatewayProcessJobsResponse;
import com.mercoa.api.resources.paymentgatewaytypes.types.TriggerPaymentGatewayProcessRequest;
import com.mercoa.api.resources.paymentgatewaytypes.types.TriggerPaymentGatewayProcessResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncProcessClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawProcessClient rawClient;

    public AsyncProcessClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawProcessClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawProcessClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search payment gateway process jobs
     */
    public CompletableFuture<SearchPaymentGatewayProcessJobsResponse> find() {
        return this.rawClient.find().thenApply(response -> response.body());
    }

    /**
     * Search payment gateway process jobs
     */
    public CompletableFuture<SearchPaymentGatewayProcessJobsResponse> find(
            SearchPaymentGatewayProcessJobsRequest request) {
        return this.rawClient.find(request).thenApply(response -> response.body());
    }

    /**
     * Search payment gateway process jobs
     */
    public CompletableFuture<SearchPaymentGatewayProcessJobsResponse> find(
            SearchPaymentGatewayProcessJobsRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create a job to process a payment through a payment gateway
     */
    public CompletableFuture<ProcessPaymentGatewayResponse> create(ProcessPaymentGatewayRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Create a job to process a payment through a payment gateway
     */
    public CompletableFuture<ProcessPaymentGatewayResponse> create(
            ProcessPaymentGatewayRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get the status of a payment gateway processing job
     */
    public CompletableFuture<ProcessPaymentGatewayResponse> get(String jobId) {
        return this.rawClient.get(jobId).thenApply(response -> response.body());
    }

    /**
     * Get the status of a payment gateway processing job
     */
    public CompletableFuture<ProcessPaymentGatewayResponse> get(String jobId, RequestOptions requestOptions) {
        return this.rawClient.get(jobId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Process a card ETL job
     */
    public CompletableFuture<List<ProcessCardEtlResponse>> processCardEtl() {
        return this.rawClient.processCardEtl().thenApply(response -> response.body());
    }

    /**
     * Process a card ETL job
     */
    public CompletableFuture<List<ProcessCardEtlResponse>> processCardEtl(ProcessCardEtlRequest request) {
        return this.rawClient.processCardEtl(request).thenApply(response -> response.body());
    }

    /**
     * Process a card ETL job
     */
    public CompletableFuture<List<ProcessCardEtlResponse>> processCardEtl(
            ProcessCardEtlRequest request, RequestOptions requestOptions) {
        return this.rawClient.processCardEtl(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Trigger a payment gateway process job
     */
    public CompletableFuture<TriggerPaymentGatewayProcessResponse> trigger(
            TriggerPaymentGatewayProcessRequest request) {
        return this.rawClient.trigger(request).thenApply(response -> response.body());
    }

    /**
     * Trigger a payment gateway process job
     */
    public CompletableFuture<TriggerPaymentGatewayProcessResponse> trigger(
            TriggerPaymentGatewayProcessRequest request, RequestOptions requestOptions) {
        return this.rawClient.trigger(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Internal endpoint for processing processing jobs via Pub/Sub messages
     */
    public CompletableFuture<PubSubResponse> processPubsub() {
        return this.rawClient.processPubsub().thenApply(response -> response.body());
    }

    /**
     * Internal endpoint for processing processing jobs via Pub/Sub messages
     */
    public CompletableFuture<PubSubResponse> processPubsub(PubSubRequest request) {
        return this.rawClient.processPubsub(request).thenApply(response -> response.body());
    }

    /**
     * Internal endpoint for processing processing jobs via Pub/Sub messages
     */
    public CompletableFuture<PubSubResponse> processPubsub(PubSubRequest request, RequestOptions requestOptions) {
        return this.rawClient.processPubsub(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Internal endpoint for processing data extraction for a payment gateway process job
     */
    public CompletableFuture<ProcessDataExtractionResponse> processDataExtraction(
            ProcessDataExtractionRequest request) {
        return this.rawClient.processDataExtraction(request).thenApply(response -> response.body());
    }

    /**
     * Internal endpoint for processing data extraction for a payment gateway process job
     */
    public CompletableFuture<ProcessDataExtractionResponse> processDataExtraction(
            ProcessDataExtractionRequest request, RequestOptions requestOptions) {
        return this.rawClient.processDataExtraction(request, requestOptions).thenApply(response -> response.body());
    }
}
