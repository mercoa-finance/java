/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentgateway.validate.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.OrderDirection;
import com.mercoa.api.resources.paymentgatewaytypes.types.PaymentGatewayJobOrderByField;
import com.mercoa.api.resources.paymentgatewaytypes.types.PaymentGatewayJobStatus;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchPaymentGatewayValidationJobsRequest.Builder.class)
public final class SearchPaymentGatewayValidationJobsRequest {
    private final Optional<PaymentGatewayJobStatus> status;

    private final Optional<OffsetDateTime> startDate;

    private final Optional<OffsetDateTime> endDate;

    private final Optional<PaymentGatewayJobOrderByField> orderBy;

    private final Optional<OrderDirection> orderDirection;

    private final Optional<Integer> limit;

    private final Optional<String> startingAfter;

    private final Map<String, Object> additionalProperties;

    private SearchPaymentGatewayValidationJobsRequest(
            Optional<PaymentGatewayJobStatus> status,
            Optional<OffsetDateTime> startDate,
            Optional<OffsetDateTime> endDate,
            Optional<PaymentGatewayJobOrderByField> orderBy,
            Optional<OrderDirection> orderDirection,
            Optional<Integer> limit,
            Optional<String> startingAfter,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.orderBy = orderBy;
        this.orderDirection = orderDirection;
        this.limit = limit;
        this.startingAfter = startingAfter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter jobs by status
     */
    @JsonProperty("status")
    public Optional<PaymentGatewayJobStatus> getStatus() {
        return status;
    }

    /**
     * @return Start date filter for job creation time
     */
    @JsonProperty("startDate")
    public Optional<OffsetDateTime> getStartDate() {
        return startDate;
    }

    /**
     * @return End date filter for job creation time
     */
    @JsonProperty("endDate")
    public Optional<OffsetDateTime> getEndDate() {
        return endDate;
    }

    /**
     * @return Field to order jobs by. Defaults to CREATED_AT.
     */
    @JsonProperty("orderBy")
    public Optional<PaymentGatewayJobOrderByField> getOrderBy() {
        return orderBy;
    }

    /**
     * @return Direction to order jobs by. Defaults to desc.
     */
    @JsonProperty("orderDirection")
    public Optional<OrderDirection> getOrderDirection() {
        return orderDirection;
    }

    /**
     * @return Number of jobs to return. Limit can range between 1 and 100, and the default is 10.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return The ID of the job to start after. If not provided, the first page of jobs will be returned.
     */
    @JsonProperty("startingAfter")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchPaymentGatewayValidationJobsRequest
                && equalTo((SearchPaymentGatewayValidationJobsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchPaymentGatewayValidationJobsRequest other) {
        return status.equals(other.status)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && orderBy.equals(other.orderBy)
                && orderDirection.equals(other.orderDirection)
                && limit.equals(other.limit)
                && startingAfter.equals(other.startingAfter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.startDate,
                this.endDate,
                this.orderBy,
                this.orderDirection,
                this.limit,
                this.startingAfter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PaymentGatewayJobStatus> status = Optional.empty();

        private Optional<OffsetDateTime> startDate = Optional.empty();

        private Optional<OffsetDateTime> endDate = Optional.empty();

        private Optional<PaymentGatewayJobOrderByField> orderBy = Optional.empty();

        private Optional<OrderDirection> orderDirection = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> startingAfter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchPaymentGatewayValidationJobsRequest other) {
            status(other.getStatus());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            orderBy(other.getOrderBy());
            orderDirection(other.getOrderDirection());
            limit(other.getLimit());
            startingAfter(other.getStartingAfter());
            return this;
        }

        /**
         * <p>Filter jobs by status</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<PaymentGatewayJobStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(PaymentGatewayJobStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Start date filter for job creation time</p>
         */
        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * <p>End date filter for job creation time</p>
         */
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Field to order jobs by. Defaults to CREATED_AT.</p>
         */
        @JsonSetter(value = "orderBy", nulls = Nulls.SKIP)
        public Builder orderBy(Optional<PaymentGatewayJobOrderByField> orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        public Builder orderBy(PaymentGatewayJobOrderByField orderBy) {
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * <p>Direction to order jobs by. Defaults to desc.</p>
         */
        @JsonSetter(value = "orderDirection", nulls = Nulls.SKIP)
        public Builder orderDirection(Optional<OrderDirection> orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        public Builder orderDirection(OrderDirection orderDirection) {
            this.orderDirection = Optional.ofNullable(orderDirection);
            return this;
        }

        /**
         * <p>Number of jobs to return. Limit can range between 1 and 100, and the default is 10.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>The ID of the job to start after. If not provided, the first page of jobs will be returned.</p>
         */
        @JsonSetter(value = "startingAfter", nulls = Nulls.SKIP)
        public Builder startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        public Builder startingAfter(String startingAfter) {
            this.startingAfter = Optional.ofNullable(startingAfter);
            return this;
        }

        public SearchPaymentGatewayValidationJobsRequest build() {
            return new SearchPaymentGatewayValidationJobsRequest(
                    status, startDate, endDate, orderBy, orderDirection, limit, startingAfter, additionalProperties);
        }
    }
}
