/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaxId.Builder.class)
public final class TaxId {
    private final Ein ein;

    private final Map<String, Object> additionalProperties;

    private TaxId(Ein ein, Map<String, Object> additionalProperties) {
        this.ein = ein;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ein")
    public Ein getEin() {
        return ein;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaxId && equalTo((TaxId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaxId other) {
        return ein.equals(other.ein);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ein);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EinStage builder() {
        return new Builder();
    }

    public interface EinStage {
        _FinalStage ein(Ein ein);

        Builder from(TaxId other);
    }

    public interface _FinalStage {
        TaxId build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EinStage, _FinalStage {
        private Ein ein;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TaxId other) {
            ein(other.getEin());
            return this;
        }

        @java.lang.Override
        @JsonSetter("ein")
        public _FinalStage ein(Ein ein) {
            this.ein = ein;
            return this;
        }

        @java.lang.Override
        public TaxId build() {
            return new TaxId(ein, additionalProperties);
        }
    }
}
