/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserNotificationPolicyRequest.Builder.class)
public final class UserNotificationPolicyRequest {
    private final Optional<Boolean> disabled;

    private final Optional<Boolean> digest;

    private final Optional<Boolean> immediate;

    private final Map<String, Object> additionalProperties;

    private UserNotificationPolicyRequest(
            Optional<Boolean> disabled,
            Optional<Boolean> digest,
            Optional<Boolean> immediate,
            Map<String, Object> additionalProperties) {
        this.disabled = disabled;
        this.digest = digest;
        this.immediate = immediate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Set to true if the selected notification type should be disabled for this user
     */
    @JsonProperty("disabled")
    public Optional<Boolean> getDisabled() {
        return disabled;
    }

    /**
     * @return Set to true if the selected notification type should be sent as a digest. Default is false.
     */
    @JsonProperty("digest")
    public Optional<Boolean> getDigest() {
        return digest;
    }

    /**
     * @return Set to true if the selected notification type should be sent immediately. Default is true.
     */
    @JsonProperty("immediate")
    public Optional<Boolean> getImmediate() {
        return immediate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserNotificationPolicyRequest && equalTo((UserNotificationPolicyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserNotificationPolicyRequest other) {
        return disabled.equals(other.disabled) && digest.equals(other.digest) && immediate.equals(other.immediate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.disabled, this.digest, this.immediate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> disabled = Optional.empty();

        private Optional<Boolean> digest = Optional.empty();

        private Optional<Boolean> immediate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserNotificationPolicyRequest other) {
            disabled(other.getDisabled());
            digest(other.getDigest());
            immediate(other.getImmediate());
            return this;
        }

        @JsonSetter(value = "disabled", nulls = Nulls.SKIP)
        public Builder disabled(Optional<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            this.disabled = Optional.of(disabled);
            return this;
        }

        @JsonSetter(value = "digest", nulls = Nulls.SKIP)
        public Builder digest(Optional<Boolean> digest) {
            this.digest = digest;
            return this;
        }

        public Builder digest(Boolean digest) {
            this.digest = Optional.of(digest);
            return this;
        }

        @JsonSetter(value = "immediate", nulls = Nulls.SKIP)
        public Builder immediate(Optional<Boolean> immediate) {
            this.immediate = immediate;
            return this;
        }

        public Builder immediate(Boolean immediate) {
            this.immediate = Optional.of(immediate);
            return this;
        }

        public UserNotificationPolicyRequest build() {
            return new UserNotificationPolicyRequest(disabled, digest, immediate, additionalProperties);
        }
    }
}
