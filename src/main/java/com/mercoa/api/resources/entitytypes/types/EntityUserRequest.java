/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityUserRequest.Builder.class)
public final class EntityUserRequest {
    private final Optional<String> foreignId;

    private final Optional<String> email;

    private final Optional<String> name;

    private final Optional<List<String>> roles;

    private final Map<String, Object> additionalProperties;

    private EntityUserRequest(
            Optional<String> foreignId,
            Optional<String> email,
            Optional<String> name,
            Optional<List<String>> roles,
            Map<String, Object> additionalProperties) {
        this.foreignId = foreignId;
        this.email = email;
        this.name = name;
        this.roles = roles;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID used to identify this user in your system.
     */
    @JsonProperty("foreignId")
    public Optional<String> getForeignId() {
        return foreignId;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return List of roles. A role can be any string. For example: &quot;payer&quot;, &quot;approver&quot;, &quot;viewer&quot;
     */
    @JsonProperty("roles")
    public Optional<List<String>> getRoles() {
        return roles;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityUserRequest && equalTo((EntityUserRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityUserRequest other) {
        return foreignId.equals(other.foreignId)
                && email.equals(other.email)
                && name.equals(other.name)
                && roles.equals(other.roles);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.foreignId, this.email, this.name, this.roles);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> foreignId = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<List<String>> roles = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityUserRequest other) {
            foreignId(other.getForeignId());
            email(other.getEmail());
            name(other.getName());
            roles(other.getRoles());
            return this;
        }

        /**
         * <p>The ID used to identify this user in your system.</p>
         */
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<String> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>List of roles. A role can be any string. For example: &quot;payer&quot;, &quot;approver&quot;, &quot;viewer&quot;</p>
         */
        @JsonSetter(value = "roles", nulls = Nulls.SKIP)
        public Builder roles(Optional<List<String>> roles) {
            this.roles = roles;
            return this;
        }

        public Builder roles(List<String> roles) {
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        public EntityUserRequest build() {
            return new EntityUserRequest(foreignId, email, name, roles, additionalProperties);
        }
    }
}
