/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.InvoiceStatus;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenGenerationInvoiceOptions.Builder.class)
public final class TokenGenerationInvoiceOptions {
    private final Optional<LineItemAvailabilities> lineItems;

    private final Optional<Boolean> disableLineItems;

    private final List<InvoiceStatus> status;

    private final Map<String, Object> additionalProperties;

    private TokenGenerationInvoiceOptions(
            Optional<LineItemAvailabilities> lineItems,
            Optional<Boolean> disableLineItems,
            List<InvoiceStatus> status,
            Map<String, Object> additionalProperties) {
        this.lineItems = lineItems;
        this.disableLineItems = disableLineItems;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Defaults to OPTIONAL. If set to REQUIRED, the user will be required to provide at least one line item when creating an invoice. If set to DISABLED, the user will not be able to provide line items when creating an invoice.
     */
    @JsonProperty("lineItems")
    public Optional<LineItemAvailabilities> getLineItems() {
        return lineItems;
    }

    /**
     * @return DEPRECATED. Use lineItems instead.
     */
    @JsonProperty("disableLineItems")
    public Optional<Boolean> getDisableLineItems() {
        return disableLineItems;
    }

    @JsonProperty("status")
    public List<InvoiceStatus> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenGenerationInvoiceOptions && equalTo((TokenGenerationInvoiceOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenGenerationInvoiceOptions other) {
        return lineItems.equals(other.lineItems)
                && disableLineItems.equals(other.disableLineItems)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lineItems, this.disableLineItems, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LineItemAvailabilities> lineItems = Optional.empty();

        private Optional<Boolean> disableLineItems = Optional.empty();

        private List<InvoiceStatus> status = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenGenerationInvoiceOptions other) {
            lineItems(other.getLineItems());
            disableLineItems(other.getDisableLineItems());
            status(other.getStatus());
            return this;
        }

        @JsonSetter(value = "lineItems", nulls = Nulls.SKIP)
        public Builder lineItems(Optional<LineItemAvailabilities> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        public Builder lineItems(LineItemAvailabilities lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        @JsonSetter(value = "disableLineItems", nulls = Nulls.SKIP)
        public Builder disableLineItems(Optional<Boolean> disableLineItems) {
            this.disableLineItems = disableLineItems;
            return this;
        }

        public Builder disableLineItems(Boolean disableLineItems) {
            this.disableLineItems = Optional.ofNullable(disableLineItems);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(List<InvoiceStatus> status) {
            this.status.clear();
            this.status.addAll(status);
            return this;
        }

        public Builder addStatus(InvoiceStatus status) {
            this.status.add(status);
            return this;
        }

        public Builder addAllStatus(List<InvoiceStatus> status) {
            this.status.addAll(status);
            return this;
        }

        public TokenGenerationInvoiceOptions build() {
            return new TokenGenerationInvoiceOptions(lineItems, disableLineItems, status, additionalProperties);
        }
    }
}
