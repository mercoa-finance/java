/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.customizationtypes.types.FeeCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.InvoiceCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.MetadataCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.NotificationCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.OcrCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.PaymentMethodCustomizationRequest;
import com.mercoa.api.resources.customizationtypes.types.WorkflowCustomizationRequest;
import com.mercoa.api.resources.organizationtypes.types.Permission;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityCustomizationRequest.Builder.class)
public final class EntityCustomizationRequest {
    private final Optional<List<MetadataCustomizationRequest>> metadata;

    private final Optional<List<PaymentMethodCustomizationRequest>> paymentSource;

    private final Optional<List<PaymentMethodCustomizationRequest>> backupDisbursement;

    private final Optional<List<PaymentMethodCustomizationRequest>> paymentDestination;

    private final Optional<OcrCustomizationRequest> ocr;

    private final Optional<NotificationCustomizationRequest> notifications;

    private final Optional<WorkflowCustomizationRequest> workflow;

    private final Optional<InvoiceCustomizationRequest> invoice;

    private final Optional<FeeCustomizationRequest> fees;

    private final Optional<Map<String, List<Permission>>> rolePermissions;

    private final Map<String, Object> additionalProperties;

    private EntityCustomizationRequest(
            Optional<List<MetadataCustomizationRequest>> metadata,
            Optional<List<PaymentMethodCustomizationRequest>> paymentSource,
            Optional<List<PaymentMethodCustomizationRequest>> backupDisbursement,
            Optional<List<PaymentMethodCustomizationRequest>> paymentDestination,
            Optional<OcrCustomizationRequest> ocr,
            Optional<NotificationCustomizationRequest> notifications,
            Optional<WorkflowCustomizationRequest> workflow,
            Optional<InvoiceCustomizationRequest> invoice,
            Optional<FeeCustomizationRequest> fees,
            Optional<Map<String, List<Permission>>> rolePermissions,
            Map<String, Object> additionalProperties) {
        this.metadata = metadata;
        this.paymentSource = paymentSource;
        this.backupDisbursement = backupDisbursement;
        this.paymentDestination = paymentDestination;
        this.ocr = ocr;
        this.notifications = notifications;
        this.workflow = workflow;
        this.invoice = invoice;
        this.fees = fees;
        this.rolePermissions = rolePermissions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("metadata")
    public Optional<List<MetadataCustomizationRequest>> getMetadata() {
        return metadata;
    }

    @JsonProperty("paymentSource")
    public Optional<List<PaymentMethodCustomizationRequest>> getPaymentSource() {
        return paymentSource;
    }

    @JsonProperty("backupDisbursement")
    public Optional<List<PaymentMethodCustomizationRequest>> getBackupDisbursement() {
        return backupDisbursement;
    }

    @JsonProperty("paymentDestination")
    public Optional<List<PaymentMethodCustomizationRequest>> getPaymentDestination() {
        return paymentDestination;
    }

    @JsonProperty("ocr")
    public Optional<OcrCustomizationRequest> getOcr() {
        return ocr;
    }

    @JsonProperty("notifications")
    public Optional<NotificationCustomizationRequest> getNotifications() {
        return notifications;
    }

    @JsonProperty("workflow")
    public Optional<WorkflowCustomizationRequest> getWorkflow() {
        return workflow;
    }

    @JsonProperty("invoice")
    public Optional<InvoiceCustomizationRequest> getInvoice() {
        return invoice;
    }

    @JsonProperty("fees")
    public Optional<FeeCustomizationRequest> getFees() {
        return fees;
    }

    @JsonProperty("rolePermissions")
    public Optional<Map<String, List<Permission>>> getRolePermissions() {
        return rolePermissions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityCustomizationRequest && equalTo((EntityCustomizationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityCustomizationRequest other) {
        return metadata.equals(other.metadata)
                && paymentSource.equals(other.paymentSource)
                && backupDisbursement.equals(other.backupDisbursement)
                && paymentDestination.equals(other.paymentDestination)
                && ocr.equals(other.ocr)
                && notifications.equals(other.notifications)
                && workflow.equals(other.workflow)
                && invoice.equals(other.invoice)
                && fees.equals(other.fees)
                && rolePermissions.equals(other.rolePermissions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.metadata,
                this.paymentSource,
                this.backupDisbursement,
                this.paymentDestination,
                this.ocr,
                this.notifications,
                this.workflow,
                this.invoice,
                this.fees,
                this.rolePermissions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<MetadataCustomizationRequest>> metadata = Optional.empty();

        private Optional<List<PaymentMethodCustomizationRequest>> paymentSource = Optional.empty();

        private Optional<List<PaymentMethodCustomizationRequest>> backupDisbursement = Optional.empty();

        private Optional<List<PaymentMethodCustomizationRequest>> paymentDestination = Optional.empty();

        private Optional<OcrCustomizationRequest> ocr = Optional.empty();

        private Optional<NotificationCustomizationRequest> notifications = Optional.empty();

        private Optional<WorkflowCustomizationRequest> workflow = Optional.empty();

        private Optional<InvoiceCustomizationRequest> invoice = Optional.empty();

        private Optional<FeeCustomizationRequest> fees = Optional.empty();

        private Optional<Map<String, List<Permission>>> rolePermissions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityCustomizationRequest other) {
            metadata(other.getMetadata());
            paymentSource(other.getPaymentSource());
            backupDisbursement(other.getBackupDisbursement());
            paymentDestination(other.getPaymentDestination());
            ocr(other.getOcr());
            notifications(other.getNotifications());
            workflow(other.getWorkflow());
            invoice(other.getInvoice());
            fees(other.getFees());
            rolePermissions(other.getRolePermissions());
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<List<MetadataCustomizationRequest>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(List<MetadataCustomizationRequest> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "paymentSource", nulls = Nulls.SKIP)
        public Builder paymentSource(Optional<List<PaymentMethodCustomizationRequest>> paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }

        public Builder paymentSource(List<PaymentMethodCustomizationRequest> paymentSource) {
            this.paymentSource = Optional.ofNullable(paymentSource);
            return this;
        }

        @JsonSetter(value = "backupDisbursement", nulls = Nulls.SKIP)
        public Builder backupDisbursement(Optional<List<PaymentMethodCustomizationRequest>> backupDisbursement) {
            this.backupDisbursement = backupDisbursement;
            return this;
        }

        public Builder backupDisbursement(List<PaymentMethodCustomizationRequest> backupDisbursement) {
            this.backupDisbursement = Optional.ofNullable(backupDisbursement);
            return this;
        }

        @JsonSetter(value = "paymentDestination", nulls = Nulls.SKIP)
        public Builder paymentDestination(Optional<List<PaymentMethodCustomizationRequest>> paymentDestination) {
            this.paymentDestination = paymentDestination;
            return this;
        }

        public Builder paymentDestination(List<PaymentMethodCustomizationRequest> paymentDestination) {
            this.paymentDestination = Optional.ofNullable(paymentDestination);
            return this;
        }

        @JsonSetter(value = "ocr", nulls = Nulls.SKIP)
        public Builder ocr(Optional<OcrCustomizationRequest> ocr) {
            this.ocr = ocr;
            return this;
        }

        public Builder ocr(OcrCustomizationRequest ocr) {
            this.ocr = Optional.ofNullable(ocr);
            return this;
        }

        @JsonSetter(value = "notifications", nulls = Nulls.SKIP)
        public Builder notifications(Optional<NotificationCustomizationRequest> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder notifications(NotificationCustomizationRequest notifications) {
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        @JsonSetter(value = "workflow", nulls = Nulls.SKIP)
        public Builder workflow(Optional<WorkflowCustomizationRequest> workflow) {
            this.workflow = workflow;
            return this;
        }

        public Builder workflow(WorkflowCustomizationRequest workflow) {
            this.workflow = Optional.ofNullable(workflow);
            return this;
        }

        @JsonSetter(value = "invoice", nulls = Nulls.SKIP)
        public Builder invoice(Optional<InvoiceCustomizationRequest> invoice) {
            this.invoice = invoice;
            return this;
        }

        public Builder invoice(InvoiceCustomizationRequest invoice) {
            this.invoice = Optional.ofNullable(invoice);
            return this;
        }

        @JsonSetter(value = "fees", nulls = Nulls.SKIP)
        public Builder fees(Optional<FeeCustomizationRequest> fees) {
            this.fees = fees;
            return this;
        }

        public Builder fees(FeeCustomizationRequest fees) {
            this.fees = Optional.ofNullable(fees);
            return this;
        }

        @JsonSetter(value = "rolePermissions", nulls = Nulls.SKIP)
        public Builder rolePermissions(Optional<Map<String, List<Permission>>> rolePermissions) {
            this.rolePermissions = rolePermissions;
            return this;
        }

        public Builder rolePermissions(Map<String, List<Permission>> rolePermissions) {
            this.rolePermissions = Optional.ofNullable(rolePermissions);
            return this;
        }

        public EntityCustomizationRequest build() {
            return new EntityCustomizationRequest(
                    metadata,
                    paymentSource,
                    backupDisbursement,
                    paymentDestination,
                    ocr,
                    notifications,
                    workflow,
                    invoice,
                    fees,
                    rolePermissions,
                    additionalProperties);
        }
    }
}
