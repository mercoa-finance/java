/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CounterpartiesResponse.Builder.class)
public final class CounterpartiesResponse {
    private final List<CounterpartyResponse> entityCounterparties;

    private final List<CounterpartyResponse> platformCounterparties;

    private final List<CounterpartyResponse> mercoaCounterparties;

    private final Map<String, Object> additionalProperties;

    private CounterpartiesResponse(
            List<CounterpartyResponse> entityCounterparties,
            List<CounterpartyResponse> platformCounterparties,
            List<CounterpartyResponse> mercoaCounterparties,
            Map<String, Object> additionalProperties) {
        this.entityCounterparties = entityCounterparties;
        this.platformCounterparties = platformCounterparties;
        this.mercoaCounterparties = mercoaCounterparties;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Counterparties that have been paid by this entity
     */
    @JsonProperty("entityCounterparties")
    public List<CounterpartyResponse> getEntityCounterparties() {
        return entityCounterparties;
    }

    /**
     * @return Counterparties that have paid by any entity on your platform
     */
    @JsonProperty("platformCounterparties")
    public List<CounterpartyResponse> getPlatformCounterparties() {
        return platformCounterparties;
    }

    /**
     * @return External counterparties that have been verified by Mercoa
     */
    @JsonProperty("mercoaCounterparties")
    public List<CounterpartyResponse> getMercoaCounterparties() {
        return mercoaCounterparties;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CounterpartiesResponse && equalTo((CounterpartiesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CounterpartiesResponse other) {
        return entityCounterparties.equals(other.entityCounterparties)
                && platformCounterparties.equals(other.platformCounterparties)
                && mercoaCounterparties.equals(other.mercoaCounterparties);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entityCounterparties, this.platformCounterparties, this.mercoaCounterparties);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<CounterpartyResponse> entityCounterparties = new ArrayList<>();

        private List<CounterpartyResponse> platformCounterparties = new ArrayList<>();

        private List<CounterpartyResponse> mercoaCounterparties = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CounterpartiesResponse other) {
            entityCounterparties(other.getEntityCounterparties());
            platformCounterparties(other.getPlatformCounterparties());
            mercoaCounterparties(other.getMercoaCounterparties());
            return this;
        }

        /**
         * <p>Counterparties that have been paid by this entity</p>
         */
        @JsonSetter(value = "entityCounterparties", nulls = Nulls.SKIP)
        public Builder entityCounterparties(List<CounterpartyResponse> entityCounterparties) {
            this.entityCounterparties.clear();
            this.entityCounterparties.addAll(entityCounterparties);
            return this;
        }

        public Builder addEntityCounterparties(CounterpartyResponse entityCounterparties) {
            this.entityCounterparties.add(entityCounterparties);
            return this;
        }

        public Builder addAllEntityCounterparties(List<CounterpartyResponse> entityCounterparties) {
            this.entityCounterparties.addAll(entityCounterparties);
            return this;
        }

        /**
         * <p>Counterparties that have paid by any entity on your platform</p>
         */
        @JsonSetter(value = "platformCounterparties", nulls = Nulls.SKIP)
        public Builder platformCounterparties(List<CounterpartyResponse> platformCounterparties) {
            this.platformCounterparties.clear();
            this.platformCounterparties.addAll(platformCounterparties);
            return this;
        }

        public Builder addPlatformCounterparties(CounterpartyResponse platformCounterparties) {
            this.platformCounterparties.add(platformCounterparties);
            return this;
        }

        public Builder addAllPlatformCounterparties(List<CounterpartyResponse> platformCounterparties) {
            this.platformCounterparties.addAll(platformCounterparties);
            return this;
        }

        /**
         * <p>External counterparties that have been verified by Mercoa</p>
         */
        @JsonSetter(value = "mercoaCounterparties", nulls = Nulls.SKIP)
        public Builder mercoaCounterparties(List<CounterpartyResponse> mercoaCounterparties) {
            this.mercoaCounterparties.clear();
            this.mercoaCounterparties.addAll(mercoaCounterparties);
            return this;
        }

        public Builder addMercoaCounterparties(CounterpartyResponse mercoaCounterparties) {
            this.mercoaCounterparties.add(mercoaCounterparties);
            return this;
        }

        public Builder addAllMercoaCounterparties(List<CounterpartyResponse> mercoaCounterparties) {
            this.mercoaCounterparties.addAll(mercoaCounterparties);
            return this;
        }

        public CounterpartiesResponse build() {
            return new CounterpartiesResponse(
                    entityCounterparties, platformCounterparties, mercoaCounterparties, additionalProperties);
        }
    }
}
