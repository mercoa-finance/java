/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CounterpartyCustomizationAccount.Builder.class)
public final class CounterpartyCustomizationAccount {
    private final String accountId;

    private final Optional<String> postalCode;

    private final Optional<String> nameOnAccount;

    private final Map<String, Object> additionalProperties;

    private CounterpartyCustomizationAccount(
            String accountId,
            Optional<String> postalCode,
            Optional<String> nameOnAccount,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.postalCode = postalCode;
        this.nameOnAccount = nameOnAccount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID the counterparty has assigned to this account.
     */
    @JsonProperty("accountId")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return The postal code the counterparty has assigned to this account.
     */
    @JsonProperty("postalCode")
    public Optional<String> getPostalCode() {
        return postalCode;
    }

    /**
     * @return The name on the account the counterparty has assigned to this account.
     */
    @JsonProperty("nameOnAccount")
    public Optional<String> getNameOnAccount() {
        return nameOnAccount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CounterpartyCustomizationAccount && equalTo((CounterpartyCustomizationAccount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CounterpartyCustomizationAccount other) {
        return accountId.equals(other.accountId)
                && postalCode.equals(other.postalCode)
                && nameOnAccount.equals(other.nameOnAccount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.postalCode, this.nameOnAccount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        /**
         * <p>The ID the counterparty has assigned to this account.</p>
         */
        _FinalStage accountId(@NotNull String accountId);

        Builder from(CounterpartyCustomizationAccount other);
    }

    public interface _FinalStage {
        CounterpartyCustomizationAccount build();

        /**
         * <p>The postal code the counterparty has assigned to this account.</p>
         */
        _FinalStage postalCode(Optional<String> postalCode);

        _FinalStage postalCode(String postalCode);

        /**
         * <p>The name on the account the counterparty has assigned to this account.</p>
         */
        _FinalStage nameOnAccount(Optional<String> nameOnAccount);

        _FinalStage nameOnAccount(String nameOnAccount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountIdStage, _FinalStage {
        private String accountId;

        private Optional<String> nameOnAccount = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CounterpartyCustomizationAccount other) {
            accountId(other.getAccountId());
            postalCode(other.getPostalCode());
            nameOnAccount(other.getNameOnAccount());
            return this;
        }

        /**
         * <p>The ID the counterparty has assigned to this account.</p>
         * <p>The ID the counterparty has assigned to this account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accountId")
        public _FinalStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>The name on the account the counterparty has assigned to this account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nameOnAccount(String nameOnAccount) {
            this.nameOnAccount = Optional.ofNullable(nameOnAccount);
            return this;
        }

        /**
         * <p>The name on the account the counterparty has assigned to this account.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "nameOnAccount", nulls = Nulls.SKIP)
        public _FinalStage nameOnAccount(Optional<String> nameOnAccount) {
            this.nameOnAccount = nameOnAccount;
            return this;
        }

        /**
         * <p>The postal code the counterparty has assigned to this account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * <p>The postal code the counterparty has assigned to this account.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "postalCode", nulls = Nulls.SKIP)
        public _FinalStage postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        @java.lang.Override
        public CounterpartyCustomizationAccount build() {
            return new CounterpartyCustomizationAccount(accountId, postalCode, nameOnAccount, additionalProperties);
        }
    }
}
