/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityEventsResponse.Builder.class)
public final class EntityEventsResponse {
    private final List<EntityEvent> data;

    private final int count;

    private final Map<String, Object> additionalProperties;

    private EntityEventsResponse(List<EntityEvent> data, int count, Map<String, Object> additionalProperties) {
        this.data = data;
        this.count = count;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public List<EntityEvent> getData() {
        return data;
    }

    @JsonProperty("count")
    public int getCount() {
        return count;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityEventsResponse && equalTo((EntityEventsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityEventsResponse other) {
        return data.equals(other.data) && count == other.count;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.count);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountStage builder() {
        return new Builder();
    }

    public interface CountStage {
        _FinalStage count(int count);

        Builder from(EntityEventsResponse other);
    }

    public interface _FinalStage {
        EntityEventsResponse build();

        _FinalStage data(List<EntityEvent> data);

        _FinalStage addData(EntityEvent data);

        _FinalStage addAllData(List<EntityEvent> data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountStage, _FinalStage {
        private int count;

        private List<EntityEvent> data = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EntityEventsResponse other) {
            data(other.getData());
            count(other.getCount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("count")
        public _FinalStage count(int count) {
            this.count = count;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllData(List<EntityEvent> data) {
            this.data.addAll(data);
            return this;
        }

        @java.lang.Override
        public _FinalStage addData(EntityEvent data) {
            this.data.add(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(List<EntityEvent> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        @java.lang.Override
        public EntityEventsResponse build() {
            return new EntityEventsResponse(data, count, additionalProperties);
        }
    }
}
