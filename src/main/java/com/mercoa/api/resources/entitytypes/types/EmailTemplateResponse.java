/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailTemplateResponse.Builder.class)
public final class EmailTemplateResponse {
    private final String id;

    private final String entityId;

    private final EmailTemplateType templateType;

    private final String name;

    private final String subject;

    private final String content;

    private final boolean isDefault;

    private final Map<String, Object> additionalProperties;

    private EmailTemplateResponse(
            String id,
            String entityId,
            EmailTemplateType templateType,
            String name,
            String subject,
            String content,
            boolean isDefault,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.entityId = entityId;
        this.templateType = templateType;
        this.name = name;
        this.subject = subject;
        this.content = content;
        this.isDefault = isDefault;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The ID of the entity that this email template is associated with.
     */
    @JsonProperty("entityId")
    public String getEntityId() {
        return entityId;
    }

    @JsonProperty("templateType")
    public EmailTemplateType getTemplateType() {
        return templateType;
    }

    /**
     * @return The name of the email template.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The subject of the email template.
     */
    @JsonProperty("subject")
    public String getSubject() {
        return subject;
    }

    /**
     * @return The HTML content of the email template.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return True if this email template is the default template for new invoices.
     */
    @JsonProperty("isDefault")
    public boolean getIsDefault() {
        return isDefault;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailTemplateResponse && equalTo((EmailTemplateResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailTemplateResponse other) {
        return id.equals(other.id)
                && entityId.equals(other.entityId)
                && templateType.equals(other.templateType)
                && name.equals(other.name)
                && subject.equals(other.subject)
                && content.equals(other.content)
                && isDefault == other.isDefault;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.entityId, this.templateType, this.name, this.subject, this.content, this.isDefault);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        EntityIdStage id(@NotNull String id);

        Builder from(EmailTemplateResponse other);
    }

    public interface EntityIdStage {
        TemplateTypeStage entityId(@NotNull String entityId);
    }

    public interface TemplateTypeStage {
        NameStage templateType(@NotNull EmailTemplateType templateType);
    }

    public interface NameStage {
        SubjectStage name(@NotNull String name);
    }

    public interface SubjectStage {
        ContentStage subject(@NotNull String subject);
    }

    public interface ContentStage {
        IsDefaultStage content(@NotNull String content);
    }

    public interface IsDefaultStage {
        _FinalStage isDefault(boolean isDefault);
    }

    public interface _FinalStage {
        EmailTemplateResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    EntityIdStage,
                    TemplateTypeStage,
                    NameStage,
                    SubjectStage,
                    ContentStage,
                    IsDefaultStage,
                    _FinalStage {
        private String id;

        private String entityId;

        private EmailTemplateType templateType;

        private String name;

        private String subject;

        private String content;

        private boolean isDefault;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailTemplateResponse other) {
            id(other.getId());
            entityId(other.getEntityId());
            templateType(other.getTemplateType());
            name(other.getName());
            subject(other.getSubject());
            content(other.getContent());
            isDefault(other.getIsDefault());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public EntityIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The ID of the entity that this email template is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("entityId")
        public TemplateTypeStage entityId(@NotNull String entityId) {
            this.entityId = Objects.requireNonNull(entityId, "entityId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("templateType")
        public NameStage templateType(@NotNull EmailTemplateType templateType) {
            this.templateType = Objects.requireNonNull(templateType, "templateType must not be null");
            return this;
        }

        /**
         * <p>The name of the email template.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public SubjectStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The subject of the email template.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subject")
        public ContentStage subject(@NotNull String subject) {
            this.subject = Objects.requireNonNull(subject, "subject must not be null");
            return this;
        }

        /**
         * <p>The HTML content of the email template.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public IsDefaultStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>True if this email template is the default template for new invoices.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("isDefault")
        public _FinalStage isDefault(boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }

        @java.lang.Override
        public EmailTemplateResponse build() {
            return new EmailTemplateResponse(
                    id, entityId, templateType, name, subject, content, isDefault, additionalProperties);
        }
    }
}
