/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApprovalPolicyResponse.Builder.class)
public final class ApprovalPolicyResponse {
    private final String id;

    private final List<Trigger> trigger;

    private final Rule rule;

    private final String upstreamPolicyId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ApprovalPolicyResponse(
            String id,
            List<Trigger> trigger,
            Rule rule,
            String upstreamPolicyId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.trigger = trigger;
        this.rule = rule;
        this.upstreamPolicyId = upstreamPolicyId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("trigger")
    public List<Trigger> getTrigger() {
        return trigger;
    }

    @JsonProperty("rule")
    public Rule getRule() {
        return rule;
    }

    @JsonProperty("upstreamPolicyId")
    public String getUpstreamPolicyId() {
        return upstreamPolicyId;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApprovalPolicyResponse && equalTo((ApprovalPolicyResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApprovalPolicyResponse other) {
        return id.equals(other.id)
                && trigger.equals(other.trigger)
                && rule.equals(other.rule)
                && upstreamPolicyId.equals(other.upstreamPolicyId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.trigger, this.rule, this.upstreamPolicyId, this.createdAt, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        RuleStage id(@NotNull String id);

        Builder from(ApprovalPolicyResponse other);
    }

    public interface RuleStage {
        UpstreamPolicyIdStage rule(@NotNull Rule rule);
    }

    public interface UpstreamPolicyIdStage {
        CreatedAtStage upstreamPolicyId(@NotNull String upstreamPolicyId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ApprovalPolicyResponse build();

        _FinalStage trigger(List<Trigger> trigger);

        _FinalStage addTrigger(Trigger trigger);

        _FinalStage addAllTrigger(List<Trigger> trigger);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, RuleStage, UpstreamPolicyIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private Rule rule;

        private String upstreamPolicyId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private List<Trigger> trigger = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApprovalPolicyResponse other) {
            id(other.getId());
            trigger(other.getTrigger());
            rule(other.getRule());
            upstreamPolicyId(other.getUpstreamPolicyId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public RuleStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("rule")
        public UpstreamPolicyIdStage rule(@NotNull Rule rule) {
            this.rule = Objects.requireNonNull(rule, "rule must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("upstreamPolicyId")
        public CreatedAtStage upstreamPolicyId(@NotNull String upstreamPolicyId) {
            this.upstreamPolicyId = Objects.requireNonNull(upstreamPolicyId, "upstreamPolicyId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllTrigger(List<Trigger> trigger) {
            if (trigger != null) {
                this.trigger.addAll(trigger);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addTrigger(Trigger trigger) {
            this.trigger.add(trigger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "trigger", nulls = Nulls.SKIP)
        public _FinalStage trigger(List<Trigger> trigger) {
            this.trigger.clear();
            this.trigger.addAll(trigger);
            return this;
        }

        @java.lang.Override
        public ApprovalPolicyResponse build() {
            return new ApprovalPolicyResponse(
                    id, trigger, rule, upstreamPolicyId, createdAt, updatedAt, additionalProperties);
        }
    }
}
