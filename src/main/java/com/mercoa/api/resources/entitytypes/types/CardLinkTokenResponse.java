/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardLinkTokenResponse.Builder.class)
public final class CardLinkTokenResponse {
    private final String token;

    private final String accountId;

    private final Map<String, Object> additionalProperties;

    private CardLinkTokenResponse(String token, String accountId, Map<String, Object> additionalProperties) {
        this.token = token;
        this.accountId = accountId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("token")
    public String getToken() {
        return token;
    }

    @JsonProperty("accountId")
    public String getAccountId() {
        return accountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardLinkTokenResponse && equalTo((CardLinkTokenResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardLinkTokenResponse other) {
        return token.equals(other.token) && accountId.equals(other.accountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.token, this.accountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TokenStage builder() {
        return new Builder();
    }

    public interface TokenStage {
        AccountIdStage token(@NotNull String token);

        Builder from(CardLinkTokenResponse other);
    }

    public interface AccountIdStage {
        _FinalStage accountId(@NotNull String accountId);
    }

    public interface _FinalStage {
        CardLinkTokenResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TokenStage, AccountIdStage, _FinalStage {
        private String token;

        private String accountId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CardLinkTokenResponse other) {
            token(other.getToken());
            accountId(other.getAccountId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("token")
        public AccountIdStage token(@NotNull String token) {
            this.token = Objects.requireNonNull(token, "token must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountId")
        public _FinalStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        @java.lang.Override
        public CardLinkTokenResponse build() {
            return new CardLinkTokenResponse(token, accountId, additionalProperties);
        }
    }
}
