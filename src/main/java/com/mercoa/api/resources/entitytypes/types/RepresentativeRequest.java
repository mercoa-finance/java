/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.Address;
import com.mercoa.api.resources.commons.types.BirthDate;
import com.mercoa.api.resources.commons.types.FullName;
import com.mercoa.api.resources.commons.types.IndividualGovernmentId;
import com.mercoa.api.resources.commons.types.PhoneNumber;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RepresentativeRequest.Builder.class)
public final class RepresentativeRequest {
    private final FullName name;

    private final PhoneNumber phone;

    private final String email;

    private final Address address;

    private final BirthDate birthDate;

    private final IndividualGovernmentId governmentId;

    private final Responsibilities responsibilities;

    private final Map<String, Object> additionalProperties;

    private RepresentativeRequest(
            FullName name,
            PhoneNumber phone,
            String email,
            Address address,
            BirthDate birthDate,
            IndividualGovernmentId governmentId,
            Responsibilities responsibilities,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.birthDate = birthDate;
        this.governmentId = governmentId;
        this.responsibilities = responsibilities;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public FullName getName() {
        return name;
    }

    @JsonProperty("phone")
    public PhoneNumber getPhone() {
        return phone;
    }

    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    @JsonProperty("address")
    public Address getAddress() {
        return address;
    }

    @JsonProperty("birthDate")
    public BirthDate getBirthDate() {
        return birthDate;
    }

    @JsonProperty("governmentID")
    public IndividualGovernmentId getGovernmentId() {
        return governmentId;
    }

    @JsonProperty("responsibilities")
    public Responsibilities getResponsibilities() {
        return responsibilities;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RepresentativeRequest && equalTo((RepresentativeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RepresentativeRequest other) {
        return name.equals(other.name)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address.equals(other.address)
                && birthDate.equals(other.birthDate)
                && governmentId.equals(other.governmentId)
                && responsibilities.equals(other.responsibilities);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.phone,
                this.email,
                this.address,
                this.birthDate,
                this.governmentId,
                this.responsibilities);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        PhoneStage name(FullName name);

        Builder from(RepresentativeRequest other);
    }

    public interface PhoneStage {
        EmailStage phone(PhoneNumber phone);
    }

    public interface EmailStage {
        AddressStage email(String email);
    }

    public interface AddressStage {
        BirthDateStage address(Address address);
    }

    public interface BirthDateStage {
        GovernmentIdStage birthDate(BirthDate birthDate);
    }

    public interface GovernmentIdStage {
        ResponsibilitiesStage governmentId(IndividualGovernmentId governmentId);
    }

    public interface ResponsibilitiesStage {
        _FinalStage responsibilities(Responsibilities responsibilities);
    }

    public interface _FinalStage {
        RepresentativeRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameStage,
                    PhoneStage,
                    EmailStage,
                    AddressStage,
                    BirthDateStage,
                    GovernmentIdStage,
                    ResponsibilitiesStage,
                    _FinalStage {
        private FullName name;

        private PhoneNumber phone;

        private String email;

        private Address address;

        private BirthDate birthDate;

        private IndividualGovernmentId governmentId;

        private Responsibilities responsibilities;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RepresentativeRequest other) {
            name(other.getName());
            phone(other.getPhone());
            email(other.getEmail());
            address(other.getAddress());
            birthDate(other.getBirthDate());
            governmentId(other.getGovernmentId());
            responsibilities(other.getResponsibilities());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public PhoneStage name(FullName name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("phone")
        public EmailStage phone(PhoneNumber phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public AddressStage email(String email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        @JsonSetter("address")
        public BirthDateStage address(Address address) {
            this.address = address;
            return this;
        }

        @java.lang.Override
        @JsonSetter("birthDate")
        public GovernmentIdStage birthDate(BirthDate birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        @java.lang.Override
        @JsonSetter("governmentID")
        public ResponsibilitiesStage governmentId(IndividualGovernmentId governmentId) {
            this.governmentId = governmentId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("responsibilities")
        public _FinalStage responsibilities(Responsibilities responsibilities) {
            this.responsibilities = responsibilities;
            return this;
        }

        @java.lang.Override
        public RepresentativeRequest build() {
            return new RepresentativeRequest(
                    name, phone, email, address, birthDate, governmentId, responsibilities, additionalProperties);
        }
    }
}
