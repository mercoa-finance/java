/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApprovalPolicyHistoryResponse.Builder.class)
public final class ApprovalPolicyHistoryResponse {
    private final String id;

    private final List<ApprovalPolicyResponse> policies;

    private final String userId;

    private final OffsetDateTime createdAt;

    private final Map<String, Object> additionalProperties;

    private ApprovalPolicyHistoryResponse(
            String id,
            List<ApprovalPolicyResponse> policies,
            String userId,
            OffsetDateTime createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.policies = policies;
        this.userId = userId;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the approval policy history
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("policies")
    public List<ApprovalPolicyResponse> getPolicies() {
        return policies;
    }

    /**
     * @return The user ID of the user who edited the approval policy
     */
    @JsonProperty("userId")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApprovalPolicyHistoryResponse && equalTo((ApprovalPolicyHistoryResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApprovalPolicyHistoryResponse other) {
        return id.equals(other.id)
                && policies.equals(other.policies)
                && userId.equals(other.userId)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.policies, this.userId, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The ID of the approval policy history</p>
         */
        UserIdStage id(@NotNull String id);

        Builder from(ApprovalPolicyHistoryResponse other);
    }

    public interface UserIdStage {
        /**
         * <p>The user ID of the user who edited the approval policy</p>
         */
        CreatedAtStage userId(@NotNull String userId);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        ApprovalPolicyHistoryResponse build();

        _FinalStage policies(List<ApprovalPolicyResponse> policies);

        _FinalStage addPolicies(ApprovalPolicyResponse policies);

        _FinalStage addAllPolicies(List<ApprovalPolicyResponse> policies);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, UserIdStage, CreatedAtStage, _FinalStage {
        private String id;

        private String userId;

        private OffsetDateTime createdAt;

        private List<ApprovalPolicyResponse> policies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApprovalPolicyHistoryResponse other) {
            id(other.getId());
            policies(other.getPolicies());
            userId(other.getUserId());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The ID of the approval policy history</p>
         * <p>The ID of the approval policy history</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public UserIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The user ID of the user who edited the approval policy</p>
         * <p>The user ID of the user who edited the approval policy</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public CreatedAtStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllPolicies(List<ApprovalPolicyResponse> policies) {
            this.policies.addAll(policies);
            return this;
        }

        @java.lang.Override
        public _FinalStage addPolicies(ApprovalPolicyResponse policies) {
            this.policies.add(policies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "policies", nulls = Nulls.SKIP)
        public _FinalStage policies(List<ApprovalPolicyResponse> policies) {
            this.policies.clear();
            this.policies.addAll(policies);
            return this;
        }

        @java.lang.Override
        public ApprovalPolicyHistoryResponse build() {
            return new ApprovalPolicyHistoryResponse(id, policies, userId, createdAt, additionalProperties);
        }
    }
}
