/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.Address;
import com.mercoa.api.resources.commons.types.BirthDate;
import com.mercoa.api.resources.commons.types.FullName;
import com.mercoa.api.resources.commons.types.IndividualGovernmentId;
import com.mercoa.api.resources.commons.types.PhoneNumber;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndividualProfileRequest.Builder.class)
public final class IndividualProfileRequest {
    private final Optional<String> email;

    private final FullName name;

    private final Optional<PhoneNumber> phone;

    private final Optional<Address> address;

    private final Optional<BirthDate> birthDate;

    private final Optional<IndividualGovernmentId> governmentId;

    private final Map<String, Object> additionalProperties;

    private IndividualProfileRequest(
            Optional<String> email,
            FullName name,
            Optional<PhoneNumber> phone,
            Optional<Address> address,
            Optional<BirthDate> birthDate,
            Optional<IndividualGovernmentId> governmentId,
            Map<String, Object> additionalProperties) {
        this.email = email;
        this.name = name;
        this.phone = phone;
        this.address = address;
        this.birthDate = birthDate;
        this.governmentId = governmentId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("name")
    public FullName getName() {
        return name;
    }

    @JsonProperty("phone")
    public Optional<PhoneNumber> getPhone() {
        return phone;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonProperty("birthDate")
    public Optional<BirthDate> getBirthDate() {
        return birthDate;
    }

    @JsonProperty("governmentID")
    public Optional<IndividualGovernmentId> getGovernmentId() {
        return governmentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualProfileRequest && equalTo((IndividualProfileRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualProfileRequest other) {
        return email.equals(other.email)
                && name.equals(other.name)
                && phone.equals(other.phone)
                && address.equals(other.address)
                && birthDate.equals(other.birthDate)
                && governmentId.equals(other.governmentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.email, this.name, this.phone, this.address, this.birthDate, this.governmentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull FullName name);

        Builder from(IndividualProfileRequest other);
    }

    public interface _FinalStage {
        IndividualProfileRequest build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage phone(Optional<PhoneNumber> phone);

        _FinalStage phone(PhoneNumber phone);

        _FinalStage address(Optional<Address> address);

        _FinalStage address(Address address);

        _FinalStage birthDate(Optional<BirthDate> birthDate);

        _FinalStage birthDate(BirthDate birthDate);

        _FinalStage governmentId(Optional<IndividualGovernmentId> governmentId);

        _FinalStage governmentId(IndividualGovernmentId governmentId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private FullName name;

        private Optional<IndividualGovernmentId> governmentId = Optional.empty();

        private Optional<BirthDate> birthDate = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<PhoneNumber> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IndividualProfileRequest other) {
            email(other.getEmail());
            name(other.getName());
            phone(other.getPhone());
            address(other.getAddress());
            birthDate(other.getBirthDate());
            governmentId(other.getGovernmentId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull FullName name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage governmentId(IndividualGovernmentId governmentId) {
            this.governmentId = Optional.ofNullable(governmentId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "governmentID", nulls = Nulls.SKIP)
        public _FinalStage governmentId(Optional<IndividualGovernmentId> governmentId) {
            this.governmentId = governmentId;
            return this;
        }

        @java.lang.Override
        public _FinalStage birthDate(BirthDate birthDate) {
            this.birthDate = Optional.ofNullable(birthDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "birthDate", nulls = Nulls.SKIP)
        public _FinalStage birthDate(Optional<BirthDate> birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public _FinalStage address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        @java.lang.Override
        public _FinalStage phone(PhoneNumber phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public _FinalStage phone(Optional<PhoneNumber> phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public IndividualProfileRequest build() {
            return new IndividualProfileRequest(
                    email, name, phone, address, birthDate, governmentId, additionalProperties);
        }
    }
}
