/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenGenerationPagesOptions.Builder.class)
public final class TokenGenerationPagesOptions {
    private final Optional<Boolean> paymentMethods;

    private final Optional<Boolean> representatives;

    private final Optional<Boolean> notifications;

    private final Optional<Boolean> counterparties;

    private final Optional<Boolean> approvals;

    private final Optional<Boolean> emailLog;

    private final Map<String, Object> additionalProperties;

    private TokenGenerationPagesOptions(
            Optional<Boolean> paymentMethods,
            Optional<Boolean> representatives,
            Optional<Boolean> notifications,
            Optional<Boolean> counterparties,
            Optional<Boolean> approvals,
            Optional<Boolean> emailLog,
            Map<String, Object> additionalProperties) {
        this.paymentMethods = paymentMethods;
        this.representatives = representatives;
        this.notifications = notifications;
        this.counterparties = counterparties;
        this.approvals = approvals;
        this.emailLog = emailLog;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("paymentMethods")
    public Optional<Boolean> getPaymentMethods() {
        return paymentMethods;
    }

    @JsonProperty("representatives")
    public Optional<Boolean> getRepresentatives() {
        return representatives;
    }

    @JsonProperty("notifications")
    public Optional<Boolean> getNotifications() {
        return notifications;
    }

    @JsonProperty("counterparties")
    public Optional<Boolean> getCounterparties() {
        return counterparties;
    }

    @JsonProperty("approvals")
    public Optional<Boolean> getApprovals() {
        return approvals;
    }

    @JsonProperty("emailLog")
    public Optional<Boolean> getEmailLog() {
        return emailLog;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenGenerationPagesOptions && equalTo((TokenGenerationPagesOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenGenerationPagesOptions other) {
        return paymentMethods.equals(other.paymentMethods)
                && representatives.equals(other.representatives)
                && notifications.equals(other.notifications)
                && counterparties.equals(other.counterparties)
                && approvals.equals(other.approvals)
                && emailLog.equals(other.emailLog);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.paymentMethods,
                this.representatives,
                this.notifications,
                this.counterparties,
                this.approvals,
                this.emailLog);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> paymentMethods = Optional.empty();

        private Optional<Boolean> representatives = Optional.empty();

        private Optional<Boolean> notifications = Optional.empty();

        private Optional<Boolean> counterparties = Optional.empty();

        private Optional<Boolean> approvals = Optional.empty();

        private Optional<Boolean> emailLog = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenGenerationPagesOptions other) {
            paymentMethods(other.getPaymentMethods());
            representatives(other.getRepresentatives());
            notifications(other.getNotifications());
            counterparties(other.getCounterparties());
            approvals(other.getApprovals());
            emailLog(other.getEmailLog());
            return this;
        }

        @JsonSetter(value = "paymentMethods", nulls = Nulls.SKIP)
        public Builder paymentMethods(Optional<Boolean> paymentMethods) {
            this.paymentMethods = paymentMethods;
            return this;
        }

        public Builder paymentMethods(Boolean paymentMethods) {
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        @JsonSetter(value = "representatives", nulls = Nulls.SKIP)
        public Builder representatives(Optional<Boolean> representatives) {
            this.representatives = representatives;
            return this;
        }

        public Builder representatives(Boolean representatives) {
            this.representatives = Optional.ofNullable(representatives);
            return this;
        }

        @JsonSetter(value = "notifications", nulls = Nulls.SKIP)
        public Builder notifications(Optional<Boolean> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder notifications(Boolean notifications) {
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        @JsonSetter(value = "counterparties", nulls = Nulls.SKIP)
        public Builder counterparties(Optional<Boolean> counterparties) {
            this.counterparties = counterparties;
            return this;
        }

        public Builder counterparties(Boolean counterparties) {
            this.counterparties = Optional.ofNullable(counterparties);
            return this;
        }

        @JsonSetter(value = "approvals", nulls = Nulls.SKIP)
        public Builder approvals(Optional<Boolean> approvals) {
            this.approvals = approvals;
            return this;
        }

        public Builder approvals(Boolean approvals) {
            this.approvals = Optional.ofNullable(approvals);
            return this;
        }

        @JsonSetter(value = "emailLog", nulls = Nulls.SKIP)
        public Builder emailLog(Optional<Boolean> emailLog) {
            this.emailLog = emailLog;
            return this;
        }

        public Builder emailLog(Boolean emailLog) {
            this.emailLog = Optional.ofNullable(emailLog);
            return this;
        }

        public TokenGenerationPagesOptions build() {
            return new TokenGenerationPagesOptions(
                    paymentMethods,
                    representatives,
                    notifications,
                    counterparties,
                    approvals,
                    emailLog,
                    additionalProperties);
        }
    }
}
