/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApprovalPolicyUpdateRequest.Builder.class)
public final class ApprovalPolicyUpdateRequest {
    private final Optional<List<Trigger>> trigger;

    private final Optional<Rule> rule;

    private final Optional<String> upstreamPolicyId;

    private final Map<String, Object> additionalProperties;

    private ApprovalPolicyUpdateRequest(
            Optional<List<Trigger>> trigger,
            Optional<Rule> rule,
            Optional<String> upstreamPolicyId,
            Map<String, Object> additionalProperties) {
        this.trigger = trigger;
        this.rule = rule;
        this.upstreamPolicyId = upstreamPolicyId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("trigger")
    public Optional<List<Trigger>> getTrigger() {
        return trigger;
    }

    @JsonProperty("rule")
    public Optional<Rule> getRule() {
        return rule;
    }

    @JsonProperty("upstreamPolicyId")
    public Optional<String> getUpstreamPolicyId() {
        return upstreamPolicyId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApprovalPolicyUpdateRequest && equalTo((ApprovalPolicyUpdateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApprovalPolicyUpdateRequest other) {
        return trigger.equals(other.trigger)
                && rule.equals(other.rule)
                && upstreamPolicyId.equals(other.upstreamPolicyId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.trigger, this.rule, this.upstreamPolicyId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Trigger>> trigger = Optional.empty();

        private Optional<Rule> rule = Optional.empty();

        private Optional<String> upstreamPolicyId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApprovalPolicyUpdateRequest other) {
            trigger(other.getTrigger());
            rule(other.getRule());
            upstreamPolicyId(other.getUpstreamPolicyId());
            return this;
        }

        @JsonSetter(value = "trigger", nulls = Nulls.SKIP)
        public Builder trigger(Optional<List<Trigger>> trigger) {
            this.trigger = trigger;
            return this;
        }

        public Builder trigger(List<Trigger> trigger) {
            this.trigger = Optional.ofNullable(trigger);
            return this;
        }

        @JsonSetter(value = "rule", nulls = Nulls.SKIP)
        public Builder rule(Optional<Rule> rule) {
            this.rule = rule;
            return this;
        }

        public Builder rule(Rule rule) {
            this.rule = Optional.ofNullable(rule);
            return this;
        }

        @JsonSetter(value = "upstreamPolicyId", nulls = Nulls.SKIP)
        public Builder upstreamPolicyId(Optional<String> upstreamPolicyId) {
            this.upstreamPolicyId = upstreamPolicyId;
            return this;
        }

        public Builder upstreamPolicyId(String upstreamPolicyId) {
            this.upstreamPolicyId = Optional.ofNullable(upstreamPolicyId);
            return this;
        }

        public ApprovalPolicyUpdateRequest build() {
            return new ApprovalPolicyUpdateRequest(trigger, rule, upstreamPolicyId, additionalProperties);
        }
    }
}
