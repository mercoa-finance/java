/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.Address;
import com.mercoa.api.resources.commons.types.FullName;
import com.mercoa.api.resources.commons.types.PhoneNumber;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = IndividualProfileResponse.Builder.class)
public final class IndividualProfileResponse {
    private final Optional<String> email;

    private final FullName name;

    private final Optional<PhoneNumber> phone;

    private final Optional<Address> address;

    private final boolean birthDateProvided;

    private final boolean governmentIdProvided;

    private final Map<String, Object> additionalProperties;

    private IndividualProfileResponse(
            Optional<String> email,
            FullName name,
            Optional<PhoneNumber> phone,
            Optional<Address> address,
            boolean birthDateProvided,
            boolean governmentIdProvided,
            Map<String, Object> additionalProperties) {
        this.email = email;
        this.name = name;
        this.phone = phone;
        this.address = address;
        this.birthDateProvided = birthDateProvided;
        this.governmentIdProvided = governmentIdProvided;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("name")
    public FullName getName() {
        return name;
    }

    @JsonProperty("phone")
    public Optional<PhoneNumber> getPhone() {
        return phone;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonProperty("birthDateProvided")
    public boolean getBirthDateProvided() {
        return birthDateProvided;
    }

    @JsonProperty("governmentIDProvided")
    public boolean getGovernmentIdProvided() {
        return governmentIdProvided;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualProfileResponse && equalTo((IndividualProfileResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualProfileResponse other) {
        return email.equals(other.email)
                && name.equals(other.name)
                && phone.equals(other.phone)
                && address.equals(other.address)
                && birthDateProvided == other.birthDateProvided
                && governmentIdProvided == other.governmentIdProvided;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.email, this.name, this.phone, this.address, this.birthDateProvided, this.governmentIdProvided);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        BirthDateProvidedStage name(FullName name);

        Builder from(IndividualProfileResponse other);
    }

    public interface BirthDateProvidedStage {
        GovernmentIdProvidedStage birthDateProvided(boolean birthDateProvided);
    }

    public interface GovernmentIdProvidedStage {
        _FinalStage governmentIdProvided(boolean governmentIdProvided);
    }

    public interface _FinalStage {
        IndividualProfileResponse build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage phone(Optional<PhoneNumber> phone);

        _FinalStage phone(PhoneNumber phone);

        _FinalStage address(Optional<Address> address);

        _FinalStage address(Address address);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameStage, BirthDateProvidedStage, GovernmentIdProvidedStage, _FinalStage {
        private FullName name;

        private boolean birthDateProvided;

        private boolean governmentIdProvided;

        private Optional<Address> address = Optional.empty();

        private Optional<PhoneNumber> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IndividualProfileResponse other) {
            email(other.getEmail());
            name(other.getName());
            phone(other.getPhone());
            address(other.getAddress());
            birthDateProvided(other.getBirthDateProvided());
            governmentIdProvided(other.getGovernmentIdProvided());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public BirthDateProvidedStage name(FullName name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("birthDateProvided")
        public GovernmentIdProvidedStage birthDateProvided(boolean birthDateProvided) {
            this.birthDateProvided = birthDateProvided;
            return this;
        }

        @java.lang.Override
        @JsonSetter("governmentIDProvided")
        public _FinalStage governmentIdProvided(boolean governmentIdProvided) {
            this.governmentIdProvided = governmentIdProvided;
            return this;
        }

        @java.lang.Override
        public _FinalStage address(Address address) {
            this.address = Optional.of(address);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public _FinalStage address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        @java.lang.Override
        public _FinalStage phone(PhoneNumber phone) {
            this.phone = Optional.of(phone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public _FinalStage phone(Optional<PhoneNumber> phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public IndividualProfileResponse build() {
            return new IndividualProfileResponse(
                    email, name, phone, address, birthDateProvided, governmentIdProvided, additionalProperties);
        }
    }
}
