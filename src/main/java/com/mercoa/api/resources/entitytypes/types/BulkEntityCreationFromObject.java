/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkEntityCreationFromObject.Builder.class)
public final class BulkEntityCreationFromObject {
    private final Optional<BulkConnectedEntity> connectedEntity;

    private final List<EntityCreationRequest> entities;

    private final Map<String, Object> additionalProperties;

    private BulkEntityCreationFromObject(
            Optional<BulkConnectedEntity> connectedEntity,
            List<EntityCreationRequest> entities,
            Map<String, Object> additionalProperties) {
        this.connectedEntity = connectedEntity;
        this.entities = entities;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("connectedEntity")
    public Optional<BulkConnectedEntity> getConnectedEntity() {
        return connectedEntity;
    }

    @JsonProperty("entities")
    public List<EntityCreationRequest> getEntities() {
        return entities;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkEntityCreationFromObject && equalTo((BulkEntityCreationFromObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkEntityCreationFromObject other) {
        return connectedEntity.equals(other.connectedEntity) && entities.equals(other.entities);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.connectedEntity, this.entities);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BulkConnectedEntity> connectedEntity = Optional.empty();

        private List<EntityCreationRequest> entities = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkEntityCreationFromObject other) {
            connectedEntity(other.getConnectedEntity());
            entities(other.getEntities());
            return this;
        }

        @JsonSetter(value = "connectedEntity", nulls = Nulls.SKIP)
        public Builder connectedEntity(Optional<BulkConnectedEntity> connectedEntity) {
            this.connectedEntity = connectedEntity;
            return this;
        }

        public Builder connectedEntity(BulkConnectedEntity connectedEntity) {
            this.connectedEntity = Optional.ofNullable(connectedEntity);
            return this;
        }

        @JsonSetter(value = "entities", nulls = Nulls.SKIP)
        public Builder entities(List<EntityCreationRequest> entities) {
            this.entities.clear();
            this.entities.addAll(entities);
            return this;
        }

        public Builder addEntities(EntityCreationRequest entities) {
            this.entities.add(entities);
            return this;
        }

        public Builder addAllEntities(List<EntityCreationRequest> entities) {
            if (entities != null) {
                this.entities.addAll(entities);
            }
            return this;
        }

        public BulkEntityCreationFromObject build() {
            return new BulkEntityCreationFromObject(connectedEntity, entities, additionalProperties);
        }
    }
}
