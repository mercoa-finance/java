/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationPolicyRequest.Builder.class)
public final class NotificationPolicyRequest {
    private final Optional<Boolean> disabled;

    private final Optional<List<String>> additionalRoles;

    private final Optional<List<String>> additionalUsers;

    private final Optional<Boolean> notifyPayeeCounterparty;

    private final Optional<Boolean> notifyPayorCounterparty;

    private final Map<String, Object> additionalProperties;

    private NotificationPolicyRequest(
            Optional<Boolean> disabled,
            Optional<List<String>> additionalRoles,
            Optional<List<String>> additionalUsers,
            Optional<Boolean> notifyPayeeCounterparty,
            Optional<Boolean> notifyPayorCounterparty,
            Map<String, Object> additionalProperties) {
        this.disabled = disabled;
        this.additionalRoles = additionalRoles;
        this.additionalUsers = additionalUsers;
        this.notifyPayeeCounterparty = notifyPayeeCounterparty;
        this.notifyPayorCounterparty = notifyPayorCounterparty;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Set to true if the selected notification type should be disabled for this entity
     */
    @JsonProperty("disabled")
    public Optional<Boolean> getDisabled() {
        return disabled;
    }

    /**
     * @return List of user roles that should receive notifications in addition to the default users for this notification type
     */
    @JsonProperty("additionalRoles")
    public Optional<List<String>> getAdditionalRoles() {
        return additionalRoles;
    }

    /**
     * @return List of user IDs that should receive notifications in addition to the default users for this notification type
     */
    @JsonProperty("additionalUsers")
    public Optional<List<String>> getAdditionalUsers() {
        return additionalUsers;
    }

    /**
     * @return Set to true if the selected notification type should be sent to the counterparty if this is a payable invoice.
     */
    @JsonProperty("notifyPayeeCounterparty")
    public Optional<Boolean> getNotifyPayeeCounterparty() {
        return notifyPayeeCounterparty;
    }

    /**
     * @return Set to true if the selected notification type should be sent to the counterparty if this is a receivable invoice.
     */
    @JsonProperty("notifyPayorCounterparty")
    public Optional<Boolean> getNotifyPayorCounterparty() {
        return notifyPayorCounterparty;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationPolicyRequest && equalTo((NotificationPolicyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationPolicyRequest other) {
        return disabled.equals(other.disabled)
                && additionalRoles.equals(other.additionalRoles)
                && additionalUsers.equals(other.additionalUsers)
                && notifyPayeeCounterparty.equals(other.notifyPayeeCounterparty)
                && notifyPayorCounterparty.equals(other.notifyPayorCounterparty);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.disabled,
                this.additionalRoles,
                this.additionalUsers,
                this.notifyPayeeCounterparty,
                this.notifyPayorCounterparty);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> disabled = Optional.empty();

        private Optional<List<String>> additionalRoles = Optional.empty();

        private Optional<List<String>> additionalUsers = Optional.empty();

        private Optional<Boolean> notifyPayeeCounterparty = Optional.empty();

        private Optional<Boolean> notifyPayorCounterparty = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationPolicyRequest other) {
            disabled(other.getDisabled());
            additionalRoles(other.getAdditionalRoles());
            additionalUsers(other.getAdditionalUsers());
            notifyPayeeCounterparty(other.getNotifyPayeeCounterparty());
            notifyPayorCounterparty(other.getNotifyPayorCounterparty());
            return this;
        }

        /**
         * <p>Set to true if the selected notification type should be disabled for this entity</p>
         */
        @JsonSetter(value = "disabled", nulls = Nulls.SKIP)
        public Builder disabled(Optional<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            this.disabled = Optional.ofNullable(disabled);
            return this;
        }

        /**
         * <p>List of user roles that should receive notifications in addition to the default users for this notification type</p>
         */
        @JsonSetter(value = "additionalRoles", nulls = Nulls.SKIP)
        public Builder additionalRoles(Optional<List<String>> additionalRoles) {
            this.additionalRoles = additionalRoles;
            return this;
        }

        public Builder additionalRoles(List<String> additionalRoles) {
            this.additionalRoles = Optional.ofNullable(additionalRoles);
            return this;
        }

        /**
         * <p>List of user IDs that should receive notifications in addition to the default users for this notification type</p>
         */
        @JsonSetter(value = "additionalUsers", nulls = Nulls.SKIP)
        public Builder additionalUsers(Optional<List<String>> additionalUsers) {
            this.additionalUsers = additionalUsers;
            return this;
        }

        public Builder additionalUsers(List<String> additionalUsers) {
            this.additionalUsers = Optional.ofNullable(additionalUsers);
            return this;
        }

        /**
         * <p>Set to true if the selected notification type should be sent to the counterparty if this is a payable invoice.</p>
         */
        @JsonSetter(value = "notifyPayeeCounterparty", nulls = Nulls.SKIP)
        public Builder notifyPayeeCounterparty(Optional<Boolean> notifyPayeeCounterparty) {
            this.notifyPayeeCounterparty = notifyPayeeCounterparty;
            return this;
        }

        public Builder notifyPayeeCounterparty(Boolean notifyPayeeCounterparty) {
            this.notifyPayeeCounterparty = Optional.ofNullable(notifyPayeeCounterparty);
            return this;
        }

        /**
         * <p>Set to true if the selected notification type should be sent to the counterparty if this is a receivable invoice.</p>
         */
        @JsonSetter(value = "notifyPayorCounterparty", nulls = Nulls.SKIP)
        public Builder notifyPayorCounterparty(Optional<Boolean> notifyPayorCounterparty) {
            this.notifyPayorCounterparty = notifyPayorCounterparty;
            return this;
        }

        public Builder notifyPayorCounterparty(Boolean notifyPayorCounterparty) {
            this.notifyPayorCounterparty = Optional.ofNullable(notifyPayorCounterparty);
            return this;
        }

        public NotificationPolicyRequest build() {
            return new NotificationPolicyRequest(
                    disabled,
                    additionalRoles,
                    additionalUsers,
                    notifyPayeeCounterparty,
                    notifyPayorCounterparty,
                    additionalProperties);
        }
    }
}
