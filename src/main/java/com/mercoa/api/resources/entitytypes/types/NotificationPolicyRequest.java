/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationPolicyRequest.Builder.class)
public final class NotificationPolicyRequest {
    private final Optional<Boolean> disabled;

    private final Optional<List<String>> additionalRoles;

    private final Optional<Boolean> notifyCounterparty;

    private final Map<String, Object> additionalProperties;

    private NotificationPolicyRequest(
            Optional<Boolean> disabled,
            Optional<List<String>> additionalRoles,
            Optional<Boolean> notifyCounterparty,
            Map<String, Object> additionalProperties) {
        this.disabled = disabled;
        this.additionalRoles = additionalRoles;
        this.notifyCounterparty = notifyCounterparty;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Set to true if the selected notification type should be disabled for this entity
     */
    @JsonProperty("disabled")
    public Optional<Boolean> getDisabled() {
        return disabled;
    }

    /**
     * @return List of user roles that should receive notifications in addition to the default users for this notification type
     */
    @JsonProperty("additionalRoles")
    public Optional<List<String>> getAdditionalRoles() {
        return additionalRoles;
    }

    /**
     * @return Set to true if the selected notification type should be sent to the counterparty
     */
    @JsonProperty("notifyCounterparty")
    public Optional<Boolean> getNotifyCounterparty() {
        return notifyCounterparty;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationPolicyRequest && equalTo((NotificationPolicyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationPolicyRequest other) {
        return disabled.equals(other.disabled)
                && additionalRoles.equals(other.additionalRoles)
                && notifyCounterparty.equals(other.notifyCounterparty);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.disabled, this.additionalRoles, this.notifyCounterparty);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> disabled = Optional.empty();

        private Optional<List<String>> additionalRoles = Optional.empty();

        private Optional<Boolean> notifyCounterparty = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationPolicyRequest other) {
            disabled(other.getDisabled());
            additionalRoles(other.getAdditionalRoles());
            notifyCounterparty(other.getNotifyCounterparty());
            return this;
        }

        @JsonSetter(value = "disabled", nulls = Nulls.SKIP)
        public Builder disabled(Optional<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            this.disabled = Optional.of(disabled);
            return this;
        }

        @JsonSetter(value = "additionalRoles", nulls = Nulls.SKIP)
        public Builder additionalRoles(Optional<List<String>> additionalRoles) {
            this.additionalRoles = additionalRoles;
            return this;
        }

        public Builder additionalRoles(List<String> additionalRoles) {
            this.additionalRoles = Optional.of(additionalRoles);
            return this;
        }

        @JsonSetter(value = "notifyCounterparty", nulls = Nulls.SKIP)
        public Builder notifyCounterparty(Optional<Boolean> notifyCounterparty) {
            this.notifyCounterparty = notifyCounterparty;
            return this;
        }

        public Builder notifyCounterparty(Boolean notifyCounterparty) {
            this.notifyCounterparty = Optional.of(notifyCounterparty);
            return this;
        }

        public NotificationPolicyRequest build() {
            return new NotificationPolicyRequest(disabled, additionalRoles, notifyCounterparty, additionalProperties);
        }
    }
}
