/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Responsibilities.Builder.class)
public final class Responsibilities {
    private final Optional<String> jobTitle;

    private final Optional<Boolean> isController;

    private final Optional<Boolean> isOwner;

    private final Optional<Integer> ownershipPercentage;

    private final Map<String, Object> additionalProperties;

    private Responsibilities(
            Optional<String> jobTitle,
            Optional<Boolean> isController,
            Optional<Boolean> isOwner,
            Optional<Integer> ownershipPercentage,
            Map<String, Object> additionalProperties) {
        this.jobTitle = jobTitle;
        this.isController = isController;
        this.isOwner = isOwner;
        this.ownershipPercentage = ownershipPercentage;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("jobTitle")
    public Optional<String> getJobTitle() {
        return jobTitle;
    }

    /**
     * @return Indicates whether this individual has significant management responsibilities within the business
     */
    @JsonProperty("isController")
    public Optional<Boolean> getIsController() {
        return isController;
    }

    /**
     * @return Indicates whether this individual has an ownership stake of at least 25% in the business
     */
    @JsonProperty("isOwner")
    public Optional<Boolean> getIsOwner() {
        return isOwner;
    }

    /**
     * @return Percentage of ownership in the business. Must be between 0 and 100.
     */
    @JsonProperty("ownershipPercentage")
    public Optional<Integer> getOwnershipPercentage() {
        return ownershipPercentage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Responsibilities && equalTo((Responsibilities) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Responsibilities other) {
        return jobTitle.equals(other.jobTitle)
                && isController.equals(other.isController)
                && isOwner.equals(other.isOwner)
                && ownershipPercentage.equals(other.ownershipPercentage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.jobTitle, this.isController, this.isOwner, this.ownershipPercentage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> jobTitle = Optional.empty();

        private Optional<Boolean> isController = Optional.empty();

        private Optional<Boolean> isOwner = Optional.empty();

        private Optional<Integer> ownershipPercentage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Responsibilities other) {
            jobTitle(other.getJobTitle());
            isController(other.getIsController());
            isOwner(other.getIsOwner());
            ownershipPercentage(other.getOwnershipPercentage());
            return this;
        }

        @JsonSetter(value = "jobTitle", nulls = Nulls.SKIP)
        public Builder jobTitle(Optional<String> jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }

        public Builder jobTitle(String jobTitle) {
            this.jobTitle = Optional.ofNullable(jobTitle);
            return this;
        }

        /**
         * <p>Indicates whether this individual has significant management responsibilities within the business</p>
         */
        @JsonSetter(value = "isController", nulls = Nulls.SKIP)
        public Builder isController(Optional<Boolean> isController) {
            this.isController = isController;
            return this;
        }

        public Builder isController(Boolean isController) {
            this.isController = Optional.ofNullable(isController);
            return this;
        }

        /**
         * <p>Indicates whether this individual has an ownership stake of at least 25% in the business</p>
         */
        @JsonSetter(value = "isOwner", nulls = Nulls.SKIP)
        public Builder isOwner(Optional<Boolean> isOwner) {
            this.isOwner = isOwner;
            return this;
        }

        public Builder isOwner(Boolean isOwner) {
            this.isOwner = Optional.ofNullable(isOwner);
            return this;
        }

        /**
         * <p>Percentage of ownership in the business. Must be between 0 and 100.</p>
         */
        @JsonSetter(value = "ownershipPercentage", nulls = Nulls.SKIP)
        public Builder ownershipPercentage(Optional<Integer> ownershipPercentage) {
            this.ownershipPercentage = ownershipPercentage;
            return this;
        }

        public Builder ownershipPercentage(Integer ownershipPercentage) {
            this.ownershipPercentage = Optional.ofNullable(ownershipPercentage);
            return this;
        }

        public Responsibilities build() {
            return new Responsibilities(jobTitle, isController, isOwner, ownershipPercentage, additionalProperties);
        }
    }
}
