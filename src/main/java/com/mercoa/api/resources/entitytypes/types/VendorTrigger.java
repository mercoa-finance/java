/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorTrigger.Builder.class)
public final class VendorTrigger {
    private final List<String> vendorIds;

    private final Map<String, Object> additionalProperties;

    private VendorTrigger(List<String> vendorIds, Map<String, Object> additionalProperties) {
        this.vendorIds = vendorIds;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("vendorIds")
    public List<String> getVendorIds() {
        return vendorIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorTrigger && equalTo((VendorTrigger) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorTrigger other) {
        return vendorIds.equals(other.vendorIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.vendorIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> vendorIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorTrigger other) {
            vendorIds(other.getVendorIds());
            return this;
        }

        @JsonSetter(value = "vendorIds", nulls = Nulls.SKIP)
        public Builder vendorIds(List<String> vendorIds) {
            this.vendorIds.clear();
            this.vendorIds.addAll(vendorIds);
            return this;
        }

        public Builder addVendorIds(String vendorIds) {
            this.vendorIds.add(vendorIds);
            return this;
        }

        public Builder addAllVendorIds(List<String> vendorIds) {
            this.vendorIds.addAll(vendorIds);
            return this;
        }

        public VendorTrigger build() {
            return new VendorTrigger(vendorIds, additionalProperties);
        }
    }
}
