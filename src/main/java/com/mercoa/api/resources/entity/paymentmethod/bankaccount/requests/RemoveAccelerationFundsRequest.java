/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RemoveAccelerationFundsRequest.Builder.class)
public final class RemoveAccelerationFundsRequest {
    private final double amount;

    private final CurrencyCode currency;

    private final Map<String, Object> additionalProperties;

    private RemoveAccelerationFundsRequest(
            double amount, CurrencyCode currency, Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.currency = currency;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount of the acceleration funds to remove. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return The currency of the acceleration funds to remove.
     */
    @JsonProperty("currency")
    public CurrencyCode getCurrency() {
        return currency;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RemoveAccelerationFundsRequest && equalTo((RemoveAccelerationFundsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RemoveAccelerationFundsRequest other) {
        return amount == other.amount && currency.equals(other.currency);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.currency);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        CurrencyStage amount(double amount);

        Builder from(RemoveAccelerationFundsRequest other);
    }

    public interface CurrencyStage {
        _FinalStage currency(CurrencyCode currency);
    }

    public interface _FinalStage {
        RemoveAccelerationFundsRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, CurrencyStage, _FinalStage {
        private double amount;

        private CurrencyCode currency;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RemoveAccelerationFundsRequest other) {
            amount(other.getAmount());
            currency(other.getCurrency());
            return this;
        }

        /**
         * <p>The amount of the acceleration funds to remove. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public CurrencyStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>The currency of the acceleration funds to remove.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("currency")
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        public RemoveAccelerationFundsRequest build() {
            return new RemoveAccelerationFundsRequest(amount, currency, additionalProperties);
        }
    }
}
