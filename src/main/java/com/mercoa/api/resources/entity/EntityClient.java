/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.approvalpolicy.ApprovalPolicyClient;
import com.mercoa.api.resources.entity.bnpl.BnplClient;
import com.mercoa.api.resources.entity.bulk.BulkClient;
import com.mercoa.api.resources.entity.counterparty.CounterpartyClient;
import com.mercoa.api.resources.entity.customization.CustomizationClient;
import com.mercoa.api.resources.entity.document.DocumentClient;
import com.mercoa.api.resources.entity.emaillog.EmailLogClient;
import com.mercoa.api.resources.entity.emailtemplate.EmailTemplateClient;
import com.mercoa.api.resources.entity.externalaccountingsystem.ExternalAccountingSystemClient;
import com.mercoa.api.resources.entity.invoice.InvoiceClient;
import com.mercoa.api.resources.entity.metadata.MetadataClient;
import com.mercoa.api.resources.entity.notificationpolicy.NotificationPolicyClient;
import com.mercoa.api.resources.entity.paymentmethod.PaymentMethodClient;
import com.mercoa.api.resources.entity.representative.RepresentativeClient;
import com.mercoa.api.resources.entity.requests.EntityEntityGetEventsRequest;
import com.mercoa.api.resources.entity.requests.EntityGetRequest;
import com.mercoa.api.resources.entity.requests.FindEntities;
import com.mercoa.api.resources.entity.requests.GenerateOnboardingLink;
import com.mercoa.api.resources.entity.requests.SendOnboardingLink;
import com.mercoa.api.resources.entity.user.UserClient;
import com.mercoa.api.resources.entitytypes.types.EntityEventsResponse;
import com.mercoa.api.resources.entitytypes.types.EntityRequest;
import com.mercoa.api.resources.entitytypes.types.EntityResponse;
import com.mercoa.api.resources.entitytypes.types.EntityUpdateRequest;
import com.mercoa.api.resources.entitytypes.types.FindEntityResponse;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;
import java.util.function.Supplier;

public class EntityClient {
    protected final ClientOptions clientOptions;

    private final RawEntityClient rawClient;

    protected final Supplier<CounterpartyClient> counterpartyClient;

    protected final Supplier<EmailLogClient> emailLogClient;

    protected final Supplier<PaymentMethodClient> paymentMethodClient;

    protected final Supplier<UserClient> userClient;

    protected final Supplier<ApprovalPolicyClient> approvalPolicyClient;

    protected final Supplier<BnplClient> bnplClient;

    protected final Supplier<BulkClient> bulkClient;

    protected final Supplier<CustomizationClient> customizationClient;

    protected final Supplier<DocumentClient> documentClient;

    protected final Supplier<EmailTemplateClient> emailTemplateClient;

    protected final Supplier<ExternalAccountingSystemClient> externalAccountingSystemClient;

    protected final Supplier<InvoiceClient> invoiceClient;

    protected final Supplier<MetadataClient> metadataClient;

    protected final Supplier<NotificationPolicyClient> notificationPolicyClient;

    protected final Supplier<RepresentativeClient> representativeClient;

    public EntityClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawEntityClient(clientOptions);
        this.counterpartyClient = Suppliers.memoize(() -> new CounterpartyClient(clientOptions));
        this.emailLogClient = Suppliers.memoize(() -> new EmailLogClient(clientOptions));
        this.paymentMethodClient = Suppliers.memoize(() -> new PaymentMethodClient(clientOptions));
        this.userClient = Suppliers.memoize(() -> new UserClient(clientOptions));
        this.approvalPolicyClient = Suppliers.memoize(() -> new ApprovalPolicyClient(clientOptions));
        this.bnplClient = Suppliers.memoize(() -> new BnplClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new BulkClient(clientOptions));
        this.customizationClient = Suppliers.memoize(() -> new CustomizationClient(clientOptions));
        this.documentClient = Suppliers.memoize(() -> new DocumentClient(clientOptions));
        this.emailTemplateClient = Suppliers.memoize(() -> new EmailTemplateClient(clientOptions));
        this.externalAccountingSystemClient =
                Suppliers.memoize(() -> new ExternalAccountingSystemClient(clientOptions));
        this.invoiceClient = Suppliers.memoize(() -> new InvoiceClient(clientOptions));
        this.metadataClient = Suppliers.memoize(() -> new MetadataClient(clientOptions));
        this.notificationPolicyClient = Suppliers.memoize(() -> new NotificationPolicyClient(clientOptions));
        this.representativeClient = Suppliers.memoize(() -> new RepresentativeClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawEntityClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public FindEntityResponse find() {
        return this.rawClient.find().body();
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public FindEntityResponse find(FindEntities request) {
        return this.rawClient.find(request).body();
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public FindEntityResponse find(FindEntities request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).body();
    }

    public EntityResponse create(EntityRequest request) {
        return this.rawClient.create(request).body();
    }

    public EntityResponse create(EntityRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    public EntityResponse get(String entityId) {
        return this.rawClient.get(entityId).body();
    }

    public EntityResponse get(String entityId, EntityGetRequest request) {
        return this.rawClient.get(entityId, request).body();
    }

    public EntityResponse get(String entityId, EntityGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, request, requestOptions).body();
    }

    public EntityResponse update(String entityId) {
        return this.rawClient.update(entityId).body();
    }

    public EntityResponse update(String entityId, EntityUpdateRequest request) {
        return this.rawClient.update(entityId, request).body();
    }

    public EntityResponse update(String entityId, EntityUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(entityId, request, requestOptions).body();
    }

    /**
     * Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.
     */
    public void delete(String entityId) {
        this.rawClient.delete(entityId).body();
    }

    /**
     * Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.
     */
    public void delete(String entityId, RequestOptions requestOptions) {
        this.rawClient.delete(entityId, requestOptions).body();
    }

    /**
     * This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.
     */
    public void acceptTermsOfService(String entityId) {
        this.rawClient.acceptTermsOfService(entityId).body();
    }

    /**
     * This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.
     */
    public void acceptTermsOfService(String entityId, RequestOptions requestOptions) {
        this.rawClient.acceptTermsOfService(entityId, requestOptions).body();
    }

    /**
     * This endpoint is used to initiate KYB for an entity.
     * Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
     * all representatives have been added, and all required fields have been filled out.
     */
    public void initiateKyb(String entityId) {
        this.rawClient.initiateKyb(entityId).body();
    }

    /**
     * This endpoint is used to initiate KYB for an entity.
     * Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
     * all representatives have been added, and all required fields have been filled out.
     */
    public void initiateKyb(String entityId, RequestOptions requestOptions) {
        this.rawClient.initiateKyb(entityId, requestOptions).body();
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public String getToken(String entityId) {
        return this.rawClient.getToken(entityId).body();
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public String getToken(String entityId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityId, request).body();
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public String getToken(String entityId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient.getToken(entityId, request, requestOptions).body();
    }

    /**
     * Generate an onboarding link for the entity.
     */
    public String getOnboardingLink(String entityId, GenerateOnboardingLink request) {
        return this.rawClient.getOnboardingLink(entityId, request).body();
    }

    /**
     * Generate an onboarding link for the entity.
     */
    public String getOnboardingLink(String entityId, GenerateOnboardingLink request, RequestOptions requestOptions) {
        return this.rawClient
                .getOnboardingLink(entityId, request, requestOptions)
                .body();
    }

    /**
     * Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.
     */
    public void sendOnboardingLink(String entityId, SendOnboardingLink request) {
        this.rawClient.sendOnboardingLink(entityId, request).body();
    }

    /**
     * Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.
     */
    public void sendOnboardingLink(String entityId, SendOnboardingLink request, RequestOptions requestOptions) {
        this.rawClient.sendOnboardingLink(entityId, request, requestOptions).body();
    }

    /**
     * Get all events for an entity
     */
    public EntityEventsResponse events(String entityId) {
        return this.rawClient.events(entityId).body();
    }

    /**
     * Get all events for an entity
     */
    public EntityEventsResponse events(String entityId, EntityEntityGetEventsRequest request) {
        return this.rawClient.events(entityId, request).body();
    }

    /**
     * Get all events for an entity
     */
    public EntityEventsResponse events(
            String entityId, EntityEntityGetEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.events(entityId, request, requestOptions).body();
    }

    public CounterpartyClient counterparty() {
        return this.counterpartyClient.get();
    }

    public EmailLogClient emailLog() {
        return this.emailLogClient.get();
    }

    public PaymentMethodClient paymentMethod() {
        return this.paymentMethodClient.get();
    }

    public UserClient user() {
        return this.userClient.get();
    }

    public ApprovalPolicyClient approvalPolicy() {
        return this.approvalPolicyClient.get();
    }

    public BnplClient bnpl() {
        return this.bnplClient.get();
    }

    public BulkClient bulk() {
        return this.bulkClient.get();
    }

    public CustomizationClient customization() {
        return this.customizationClient.get();
    }

    public DocumentClient document() {
        return this.documentClient.get();
    }

    public EmailTemplateClient emailTemplate() {
        return this.emailTemplateClient.get();
    }

    public ExternalAccountingSystemClient externalAccountingSystem() {
        return this.externalAccountingSystemClient.get();
    }

    public InvoiceClient invoice() {
        return this.invoiceClient.get();
    }

    public MetadataClient metadata() {
        return this.metadataClient.get();
    }

    public NotificationPolicyClient notificationPolicy() {
        return this.notificationPolicyClient.get();
    }

    public RepresentativeClient representative() {
        return this.representativeClient.get();
    }
}
