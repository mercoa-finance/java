/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.externalaccountingsystem;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.externalaccountingsystem.requests.SyncExternalSystemRequest;
import com.mercoa.api.resources.entity.externalaccountingsystem.types.ExternalAccountingSystemCompanyCreationRequest;
import com.mercoa.api.resources.entity.externalaccountingsystem.types.ExternalAccountingSystemCompanyResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncExternalAccountingSystemClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawExternalAccountingSystemClient rawClient;

    public AsyncExternalAccountingSystemClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawExternalAccountingSystemClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawExternalAccountingSystemClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get the external accounting system connected to an entity
     */
    public CompletableFuture<ExternalAccountingSystemCompanyResponse> get(String entityId) {
        return this.rawClient.get(entityId).thenApply(response -> response.body());
    }

    /**
     * Get the external accounting system connected to an entity
     */
    public CompletableFuture<ExternalAccountingSystemCompanyResponse> get(
            String entityId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create/Link an entity to an external accounting system like Codat or Rutter. If the entity is already linked to an external accounting system, this will return the existing connection.
     */
    public CompletableFuture<ExternalAccountingSystemCompanyResponse> create(
            String entityId, ExternalAccountingSystemCompanyCreationRequest request) {
        return this.rawClient.create(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Create/Link an entity to an external accounting system like Codat or Rutter. If the entity is already linked to an external accounting system, this will return the existing connection.
     */
    public CompletableFuture<ExternalAccountingSystemCompanyResponse> create(
            String entityId, ExternalAccountingSystemCompanyCreationRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a link to connect an entity to an external accounting system like Quickbooks or Xero
     */
    public CompletableFuture<String> connect(String entityId) {
        return this.rawClient.connect(entityId).thenApply(response -> response.body());
    }

    /**
     * Get a link to connect an entity to an external accounting system like Quickbooks or Xero
     */
    public CompletableFuture<String> connect(String entityId, RequestOptions requestOptions) {
        return this.rawClient.connect(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public CompletableFuture<Void> sync(String entityId) {
        return this.rawClient.sync(entityId).thenApply(response -> response.body());
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public CompletableFuture<Void> sync(String entityId, SyncExternalSystemRequest request) {
        return this.rawClient.sync(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public CompletableFuture<Void> sync(
            String entityId, SyncExternalSystemRequest request, RequestOptions requestOptions) {
        return this.rawClient.sync(entityId, request, requestOptions).thenApply(response -> response.body());
    }
}
