/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.counterparty;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.counterparty.bulk.BulkClient;
import com.mercoa.api.resources.entity.counterparty.requests.FindPayeeCounterpartiesRequest;
import com.mercoa.api.resources.entity.counterparty.requests.FindPayorCounterpartiesRequest;
import com.mercoa.api.resources.entity.counterparty.vendorcredit.VendorCreditClient;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayorsRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayorsRequest;
import com.mercoa.api.resources.entitytypes.types.FindCounterpartiesResponse;
import java.util.function.Supplier;

public class CounterpartyClient {
    protected final ClientOptions clientOptions;

    private final RawCounterpartyClient rawClient;

    protected final Supplier<BulkClient> bulkClient;

    protected final Supplier<VendorCreditClient> vendorCreditClient;

    public CounterpartyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawCounterpartyClient(clientOptions);
        this.bulkClient = Suppliers.memoize(() -> new BulkClient(clientOptions));
        this.vendorCreditClient = Suppliers.memoize(() -> new VendorCreditClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawCounterpartyClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public FindCounterpartiesResponse findPayees(String entityId) {
        return this.rawClient.findPayees(entityId).body();
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public FindCounterpartiesResponse findPayees(String entityId, FindPayeeCounterpartiesRequest request) {
        return this.rawClient.findPayees(entityId, request).body();
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public FindCounterpartiesResponse findPayees(
            String entityId, FindPayeeCounterpartiesRequest request, RequestOptions requestOptions) {
        return this.rawClient.findPayees(entityId, request, requestOptions).body();
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public FindCounterpartiesResponse findPayors(String entityId) {
        return this.rawClient.findPayors(entityId).body();
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public FindCounterpartiesResponse findPayors(String entityId, FindPayorCounterpartiesRequest request) {
        return this.rawClient.findPayors(entityId, request).body();
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public FindCounterpartiesResponse findPayors(
            String entityId, FindPayorCounterpartiesRequest request, RequestOptions requestOptions) {
        return this.rawClient.findPayors(entityId, request, requestOptions).body();
    }

    /**
     * Create association between Entity and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public void addPayees(String entityId, EntityAddPayeesRequest request) {
        this.rawClient.addPayees(entityId, request).body();
    }

    /**
     * Create association between Entity and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public void addPayees(String entityId, EntityAddPayeesRequest request, RequestOptions requestOptions) {
        this.rawClient.addPayees(entityId, request, requestOptions).body();
    }

    /**
     * Marks Payees as unsearchable by Entity via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public void hidePayees(String entityId, EntityHidePayeesRequest request) {
        this.rawClient.hidePayees(entityId, request).body();
    }

    /**
     * Marks Payees as unsearchable by Entity via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public void hidePayees(String entityId, EntityHidePayeesRequest request, RequestOptions requestOptions) {
        this.rawClient.hidePayees(entityId, request, requestOptions).body();
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayees instead.
     */
    public void archivePayees(String entityId, EntityHidePayeesRequest request) {
        this.rawClient.archivePayees(entityId, request).body();
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayees instead.
     */
    public void archivePayees(String entityId, EntityHidePayeesRequest request, RequestOptions requestOptions) {
        this.rawClient.archivePayees(entityId, request, requestOptions).body();
    }

    /**
     * Create association between Entity and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public void addPayors(String entityId, EntityAddPayorsRequest request) {
        this.rawClient.addPayors(entityId, request).body();
    }

    /**
     * Create association between Entity and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public void addPayors(String entityId, EntityAddPayorsRequest request, RequestOptions requestOptions) {
        this.rawClient.addPayors(entityId, request, requestOptions).body();
    }

    /**
     * Marks Payors as unsearchable by Entity via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public void hidePayors(String entityId, EntityHidePayorsRequest request) {
        this.rawClient.hidePayors(entityId, request).body();
    }

    /**
     * Marks Payors as unsearchable by Entity via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public void hidePayors(String entityId, EntityHidePayorsRequest request, RequestOptions requestOptions) {
        this.rawClient.hidePayors(entityId, request, requestOptions).body();
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayors instead.
     */
    public void archivePayors(String entityId, EntityHidePayorsRequest request) {
        this.rawClient.archivePayors(entityId, request).body();
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayors instead.
     */
    public void archivePayors(String entityId, EntityHidePayorsRequest request, RequestOptions requestOptions) {
        this.rawClient.archivePayors(entityId, request, requestOptions).body();
    }

    public BulkClient bulk() {
        return this.bulkClient.get();
    }

    public VendorCreditClient vendorCredit() {
        return this.vendorCreditClient.get();
    }
}
