/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod.bankaccount;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.AddAccelerationFundsRequest;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.CompleteMicroDepositsRequest;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.RemoveAccelerationFundsRequest;
import com.mercoa.api.resources.entitytypes.types.AccelerationFundsResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodBalanceResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncBankAccountClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawBankAccountClient rawClient;

    public AsyncBankAccountClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawBankAccountClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawBankAccountClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Initiate micro deposits for a bank account
     */
    public CompletableFuture<PaymentMethodResponse> initiateMicroDeposits(String entityId, String paymentMethodId) {
        return this.rawClient.initiateMicroDeposits(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    /**
     * Initiate micro deposits for a bank account
     */
    public CompletableFuture<PaymentMethodResponse> initiateMicroDeposits(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .initiateMicroDeposits(entityId, paymentMethodId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Complete micro deposit verification
     */
    public CompletableFuture<PaymentMethodResponse> completeMicroDeposits(
            String entityId, String paymentMethodId, CompleteMicroDepositsRequest request) {
        return this.rawClient
                .completeMicroDeposits(entityId, paymentMethodId, request)
                .thenApply(response -> response.body());
    }

    /**
     * Complete micro deposit verification
     */
    public CompletableFuture<PaymentMethodResponse> completeMicroDeposits(
            String entityId,
            String paymentMethodId,
            CompleteMicroDepositsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .completeMicroDeposits(entityId, paymentMethodId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the available and pending balance of this entity's acceleration funds. The specified payment method must be a bank account.
     */
    public CompletableFuture<AccelerationFundsResponse> getAccelerationFunds(String entityId, String paymentMethodId) {
        return this.rawClient.getAccelerationFunds(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    /**
     * Get the available and pending balance of this entity's acceleration funds. The specified payment method must be a bank account.
     */
    public CompletableFuture<AccelerationFundsResponse> getAccelerationFunds(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .getAccelerationFunds(entityId, paymentMethodId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Add acceleration funds to this entity from a bank account (this transfer is D+2). The specified payment method must be a bank account.
     */
    public CompletableFuture<Void> addAccelerationFunds(
            String entityId, String paymentMethodId, AddAccelerationFundsRequest request) {
        return this.rawClient
                .addAccelerationFunds(entityId, paymentMethodId, request)
                .thenApply(response -> response.body());
    }

    /**
     * Add acceleration funds to this entity from a bank account (this transfer is D+2). The specified payment method must be a bank account.
     */
    public CompletableFuture<Void> addAccelerationFunds(
            String entityId,
            String paymentMethodId,
            AddAccelerationFundsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .addAccelerationFunds(entityId, paymentMethodId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Remove acceleration funds from this entity to a bank account (this transfer is D+0). The specified payment method must be a bank account.
     */
    public CompletableFuture<Void> removeAccelerationFunds(
            String entityId, String paymentMethodId, RemoveAccelerationFundsRequest request) {
        return this.rawClient
                .removeAccelerationFunds(entityId, paymentMethodId, request)
                .thenApply(response -> response.body());
    }

    /**
     * Remove acceleration funds from this entity to a bank account (this transfer is D+0). The specified payment method must be a bank account.
     */
    public CompletableFuture<Void> removeAccelerationFunds(
            String entityId,
            String paymentMethodId,
            RemoveAccelerationFundsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .removeAccelerationFunds(entityId, paymentMethodId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Deprecated. Get the available balance of a payment method. Only bank accounts added with Plaid are supported. This endpoint will return a cached value and will refresh the balance when called.
     */
    public CompletableFuture<PaymentMethodBalanceResponse> getBalance(String entityId, String paymentMethodId) {
        return this.rawClient.getBalance(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    /**
     * Deprecated. Get the available balance of a payment method. Only bank accounts added with Plaid are supported. This endpoint will return a cached value and will refresh the balance when called.
     */
    public CompletableFuture<PaymentMethodBalanceResponse> getBalance(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .getBalance(entityId, paymentMethodId, requestOptions)
                .thenApply(response -> response.body());
    }
}
