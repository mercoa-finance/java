/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityFindOldEntityRequest.Builder.class)
public final class EntityFindOldEntityRequest {
    private final Optional<List<String>> foreignId;

    private final Optional<List<String>> role;

    private final Optional<String> name;

    private final Optional<String> email;

    private final Optional<Integer> limit;

    private final Optional<String> startingAfter;

    private final Map<String, Object> additionalProperties;

    private EntityFindOldEntityRequest(
            Optional<List<String>> foreignId,
            Optional<List<String>> role,
            Optional<String> name,
            Optional<String> email,
            Optional<Integer> limit,
            Optional<String> startingAfter,
            Map<String, Object> additionalProperties) {
        this.foreignId = foreignId;
        this.role = role;
        this.name = name;
        this.email = email;
        this.limit = limit;
        this.startingAfter = startingAfter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID used to identify user in your system
     */
    @JsonProperty("foreignId")
    public Optional<List<String>> getForeignId() {
        return foreignId;
    }

    /**
     * @return Filter users by role. If multiple roles are provided, users with any of the roles will be returned.
     */
    @JsonProperty("role")
    public Optional<List<String>> getRole() {
        return role;
    }

    /**
     * @return Filter users by name. Partial matches are supported.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Filter users by email. Partial matches are supported.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Number of entities to return. Limit can range between 1 and 100, and the default is 10.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return The ID of the user to start after. If not provided, the first page of entities will be returned.
     */
    @JsonProperty("startingAfter")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityFindOldEntityRequest && equalTo((EntityFindOldEntityRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityFindOldEntityRequest other) {
        return foreignId.equals(other.foreignId)
                && role.equals(other.role)
                && name.equals(other.name)
                && email.equals(other.email)
                && limit.equals(other.limit)
                && startingAfter.equals(other.startingAfter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.foreignId, this.role, this.name, this.email, this.limit, this.startingAfter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> foreignId = Optional.empty();

        private Optional<List<String>> role = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> startingAfter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityFindOldEntityRequest other) {
            foreignId(other.getForeignId());
            role(other.getRole());
            name(other.getName());
            email(other.getEmail());
            limit(other.getLimit());
            startingAfter(other.getStartingAfter());
            return this;
        }

        /**
         * <p>ID used to identify user in your system</p>
         */
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<List<String>> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(List<String> foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.of(Collections.singletonList(foreignId));
            return this;
        }

        /**
         * <p>Filter users by role. If multiple roles are provided, users with any of the roles will be returned.</p>
         */
        @JsonSetter(value = "role", nulls = Nulls.SKIP)
        public Builder role(Optional<List<String>> role) {
            this.role = role;
            return this;
        }

        public Builder role(List<String> role) {
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(String role) {
            this.role = Optional.of(Collections.singletonList(role));
            return this;
        }

        /**
         * <p>Filter users by name. Partial matches are supported.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Filter users by email. Partial matches are supported.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Number of entities to return. Limit can range between 1 and 100, and the default is 10.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>The ID of the user to start after. If not provided, the first page of entities will be returned.</p>
         */
        @JsonSetter(value = "startingAfter", nulls = Nulls.SKIP)
        public Builder startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        public Builder startingAfter(String startingAfter) {
            this.startingAfter = Optional.ofNullable(startingAfter);
            return this;
        }

        public EntityFindOldEntityRequest build() {
            return new EntityFindOldEntityRequest(
                    foreignId, role, name, email, limit, startingAfter, additionalProperties);
        }
    }
}
