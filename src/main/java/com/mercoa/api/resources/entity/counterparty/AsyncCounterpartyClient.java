/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.counterparty;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.counterparty.bulk.AsyncBulkClient;
import com.mercoa.api.resources.entity.counterparty.requests.FindPayeeCounterpartiesRequest;
import com.mercoa.api.resources.entity.counterparty.requests.FindPayorCounterpartiesRequest;
import com.mercoa.api.resources.entity.counterparty.vendorcredit.AsyncVendorCreditClient;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityAddPayorsRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayeesRequest;
import com.mercoa.api.resources.entitytypes.types.EntityHidePayorsRequest;
import com.mercoa.api.resources.entitytypes.types.FindCounterpartiesResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncCounterpartyClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawCounterpartyClient rawClient;

    protected final Supplier<AsyncBulkClient> bulkClient;

    protected final Supplier<AsyncVendorCreditClient> vendorCreditClient;

    public AsyncCounterpartyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawCounterpartyClient(clientOptions);
        this.bulkClient = Suppliers.memoize(() -> new AsyncBulkClient(clientOptions));
        this.vendorCreditClient = Suppliers.memoize(() -> new AsyncVendorCreditClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawCounterpartyClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayees(String entityId) {
        return this.rawClient.findPayees(entityId).thenApply(response -> response.body());
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayees(
            String entityId, FindPayeeCounterpartiesRequest request) {
        return this.rawClient.findPayees(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Find payee counterparties. This endpoint lets you find vendors linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayees(
            String entityId, FindPayeeCounterpartiesRequest request, RequestOptions requestOptions) {
        return this.rawClient.findPayees(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayors(String entityId) {
        return this.rawClient.findPayors(entityId).thenApply(response -> response.body());
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayors(
            String entityId, FindPayorCounterpartiesRequest request) {
        return this.rawClient.findPayors(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Find payor counterparties. This endpoint lets you find customers linked to the entity.
     */
    public CompletableFuture<FindCounterpartiesResponse> findPayors(
            String entityId, FindPayorCounterpartiesRequest request, RequestOptions requestOptions) {
        return this.rawClient.findPayors(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create association between Entity and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public CompletableFuture<Void> addPayees(String entityId, EntityAddPayeesRequest request) {
        return this.rawClient.addPayees(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Create association between Entity and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.
     */
    public CompletableFuture<Void> addPayees(
            String entityId, EntityAddPayeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPayees(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Marks Payees as unsearchable by Entity via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayees(String entityId, EntityHidePayeesRequest request) {
        return this.rawClient.hidePayees(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Marks Payees as unsearchable by Entity via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayees(
            String entityId, EntityHidePayeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.hidePayees(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayees instead.
     */
    public CompletableFuture<Void> archivePayees(String entityId, EntityHidePayeesRequest request) {
        return this.rawClient.archivePayees(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayees instead.
     */
    public CompletableFuture<Void> archivePayees(
            String entityId, EntityHidePayeesRequest request, RequestOptions requestOptions) {
        return this.rawClient.archivePayees(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create association between Entity and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public CompletableFuture<Void> addPayors(String entityId, EntityAddPayorsRequest request) {
        return this.rawClient.addPayors(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Create association between Entity and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.
     */
    public CompletableFuture<Void> addPayors(
            String entityId, EntityAddPayorsRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPayors(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Marks Payors as unsearchable by Entity via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayors(String entityId, EntityHidePayorsRequest request) {
        return this.rawClient.hidePayors(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Marks Payors as unsearchable by Entity via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.
     */
    public CompletableFuture<Void> hidePayors(
            String entityId, EntityHidePayorsRequest request, RequestOptions requestOptions) {
        return this.rawClient.hidePayors(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayors instead.
     */
    public CompletableFuture<Void> archivePayors(String entityId, EntityHidePayorsRequest request) {
        return this.rawClient.archivePayors(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Backwards compatibility for old API clients. Use hidePayors instead.
     */
    public CompletableFuture<Void> archivePayors(
            String entityId, EntityHidePayorsRequest request, RequestOptions requestOptions) {
        return this.rawClient.archivePayors(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncBulkClient bulk() {
        return this.bulkClient.get();
    }

    public AsyncVendorCreditClient vendorCredit() {
        return this.vendorCreditClient.get();
    }
}
