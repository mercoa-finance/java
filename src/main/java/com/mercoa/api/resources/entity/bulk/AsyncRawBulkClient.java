/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.bulk;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.BulkDownloadResponse;
import com.mercoa.api.resources.entity.bulk.requests.BulkEntityCreationRequest;
import com.mercoa.api.resources.entity.bulk.requests.DownloadBulkEntitiesRequest;
import com.mercoa.api.resources.entitytypes.types.BulkEntityCreationResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawBulkClient {
    protected final ClientOptions clientOptions;

    public AsyncRawBulkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Create multiple entities in bulk. This endpoint will process synchronously and return a list of entities that were created or failed to create.
     */
    public CompletableFuture<MercoaHttpResponse<BulkEntityCreationResponse>> create(BulkEntityCreationRequest request) {
        return create(request, null);
    }

    /**
     * Create multiple entities in bulk. This endpoint will process synchronously and return a list of entities that were created or failed to create.
     */
    public CompletableFuture<MercoaHttpResponse<BulkEntityCreationResponse>> create(
            BulkEntityCreationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entities");
        if (request.getEmitWebhooks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "emitWebhooks", request.getEmitWebhooks().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkEntityCreationResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkEntityCreationResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get a URL to download a bulk entity as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download() {
        return download(DownloadBulkEntitiesRequest.builder().build());
    }

    /**
     * Get a URL to download a bulk entity as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download(DownloadBulkEntitiesRequest request) {
        return download(request, null);
    }

    /**
     * Get a URL to download a bulk entity as a CSV/JSON file.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> download(
            DownloadBulkEntitiesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entities/download");
        if (request.getFormat().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "format", request.getFormat().get(), false);
        }
        if (request.getPaymentMethods().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentMethods", request.getPaymentMethods().get(), false);
        }
        if (request.getIsCustomer().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "isCustomer", request.getIsCustomer().get(), false);
        }
        if (request.getIsPayee().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "isPayee", request.getIsPayee().get(), false);
        }
        if (request.getIsPayor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "isPayor", request.getIsPayor().get(), false);
        }
        if (request.getName().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "name", request.getName().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        if (request.getForeignId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "foreignId", request.getForeignId().get(), true);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), true);
        }
        if (request.getReturnMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "returnMetadata", request.getReturnMetadata().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkDownloadResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
