/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.entitytypes.types.EntityStatus;
import com.mercoa.api.resources.invoicetypes.types.MetadataFilter;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FindEntities.Builder.class)
public final class FindEntities {
    private final Optional<List<String>> foreignId;

    private final Optional<List<EntityStatus>> status;

    private final Optional<List<String>> returnMetadata;

    private final Optional<Boolean> paymentMethods;

    private final Optional<Boolean> isCustomer;

    private final Optional<Boolean> isPayee;

    private final Optional<Boolean> isPayor;

    private final Optional<String> name;

    private final Optional<String> search;

    private final Optional<MetadataFilter> metadata;

    private final Optional<Integer> limit;

    private final Optional<String> startingAfter;

    private final Map<String, Object> additionalProperties;

    private FindEntities(
            Optional<List<String>> foreignId,
            Optional<List<EntityStatus>> status,
            Optional<List<String>> returnMetadata,
            Optional<Boolean> paymentMethods,
            Optional<Boolean> isCustomer,
            Optional<Boolean> isPayee,
            Optional<Boolean> isPayor,
            Optional<String> name,
            Optional<String> search,
            Optional<MetadataFilter> metadata,
            Optional<Integer> limit,
            Optional<String> startingAfter,
            Map<String, Object> additionalProperties) {
        this.foreignId = foreignId;
        this.status = status;
        this.returnMetadata = returnMetadata;
        this.paymentMethods = paymentMethods;
        this.isCustomer = isCustomer;
        this.isPayee = isPayee;
        this.isPayor = isPayor;
        this.name = name;
        this.search = search;
        this.metadata = metadata;
        this.limit = limit;
        this.startingAfter = startingAfter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID used to identify this entity in your system
     */
    @JsonProperty("foreignId")
    public Optional<List<String>> getForeignId() {
        return foreignId;
    }

    @JsonProperty("status")
    public Optional<List<EntityStatus>> getStatus() {
        return status;
    }

    /**
     * @return Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.
     */
    @JsonProperty("returnMetadata")
    public Optional<List<String>> getReturnMetadata() {
        return returnMetadata;
    }

    /**
     * @return If true, will include entity payment methods as part of the response
     */
    @JsonProperty("paymentMethods")
    public Optional<Boolean> getPaymentMethods() {
        return paymentMethods;
    }

    /**
     * @return If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.
     */
    @JsonProperty("isCustomer")
    public Optional<Boolean> getIsCustomer() {
        return isCustomer;
    }

    /**
     * @return If true, entities that are marked as payees will be returned.
     * If false or not provided, entities that are marked as payees will not be returned.
     */
    @JsonProperty("isPayee")
    public Optional<Boolean> getIsPayee() {
        return isPayee;
    }

    /**
     * @return If true or not provided, entities that are marked as payors will be returned.
     * If false, entities that are marked as payors will not be returned.
     */
    @JsonProperty("isPayor")
    public Optional<Boolean> getIsPayor() {
        return isPayor;
    }

    /**
     * @return Use search instead. Deprecated. Filter entities by name. Partial matches are supported.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Find entities by name, email, or emailTo. Partial matches are supported.
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    /**
     * @return Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.
     */
    @JsonProperty("metadata")
    public Optional<MetadataFilter> getMetadata() {
        return metadata;
    }

    /**
     * @return Number of entities to return. Limit can range between 1 and 100, and the default is 10.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return The ID of the entity to start after. If not provided, the first page of entities will be returned.
     */
    @JsonProperty("startingAfter")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FindEntities && equalTo((FindEntities) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FindEntities other) {
        return foreignId.equals(other.foreignId)
                && status.equals(other.status)
                && returnMetadata.equals(other.returnMetadata)
                && paymentMethods.equals(other.paymentMethods)
                && isCustomer.equals(other.isCustomer)
                && isPayee.equals(other.isPayee)
                && isPayor.equals(other.isPayor)
                && name.equals(other.name)
                && search.equals(other.search)
                && metadata.equals(other.metadata)
                && limit.equals(other.limit)
                && startingAfter.equals(other.startingAfter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.foreignId,
                this.status,
                this.returnMetadata,
                this.paymentMethods,
                this.isCustomer,
                this.isPayee,
                this.isPayor,
                this.name,
                this.search,
                this.metadata,
                this.limit,
                this.startingAfter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> foreignId = Optional.empty();

        private Optional<List<EntityStatus>> status = Optional.empty();

        private Optional<List<String>> returnMetadata = Optional.empty();

        private Optional<Boolean> paymentMethods = Optional.empty();

        private Optional<Boolean> isCustomer = Optional.empty();

        private Optional<Boolean> isPayee = Optional.empty();

        private Optional<Boolean> isPayor = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> search = Optional.empty();

        private Optional<MetadataFilter> metadata = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> startingAfter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FindEntities other) {
            foreignId(other.getForeignId());
            status(other.getStatus());
            returnMetadata(other.getReturnMetadata());
            paymentMethods(other.getPaymentMethods());
            isCustomer(other.getIsCustomer());
            isPayee(other.getIsPayee());
            isPayor(other.getIsPayor());
            name(other.getName());
            search(other.getSearch());
            metadata(other.getMetadata());
            limit(other.getLimit());
            startingAfter(other.getStartingAfter());
            return this;
        }

        /**
         * <p>ID used to identify this entity in your system</p>
         */
        @JsonSetter(value = "foreignId", nulls = Nulls.SKIP)
        public Builder foreignId(Optional<List<String>> foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        public Builder foreignId(List<String> foreignId) {
            this.foreignId = Optional.ofNullable(foreignId);
            return this;
        }

        public Builder foreignId(String foreignId) {
            this.foreignId = Optional.of(Collections.singletonList(foreignId));
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<List<EntityStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(List<EntityStatus> status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(EntityStatus status) {
            this.status = Optional.of(Collections.singletonList(status));
            return this;
        }

        /**
         * <p>Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.</p>
         */
        @JsonSetter(value = "returnMetadata", nulls = Nulls.SKIP)
        public Builder returnMetadata(Optional<List<String>> returnMetadata) {
            this.returnMetadata = returnMetadata;
            return this;
        }

        public Builder returnMetadata(List<String> returnMetadata) {
            this.returnMetadata = Optional.ofNullable(returnMetadata);
            return this;
        }

        public Builder returnMetadata(String returnMetadata) {
            this.returnMetadata = Optional.of(Collections.singletonList(returnMetadata));
            return this;
        }

        /**
         * <p>If true, will include entity payment methods as part of the response</p>
         */
        @JsonSetter(value = "paymentMethods", nulls = Nulls.SKIP)
        public Builder paymentMethods(Optional<Boolean> paymentMethods) {
            this.paymentMethods = paymentMethods;
            return this;
        }

        public Builder paymentMethods(Boolean paymentMethods) {
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        /**
         * <p>If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.</p>
         */
        @JsonSetter(value = "isCustomer", nulls = Nulls.SKIP)
        public Builder isCustomer(Optional<Boolean> isCustomer) {
            this.isCustomer = isCustomer;
            return this;
        }

        public Builder isCustomer(Boolean isCustomer) {
            this.isCustomer = Optional.ofNullable(isCustomer);
            return this;
        }

        /**
         * <p>If true, entities that are marked as payees will be returned.
         * If false or not provided, entities that are marked as payees will not be returned.</p>
         */
        @JsonSetter(value = "isPayee", nulls = Nulls.SKIP)
        public Builder isPayee(Optional<Boolean> isPayee) {
            this.isPayee = isPayee;
            return this;
        }

        public Builder isPayee(Boolean isPayee) {
            this.isPayee = Optional.ofNullable(isPayee);
            return this;
        }

        /**
         * <p>If true or not provided, entities that are marked as payors will be returned.
         * If false, entities that are marked as payors will not be returned.</p>
         */
        @JsonSetter(value = "isPayor", nulls = Nulls.SKIP)
        public Builder isPayor(Optional<Boolean> isPayor) {
            this.isPayor = isPayor;
            return this;
        }

        public Builder isPayor(Boolean isPayor) {
            this.isPayor = Optional.ofNullable(isPayor);
            return this;
        }

        /**
         * <p>Use search instead. Deprecated. Filter entities by name. Partial matches are supported.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Find entities by name, email, or emailTo. Partial matches are supported.</p>
         */
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<MetadataFilter> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(MetadataFilter metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Number of entities to return. Limit can range between 1 and 100, and the default is 10.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>The ID of the entity to start after. If not provided, the first page of entities will be returned.</p>
         */
        @JsonSetter(value = "startingAfter", nulls = Nulls.SKIP)
        public Builder startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        public Builder startingAfter(String startingAfter) {
            this.startingAfter = Optional.ofNullable(startingAfter);
            return this;
        }

        public FindEntities build() {
            return new FindEntities(
                    foreignId,
                    status,
                    returnMetadata,
                    paymentMethods,
                    isCustomer,
                    isPayee,
                    isPayor,
                    name,
                    search,
                    metadata,
                    limit,
                    startingAfter,
                    additionalProperties);
        }
    }
}
