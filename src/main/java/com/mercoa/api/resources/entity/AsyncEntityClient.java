/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.approvalpolicy.AsyncApprovalPolicyClient;
import com.mercoa.api.resources.entity.bnpl.AsyncBnplClient;
import com.mercoa.api.resources.entity.bulk.AsyncBulkClient;
import com.mercoa.api.resources.entity.counterparty.AsyncCounterpartyClient;
import com.mercoa.api.resources.entity.customization.AsyncCustomizationClient;
import com.mercoa.api.resources.entity.document.AsyncDocumentClient;
import com.mercoa.api.resources.entity.emaillog.AsyncEmailLogClient;
import com.mercoa.api.resources.entity.emailtemplate.AsyncEmailTemplateClient;
import com.mercoa.api.resources.entity.externalaccountingsystem.AsyncExternalAccountingSystemClient;
import com.mercoa.api.resources.entity.invoice.AsyncInvoiceClient;
import com.mercoa.api.resources.entity.metadata.AsyncMetadataClient;
import com.mercoa.api.resources.entity.notificationpolicy.AsyncNotificationPolicyClient;
import com.mercoa.api.resources.entity.paymentmethod.AsyncPaymentMethodClient;
import com.mercoa.api.resources.entity.representative.AsyncRepresentativeClient;
import com.mercoa.api.resources.entity.requests.EntityEntityGetEventsRequest;
import com.mercoa.api.resources.entity.requests.EntityGetRequest;
import com.mercoa.api.resources.entity.requests.FindEntities;
import com.mercoa.api.resources.entity.requests.GenerateOnboardingLink;
import com.mercoa.api.resources.entity.requests.SendOnboardingLink;
import com.mercoa.api.resources.entity.user.AsyncUserClient;
import com.mercoa.api.resources.entitytypes.types.EntityEventsResponse;
import com.mercoa.api.resources.entitytypes.types.EntityRequest;
import com.mercoa.api.resources.entitytypes.types.EntityResponse;
import com.mercoa.api.resources.entitytypes.types.EntityUpdateRequest;
import com.mercoa.api.resources.entitytypes.types.FindEntityResponse;
import com.mercoa.api.resources.entitytypes.types.ProcessKybRequest;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncEntityClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawEntityClient rawClient;

    protected final Supplier<AsyncCounterpartyClient> counterpartyClient;

    protected final Supplier<AsyncEmailLogClient> emailLogClient;

    protected final Supplier<AsyncPaymentMethodClient> paymentMethodClient;

    protected final Supplier<AsyncUserClient> userClient;

    protected final Supplier<AsyncApprovalPolicyClient> approvalPolicyClient;

    protected final Supplier<AsyncBnplClient> bnplClient;

    protected final Supplier<AsyncBulkClient> bulkClient;

    protected final Supplier<AsyncCustomizationClient> customizationClient;

    protected final Supplier<AsyncDocumentClient> documentClient;

    protected final Supplier<AsyncEmailTemplateClient> emailTemplateClient;

    protected final Supplier<AsyncExternalAccountingSystemClient> externalAccountingSystemClient;

    protected final Supplier<AsyncInvoiceClient> invoiceClient;

    protected final Supplier<AsyncMetadataClient> metadataClient;

    protected final Supplier<AsyncNotificationPolicyClient> notificationPolicyClient;

    protected final Supplier<AsyncRepresentativeClient> representativeClient;

    public AsyncEntityClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawEntityClient(clientOptions);
        this.counterpartyClient = Suppliers.memoize(() -> new AsyncCounterpartyClient(clientOptions));
        this.emailLogClient = Suppliers.memoize(() -> new AsyncEmailLogClient(clientOptions));
        this.paymentMethodClient = Suppliers.memoize(() -> new AsyncPaymentMethodClient(clientOptions));
        this.userClient = Suppliers.memoize(() -> new AsyncUserClient(clientOptions));
        this.approvalPolicyClient = Suppliers.memoize(() -> new AsyncApprovalPolicyClient(clientOptions));
        this.bnplClient = Suppliers.memoize(() -> new AsyncBnplClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new AsyncBulkClient(clientOptions));
        this.customizationClient = Suppliers.memoize(() -> new AsyncCustomizationClient(clientOptions));
        this.documentClient = Suppliers.memoize(() -> new AsyncDocumentClient(clientOptions));
        this.emailTemplateClient = Suppliers.memoize(() -> new AsyncEmailTemplateClient(clientOptions));
        this.externalAccountingSystemClient =
                Suppliers.memoize(() -> new AsyncExternalAccountingSystemClient(clientOptions));
        this.invoiceClient = Suppliers.memoize(() -> new AsyncInvoiceClient(clientOptions));
        this.metadataClient = Suppliers.memoize(() -> new AsyncMetadataClient(clientOptions));
        this.notificationPolicyClient = Suppliers.memoize(() -> new AsyncNotificationPolicyClient(clientOptions));
        this.representativeClient = Suppliers.memoize(() -> new AsyncRepresentativeClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawEntityClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public CompletableFuture<FindEntityResponse> find() {
        return this.rawClient.find().thenApply(response -> response.body());
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public CompletableFuture<FindEntityResponse> find(FindEntities request) {
        return this.rawClient.find(request).thenApply(response -> response.body());
    }

    /**
     * Search all entities with the given filters. If no filters are provided, all entities will be returned.
     */
    public CompletableFuture<FindEntityResponse> find(FindEntities request, RequestOptions requestOptions) {
        return this.rawClient.find(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> create(EntityRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> create(EntityRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> get(String entityId) {
        return this.rawClient.get(entityId).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> get(String entityId, EntityGetRequest request) {
        return this.rawClient.get(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> get(
            String entityId, EntityGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> update(String entityId) {
        return this.rawClient.update(entityId).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> update(String entityId, EntityUpdateRequest request) {
        return this.rawClient.update(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityResponse> update(
            String entityId, EntityUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.
     */
    public CompletableFuture<Void> delete(String entityId) {
        return this.rawClient.delete(entityId).thenApply(response -> response.body());
    }

    /**
     * Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.
     */
    public CompletableFuture<Void> delete(String entityId, RequestOptions requestOptions) {
        return this.rawClient.delete(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.
     */
    public CompletableFuture<Void> acceptTermsOfService(String entityId) {
        return this.rawClient.acceptTermsOfService(entityId).thenApply(response -> response.body());
    }

    /**
     * This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.
     */
    public CompletableFuture<Void> acceptTermsOfService(String entityId, RequestOptions requestOptions) {
        return this.rawClient.acceptTermsOfService(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint is used to initiate KYB for an entity.
     * Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
     * all representatives have been added, and all required fields have been filled out.
     */
    public CompletableFuture<Void> initiateKyb(String entityId) {
        return this.rawClient.initiateKyb(entityId).thenApply(response -> response.body());
    }

    /**
     * This endpoint is used to initiate KYB for an entity.
     * Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
     * all representatives have been added, and all required fields have been filled out.
     */
    public CompletableFuture<Void> initiateKyb(String entityId, RequestOptions requestOptions) {
        return this.rawClient.initiateKyb(entityId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> processKyb(String entityId, ProcessKybRequest request) {
        return this.rawClient.processKyb(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> processKyb(
            String entityId, ProcessKybRequest request, RequestOptions requestOptions) {
        return this.rawClient.processKyb(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get JWT token for entity
     */
    public CompletableFuture<String> getNoOptionToken(String entityId) {
        return this.rawClient.getNoOptionToken(entityId).thenApply(response -> response.body());
    }

    /**
     * Get JWT token for entity
     */
    public CompletableFuture<String> getNoOptionToken(String entityId, RequestOptions requestOptions) {
        return this.rawClient.getNoOptionToken(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(String entityId) {
        return this.rawClient.getToken(entityId).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(String entityId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.
     * <p>&lt;Warning&gt;We recommend using <a href="/api-reference/entity/user/get-token">this endpoint</a>. This will enable features such as approvals and comments.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<String> getToken(
            String entityId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient.getToken(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate an onboarding link for the entity.
     */
    public CompletableFuture<String> getOnboardingLink(String entityId, GenerateOnboardingLink request) {
        return this.rawClient.getOnboardingLink(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Generate an onboarding link for the entity.
     */
    public CompletableFuture<String> getOnboardingLink(
            String entityId, GenerateOnboardingLink request, RequestOptions requestOptions) {
        return this.rawClient
                .getOnboardingLink(entityId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.
     */
    public CompletableFuture<Void> sendOnboardingLink(String entityId, SendOnboardingLink request) {
        return this.rawClient.sendOnboardingLink(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.
     */
    public CompletableFuture<Void> sendOnboardingLink(
            String entityId, SendOnboardingLink request, RequestOptions requestOptions) {
        return this.rawClient
                .sendOnboardingLink(entityId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get all events for an entity
     */
    public CompletableFuture<EntityEventsResponse> events(String entityId) {
        return this.rawClient.events(entityId).thenApply(response -> response.body());
    }

    /**
     * Get all events for an entity
     */
    public CompletableFuture<EntityEventsResponse> events(String entityId, EntityEntityGetEventsRequest request) {
        return this.rawClient.events(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Get all events for an entity
     */
    public CompletableFuture<EntityEventsResponse> events(
            String entityId, EntityEntityGetEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.events(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncCounterpartyClient counterparty() {
        return this.counterpartyClient.get();
    }

    public AsyncEmailLogClient emailLog() {
        return this.emailLogClient.get();
    }

    public AsyncPaymentMethodClient paymentMethod() {
        return this.paymentMethodClient.get();
    }

    public AsyncUserClient user() {
        return this.userClient.get();
    }

    public AsyncApprovalPolicyClient approvalPolicy() {
        return this.approvalPolicyClient.get();
    }

    public AsyncBnplClient bnpl() {
        return this.bnplClient.get();
    }

    public AsyncBulkClient bulk() {
        return this.bulkClient.get();
    }

    public AsyncCustomizationClient customization() {
        return this.customizationClient.get();
    }

    public AsyncDocumentClient document() {
        return this.documentClient.get();
    }

    public AsyncEmailTemplateClient emailTemplate() {
        return this.emailTemplateClient.get();
    }

    public AsyncExternalAccountingSystemClient externalAccountingSystem() {
        return this.externalAccountingSystemClient.get();
    }

    public AsyncInvoiceClient invoice() {
        return this.invoiceClient.get();
    }

    public AsyncMetadataClient metadata() {
        return this.metadataClient.get();
    }

    public AsyncNotificationPolicyClient notificationPolicy() {
        return this.notificationPolicyClient.get();
    }

    public AsyncRepresentativeClient representative() {
        return this.representativeClient.get();
    }
}
