/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.externalaccountingsystem;

import com.mercoa.api.core.ApiError;
import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MediaTypes;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.externalaccountingsystem.requests.SyncExternalSystemRequest;
import com.mercoa.api.resources.entity.externalaccountingsystem.types.ExternalAccountingSystemCompanyCreationRequest;
import com.mercoa.api.resources.entity.externalaccountingsystem.types.ExternalAccountingSystemCompanyResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class ExternalAccountingSystemClient {
    protected final ClientOptions clientOptions;

    public ExternalAccountingSystemClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Create/Link an entity to an external accounting system like Codat or Rutter
     */
    public ExternalAccountingSystemCompanyResponse create(
            String entityId, ExternalAccountingSystemCompanyCreationRequest request) {
        return create(entityId, request, null);
    }

    /**
     * Create/Link an entity to an external accounting system like Codat or Rutter
     */
    public ExternalAccountingSystemCompanyResponse create(
            String entityId, ExternalAccountingSystemCompanyCreationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("external-accounting-system/create")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            OkHttpClient client = clientOptions.httpClient();
            if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                client = clientOptions.httpClientWithTimeout(requestOptions);
            }
            Response response = client.newCall(okhttpRequest).execute();
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        responseBody.string(), ExternalAccountingSystemCompanyResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(
                            responseBody != null ? responseBody.string() : "{}", Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get a link to connect an entity to an external accounting system like Quickbooks or Xero
     */
    public String connect(String entityId) {
        return connect(entityId, null);
    }

    /**
     * Get a link to connect an entity to an external accounting system like Quickbooks or Xero
     */
    public String connect(String entityId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("external-accounting-system/connect")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            OkHttpClient client = clientOptions.httpClient();
            if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                client = clientOptions.httpClientWithTimeout(requestOptions);
            }
            Response response = client.newCall(okhttpRequest).execute();
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), String.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(
                            responseBody != null ? responseBody.string() : "{}", Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public void sync(String entityId) {
        sync(entityId, SyncExternalSystemRequest.builder().build());
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public void sync(String entityId, SyncExternalSystemRequest request) {
        sync(entityId, request, null);
    }

    /**
     * Sync an entity with an external accounting system. Will sync customers/vendors and invoices.
     */
    public void sync(String entityId, SyncExternalSystemRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("external-accounting-system/sync");
        if (request.getVendors().isPresent()) {
            httpUrl.addQueryParameter("vendors", request.getVendors().get().toString());
        }
        if (request.getBills().isPresent()) {
            httpUrl.addQueryParameter("bills", request.getBills().get().toString());
        }
        if (request.getGlAccounts().isPresent()) {
            httpUrl.addQueryParameter(
                    "glAccounts", request.getGlAccounts().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        try {
            OkHttpClient client = clientOptions.httpClient();
            if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                client = clientOptions.httpClientWithTimeout(requestOptions);
            }
            Response response = client.newCall(okhttpRequest).execute();
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(
                            responseBody != null ? responseBody.string() : "{}", Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
