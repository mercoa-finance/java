/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.counterparty.bulk;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.BulkDownloadResponse;
import com.mercoa.api.resources.entity.counterparty.bulk.requests.DownloadBulkPayeesRequest;
import com.mercoa.api.resources.entity.counterparty.bulk.requests.DownloadBulkPayorsRequest;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawBulkClient {
    protected final ClientOptions clientOptions;

    public AsyncRawBulkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayees(String entityId) {
        return downloadPayees(entityId, DownloadBulkPayeesRequest.builder().build());
    }

    /**
     * Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayees(
            String entityId, DownloadBulkPayeesRequest request) {
        return downloadPayees(entityId, request, null);
    }

    /**
     * Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayees(
            String entityId, DownloadBulkPayeesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("counterparties/payees/download");
        if (request.getFormat().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "format", request.getFormat().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getPaymentMethods().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentMethods", request.getPaymentMethods().get(), false);
        }
        if (request.getInvoiceMetrics().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceMetrics", request.getInvoiceMetrics().get(), false);
        }
        if (request.getNetworkType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "networkType", request.getNetworkType().get(), true);
        }
        if (request.getCounterpartyId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "counterpartyId", request.getCounterpartyId().get(), true);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get(), true);
        }
        if (request.getReturnMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "returnMetadata", request.getReturnMetadata().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkDownloadResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayors(String entityId) {
        return downloadPayors(entityId, DownloadBulkPayorsRequest.builder().build());
    }

    /**
     * Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayors(
            String entityId, DownloadBulkPayorsRequest request) {
        return downloadPayors(entityId, request, null);
    }

    /**
     * Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.
     */
    public CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> downloadPayors(
            String entityId, DownloadBulkPayorsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("counterparties/payors/download");
        if (request.getFormat().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "format", request.getFormat().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        if (request.getPaymentMethods().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "paymentMethods", request.getPaymentMethods().get(), false);
        }
        if (request.getInvoiceMetrics().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "invoiceMetrics", request.getInvoiceMetrics().get(), false);
        }
        if (request.getNetworkType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "networkType", request.getNetworkType().get(), true);
        }
        if (request.getCounterpartyId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "counterpartyId", request.getCounterpartyId().get(), true);
        }
        if (request.getMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "metadata", request.getMetadata().get(), true);
        }
        if (request.getReturnMetadata().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "returnMetadata", request.getReturnMetadata().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MercoaHttpResponse<BulkDownloadResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MercoaHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkDownloadResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new MercoaApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MercoaException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
