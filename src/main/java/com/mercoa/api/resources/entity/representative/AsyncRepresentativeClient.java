/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.representative;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entitytypes.types.RepresentativeRequest;
import com.mercoa.api.resources.entitytypes.types.RepresentativeResponse;
import com.mercoa.api.resources.entitytypes.types.RepresentativeUpdateRequest;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncRepresentativeClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawRepresentativeClient rawClient;

    public AsyncRepresentativeClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawRepresentativeClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawRepresentativeClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get representatives for an entity
     */
    public CompletableFuture<List<RepresentativeResponse>> getAll(String entityId) {
        return this.rawClient.getAll(entityId).thenApply(response -> response.body());
    }

    /**
     * Get representatives for an entity
     */
    public CompletableFuture<List<RepresentativeResponse>> getAll(String entityId, RequestOptions requestOptions) {
        return this.rawClient.getAll(entityId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> create(String entityId, RepresentativeRequest request) {
        return this.rawClient.create(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> create(
            String entityId, RepresentativeRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> get(String entityId, String representativeId) {
        return this.rawClient.get(entityId, representativeId).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> get(
            String entityId, String representativeId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, representativeId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> update(String entityId, String representativeId) {
        return this.rawClient.update(entityId, representativeId).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> update(
            String entityId, String representativeId, RepresentativeUpdateRequest request) {
        return this.rawClient.update(entityId, representativeId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<RepresentativeResponse> update(
            String entityId,
            String representativeId,
            RepresentativeUpdateRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .update(entityId, representativeId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String entityId, String representativeId) {
        return this.rawClient.delete(entityId, representativeId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String entityId, String representativeId, RequestOptions requestOptions) {
        return this.rawClient.delete(entityId, representativeId, requestOptions).thenApply(response -> response.body());
    }
}
