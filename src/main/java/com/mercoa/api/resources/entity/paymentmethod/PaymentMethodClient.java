/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.BankAccountClient;
import com.mercoa.api.resources.entity.paymentmethod.requests.GetAllPaymentMethodsRequest;
import com.mercoa.api.resources.entity.paymentmethod.requests.PaymentMethodEventsRequest;
import com.mercoa.api.resources.entity.paymentmethod.requests.PlaidLinkTokenRequest;
import com.mercoa.api.resources.entity.paymentmethod.wallet.WalletClient;
import com.mercoa.api.resources.entitytypes.types.CardLinkTokenResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodEventsResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodRequest;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodUpdateRequest;
import java.util.List;
import java.util.function.Supplier;

public class PaymentMethodClient {
    protected final ClientOptions clientOptions;

    private final RawPaymentMethodClient rawClient;

    protected final Supplier<BankAccountClient> bankAccountClient;

    protected final Supplier<WalletClient> walletClient;

    public PaymentMethodClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawPaymentMethodClient(clientOptions);
        this.bankAccountClient = Suppliers.memoize(() -> new BankAccountClient(clientOptions));
        this.walletClient = Suppliers.memoize(() -> new WalletClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawPaymentMethodClient withRawResponse() {
        return this.rawClient;
    }

    public List<PaymentMethodResponse> getAll(String entityId) {
        return this.rawClient.getAll(entityId).body();
    }

    public List<PaymentMethodResponse> getAll(String entityId, GetAllPaymentMethodsRequest request) {
        return this.rawClient.getAll(entityId, request).body();
    }

    public List<PaymentMethodResponse> getAll(
            String entityId, GetAllPaymentMethodsRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(entityId, request, requestOptions).body();
    }

    public PaymentMethodResponse create(String entityId, PaymentMethodRequest request) {
        return this.rawClient.create(entityId, request).body();
    }

    public PaymentMethodResponse create(String entityId, PaymentMethodRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).body();
    }

    public PaymentMethodResponse get(String entityId, String paymentMethodId) {
        return this.rawClient.get(entityId, paymentMethodId).body();
    }

    public PaymentMethodResponse get(String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, paymentMethodId, requestOptions).body();
    }

    /**
     * Only custom payment methods can be updated.
     */
    public PaymentMethodResponse update(String entityId, String paymentMethodId, PaymentMethodUpdateRequest request) {
        return this.rawClient.update(entityId, paymentMethodId, request).body();
    }

    /**
     * Only custom payment methods can be updated.
     */
    public PaymentMethodResponse update(
            String entityId,
            String paymentMethodId,
            PaymentMethodUpdateRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .update(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    /**
     * Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.
     */
    public void delete(String entityId, String paymentMethodId) {
        this.rawClient.delete(entityId, paymentMethodId).body();
    }

    /**
     * Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.
     */
    public void delete(String entityId, String paymentMethodId, RequestOptions requestOptions) {
        this.rawClient.delete(entityId, paymentMethodId, requestOptions).body();
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public String plaidLinkToken(String entityId) {
        return this.rawClient.plaidLinkToken(entityId).body();
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public String plaidLinkToken(String entityId, PlaidLinkTokenRequest request) {
        return this.rawClient.plaidLinkToken(entityId, request).body();
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public String plaidLinkToken(String entityId, PlaidLinkTokenRequest request, RequestOptions requestOptions) {
        return this.rawClient.plaidLinkToken(entityId, request, requestOptions).body();
    }

    /**
     * Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.
     */
    public CardLinkTokenResponse cardLinkToken(String entityId) {
        return this.rawClient.cardLinkToken(entityId).body();
    }

    /**
     * Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.
     */
    public CardLinkTokenResponse cardLinkToken(String entityId, RequestOptions requestOptions) {
        return this.rawClient.cardLinkToken(entityId, requestOptions).body();
    }

    public PaymentMethodEventsResponse events(String entityId, String paymentMethodId) {
        return this.rawClient.events(entityId, paymentMethodId).body();
    }

    public PaymentMethodEventsResponse events(
            String entityId, String paymentMethodId, PaymentMethodEventsRequest request) {
        return this.rawClient.events(entityId, paymentMethodId, request).body();
    }

    public PaymentMethodEventsResponse events(
            String entityId,
            String paymentMethodId,
            PaymentMethodEventsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .events(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    public BankAccountClient bankAccount() {
        return this.bankAccountClient.get();
    }

    public WalletClient wallet() {
        return this.walletClient.get();
    }
}
