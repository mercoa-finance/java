/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.user;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.user.notificationpolicy.AsyncNotificationPolicyClient;
import com.mercoa.api.resources.entity.user.notifications.AsyncNotificationsClient;
import com.mercoa.api.resources.entity.user.requests.EntityFindEntityRequest;
import com.mercoa.api.resources.entitytypes.types.EntityUserRequest;
import com.mercoa.api.resources.entitytypes.types.EntityUserResponse;
import com.mercoa.api.resources.entitytypes.types.FindEntityUserResponse;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncUserClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawUserClient rawClient;

    protected final Supplier<AsyncNotificationPolicyClient> notificationPolicyClient;

    protected final Supplier<AsyncNotificationsClient> notificationsClient;

    public AsyncUserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawUserClient(clientOptions);
        this.notificationPolicyClient = Suppliers.memoize(() -> new AsyncNotificationPolicyClient(clientOptions));
        this.notificationsClient = Suppliers.memoize(() -> new AsyncNotificationsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawUserClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search entity users
     */
    public CompletableFuture<FindEntityUserResponse> find(String entityId) {
        return this.rawClient.find(entityId).thenApply(response -> response.body());
    }

    /**
     * Search entity users
     */
    public CompletableFuture<FindEntityUserResponse> find(String entityId, EntityFindEntityRequest request) {
        return this.rawClient.find(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Search entity users
     */
    public CompletableFuture<FindEntityUserResponse> find(
            String entityId, EntityFindEntityRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityUserResponse> create(String entityId) {
        return this.rawClient.create(entityId).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityUserResponse> create(String entityId, EntityUserRequest request) {
        return this.rawClient.create(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<EntityUserResponse> create(
            String entityId, EntityUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get entity user
     */
    public CompletableFuture<EntityUserResponse> get(String entityId, String userId) {
        return this.rawClient.get(entityId, userId).thenApply(response -> response.body());
    }

    /**
     * Get entity user
     */
    public CompletableFuture<EntityUserResponse> get(String entityId, String userId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, userId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update entity user
     */
    public CompletableFuture<EntityUserResponse> update(String entityId, String userId) {
        return this.rawClient.update(entityId, userId).thenApply(response -> response.body());
    }

    /**
     * Update entity user
     */
    public CompletableFuture<EntityUserResponse> update(String entityId, String userId, EntityUserRequest request) {
        return this.rawClient.update(entityId, userId, request).thenApply(response -> response.body());
    }

    /**
     * Update entity user
     */
    public CompletableFuture<EntityUserResponse> update(
            String entityId, String userId, EntityUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(entityId, userId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public CompletableFuture<Void> delete(String entityId, String userId) {
        return this.rawClient.delete(entityId, userId).thenApply(response -> response.body());
    }

    /**
     * Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public CompletableFuture<Void> delete(String entityId, String userId, RequestOptions requestOptions) {
        return this.rawClient.delete(entityId, userId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public CompletableFuture<String> getToken(String entityId, String userId) {
        return this.rawClient.getToken(entityId, userId).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public CompletableFuture<String> getToken(String entityId, String userId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityId, userId, request).thenApply(response -> response.body());
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public CompletableFuture<String> getToken(
            String entityId, String userId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient
                .getToken(entityId, userId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public AsyncNotificationPolicyClient notificationPolicy() {
        return this.notificationPolicyClient.get();
    }

    public AsyncNotificationsClient notifications() {
        return this.notificationsClient.get();
    }
}
