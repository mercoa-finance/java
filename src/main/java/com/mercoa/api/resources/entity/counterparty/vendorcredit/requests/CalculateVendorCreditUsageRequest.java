/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.counterparty.vendorcredit.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculateVendorCreditUsageRequest.Builder.class)
public final class CalculateVendorCreditUsageRequest {
    private final double amount;

    private final Optional<CurrencyCode> currency;

    private final Optional<List<String>> excludedInvoiceIds;

    private final Optional<List<String>> includedVendorCreditIds;

    private final Map<String, Object> additionalProperties;

    private CalculateVendorCreditUsageRequest(
            double amount,
            Optional<CurrencyCode> currency,
            Optional<List<String>> excludedInvoiceIds,
            Optional<List<String>> includedVendorCreditIds,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.currency = currency;
        this.excludedInvoiceIds = excludedInvoiceIds;
        this.includedVendorCreditIds = includedVendorCreditIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount of the invoice to calculate vendor credit usage for.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return The currency of the invoice to calculate vendor credit usage for. Defaults to USD.
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.
     */
    @JsonProperty("excludedInvoiceIds")
    public Optional<List<String>> getExcludedInvoiceIds() {
        return excludedInvoiceIds;
    }

    /**
     * @return List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).
     */
    @JsonProperty("includedVendorCreditIds")
    public Optional<List<String>> getIncludedVendorCreditIds() {
        return includedVendorCreditIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculateVendorCreditUsageRequest && equalTo((CalculateVendorCreditUsageRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculateVendorCreditUsageRequest other) {
        return amount == other.amount
                && currency.equals(other.currency)
                && excludedInvoiceIds.equals(other.excludedInvoiceIds)
                && includedVendorCreditIds.equals(other.includedVendorCreditIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.currency, this.excludedInvoiceIds, this.includedVendorCreditIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        /**
         * <p>The amount of the invoice to calculate vendor credit usage for.</p>
         */
        _FinalStage amount(double amount);

        Builder from(CalculateVendorCreditUsageRequest other);
    }

    public interface _FinalStage {
        CalculateVendorCreditUsageRequest build();

        /**
         * <p>The currency of the invoice to calculate vendor credit usage for. Defaults to USD.</p>
         */
        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);

        /**
         * <p>List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.</p>
         */
        _FinalStage excludedInvoiceIds(Optional<List<String>> excludedInvoiceIds);

        _FinalStage excludedInvoiceIds(List<String> excludedInvoiceIds);

        /**
         * <p>List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).</p>
         */
        _FinalStage includedVendorCreditIds(Optional<List<String>> includedVendorCreditIds);

        _FinalStage includedVendorCreditIds(List<String> includedVendorCreditIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, _FinalStage {
        private double amount;

        private Optional<List<String>> includedVendorCreditIds = Optional.empty();

        private Optional<List<String>> excludedInvoiceIds = Optional.empty();

        private Optional<CurrencyCode> currency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculateVendorCreditUsageRequest other) {
            amount(other.getAmount());
            currency(other.getCurrency());
            excludedInvoiceIds(other.getExcludedInvoiceIds());
            includedVendorCreditIds(other.getIncludedVendorCreditIds());
            return this;
        }

        /**
         * <p>The amount of the invoice to calculate vendor credit usage for.</p>
         * <p>The amount of the invoice to calculate vendor credit usage for.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public _FinalStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage includedVendorCreditIds(List<String> includedVendorCreditIds) {
            this.includedVendorCreditIds = Optional.ofNullable(includedVendorCreditIds);
            return this;
        }

        /**
         * <p>List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "includedVendorCreditIds", nulls = Nulls.SKIP)
        public _FinalStage includedVendorCreditIds(Optional<List<String>> includedVendorCreditIds) {
            this.includedVendorCreditIds = includedVendorCreditIds;
            return this;
        }

        /**
         * <p>List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage excludedInvoiceIds(List<String> excludedInvoiceIds) {
            this.excludedInvoiceIds = Optional.ofNullable(excludedInvoiceIds);
            return this;
        }

        /**
         * <p>List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "excludedInvoiceIds", nulls = Nulls.SKIP)
        public _FinalStage excludedInvoiceIds(Optional<List<String>> excludedInvoiceIds) {
            this.excludedInvoiceIds = excludedInvoiceIds;
            return this;
        }

        /**
         * <p>The currency of the invoice to calculate vendor credit usage for. Defaults to USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>The currency of the invoice to calculate vendor credit usage for. Defaults to USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        public CalculateVendorCreditUsageRequest build() {
            return new CalculateVendorCreditUsageRequest(
                    amount, currency, excludedInvoiceIds, includedVendorCreditIds, additionalProperties);
        }
    }
}
