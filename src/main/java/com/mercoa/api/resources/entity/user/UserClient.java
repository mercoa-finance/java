/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.user;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.user.notificationpolicy.NotificationPolicyClient;
import com.mercoa.api.resources.entity.user.notifications.NotificationsClient;
import com.mercoa.api.resources.entity.user.requests.EntityFindEntityRequest;
import com.mercoa.api.resources.entitytypes.types.EntityUserRequest;
import com.mercoa.api.resources.entitytypes.types.EntityUserResponse;
import com.mercoa.api.resources.entitytypes.types.FindEntityUserResponse;
import com.mercoa.api.resources.entitytypes.types.TokenGenerationOptions;
import java.util.function.Supplier;

public class UserClient {
    protected final ClientOptions clientOptions;

    private final RawUserClient rawClient;

    protected final Supplier<NotificationPolicyClient> notificationPolicyClient;

    protected final Supplier<NotificationsClient> notificationsClient;

    public UserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawUserClient(clientOptions);
        this.notificationPolicyClient = Suppliers.memoize(() -> new NotificationPolicyClient(clientOptions));
        this.notificationsClient = Suppliers.memoize(() -> new NotificationsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawUserClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search entity users
     */
    public FindEntityUserResponse find(String entityId) {
        return this.rawClient.find(entityId).body();
    }

    /**
     * Search entity users
     */
    public FindEntityUserResponse find(String entityId, EntityFindEntityRequest request) {
        return this.rawClient.find(entityId, request).body();
    }

    /**
     * Search entity users
     */
    public FindEntityUserResponse find(
            String entityId, EntityFindEntityRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(entityId, request, requestOptions).body();
    }

    public EntityUserResponse create(String entityId) {
        return this.rawClient.create(entityId).body();
    }

    public EntityUserResponse create(String entityId, EntityUserRequest request) {
        return this.rawClient.create(entityId, request).body();
    }

    public EntityUserResponse create(String entityId, EntityUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).body();
    }

    /**
     * Get entity user
     */
    public EntityUserResponse get(String entityId, String userId) {
        return this.rawClient.get(entityId, userId).body();
    }

    /**
     * Get entity user
     */
    public EntityUserResponse get(String entityId, String userId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, userId, requestOptions).body();
    }

    /**
     * Update entity user
     */
    public EntityUserResponse update(String entityId, String userId) {
        return this.rawClient.update(entityId, userId).body();
    }

    /**
     * Update entity user
     */
    public EntityUserResponse update(String entityId, String userId, EntityUserRequest request) {
        return this.rawClient.update(entityId, userId, request).body();
    }

    /**
     * Update entity user
     */
    public EntityUserResponse update(
            String entityId, String userId, EntityUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(entityId, userId, request, requestOptions).body();
    }

    /**
     * Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public void delete(String entityId, String userId) {
        this.rawClient.delete(entityId, userId).body();
    }

    /**
     * Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.
     */
    public void delete(String entityId, String userId, RequestOptions requestOptions) {
        this.rawClient.delete(entityId, userId, requestOptions).body();
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public String getToken(String entityId, String userId) {
        return this.rawClient.getToken(entityId, userId).body();
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public String getToken(String entityId, String userId, TokenGenerationOptions request) {
        return this.rawClient.getToken(entityId, userId, request).body();
    }

    /**
     * Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.
     */
    public String getToken(
            String entityId, String userId, TokenGenerationOptions request, RequestOptions requestOptions) {
        return this.rawClient
                .getToken(entityId, userId, request, requestOptions)
                .body();
    }

    public NotificationPolicyClient notificationPolicy() {
        return this.notificationPolicyClient.get();
    }

    public NotificationsClient notifications() {
        return this.notificationsClient.get();
    }
}
