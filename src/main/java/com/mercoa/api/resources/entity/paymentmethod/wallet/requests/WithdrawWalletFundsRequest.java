/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod.wallet.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WithdrawWalletFundsRequest.Builder.class)
public final class WithdrawWalletFundsRequest {
    private final double amount;

    private final Optional<CurrencyCode> currency;

    private final String destinationPaymentMethodId;

    private final Map<String, Object> additionalProperties;

    private WithdrawWalletFundsRequest(
            double amount,
            Optional<CurrencyCode> currency,
            String destinationPaymentMethodId,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.currency = currency;
        this.destinationPaymentMethodId = destinationPaymentMethodId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount of the funds to withdraw. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return The currency of the funds to withdraw. (Defaults to USD, currently only USD is supported.)
     */
    @JsonProperty("currency")
    public Optional<CurrencyCode> getCurrency() {
        return currency;
    }

    /**
     * @return The ID of the bank account to withdraw funds to. The destination payment method ID must refer to a bank account.
     */
    @JsonProperty("destinationPaymentMethodId")
    public String getDestinationPaymentMethodId() {
        return destinationPaymentMethodId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WithdrawWalletFundsRequest && equalTo((WithdrawWalletFundsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WithdrawWalletFundsRequest other) {
        return amount == other.amount
                && currency.equals(other.currency)
                && destinationPaymentMethodId.equals(other.destinationPaymentMethodId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.currency, this.destinationPaymentMethodId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        DestinationPaymentMethodIdStage amount(double amount);

        Builder from(WithdrawWalletFundsRequest other);
    }

    public interface DestinationPaymentMethodIdStage {
        _FinalStage destinationPaymentMethodId(@NotNull String destinationPaymentMethodId);
    }

    public interface _FinalStage {
        WithdrawWalletFundsRequest build();

        _FinalStage currency(Optional<CurrencyCode> currency);

        _FinalStage currency(CurrencyCode currency);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, DestinationPaymentMethodIdStage, _FinalStage {
        private double amount;

        private String destinationPaymentMethodId;

        private Optional<CurrencyCode> currency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WithdrawWalletFundsRequest other) {
            amount(other.getAmount());
            currency(other.getCurrency());
            destinationPaymentMethodId(other.getDestinationPaymentMethodId());
            return this;
        }

        /**
         * <p>The amount of the funds to withdraw. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public DestinationPaymentMethodIdStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>The ID of the bank account to withdraw funds to. The destination payment method ID must refer to a bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("destinationPaymentMethodId")
        public _FinalStage destinationPaymentMethodId(@NotNull String destinationPaymentMethodId) {
            this.destinationPaymentMethodId =
                    Objects.requireNonNull(destinationPaymentMethodId, "destinationPaymentMethodId must not be null");
            return this;
        }

        /**
         * <p>The currency of the funds to withdraw. (Defaults to USD, currently only USD is supported.)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(CurrencyCode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<CurrencyCode> currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        public WithdrawWalletFundsRequest build() {
            return new WithdrawWalletFundsRequest(amount, currency, destinationPaymentMethodId, additionalProperties);
        }
    }
}
