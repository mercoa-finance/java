/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.invoice.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GetInvoice.Builder.class)
public final class GetInvoice {
    private final Optional<Boolean> includeFees;

    private final Map<String, Object> additionalProperties;

    private GetInvoice(Optional<Boolean> includeFees, Map<String, Object> additionalProperties) {
        this.includeFees = includeFees;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return DEPRECATED. Fees are now included by default in the response.
     */
    @JsonProperty("includeFees")
    public Optional<Boolean> getIncludeFees() {
        return includeFees;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetInvoice && equalTo((GetInvoice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetInvoice other) {
        return includeFees.equals(other.includeFees);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.includeFees);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> includeFees = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetInvoice other) {
            includeFees(other.getIncludeFees());
            return this;
        }

        @JsonSetter(value = "includeFees", nulls = Nulls.SKIP)
        public Builder includeFees(Optional<Boolean> includeFees) {
            this.includeFees = includeFees;
            return this;
        }

        public Builder includeFees(Boolean includeFees) {
            this.includeFees = Optional.of(includeFees);
            return this;
        }

        public GetInvoice build() {
            return new GetInvoice(includeFees, additionalProperties);
        }
    }
}
