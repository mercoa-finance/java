/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod.bankaccount;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.AddAccelerationFundsRequest;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.CompleteMicroDepositsRequest;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.requests.RemoveAccelerationFundsRequest;
import com.mercoa.api.resources.entitytypes.types.AccelerationFundsResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodBalanceResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;

public class BankAccountClient {
    protected final ClientOptions clientOptions;

    private final RawBankAccountClient rawClient;

    public BankAccountClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawBankAccountClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawBankAccountClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Initiate micro deposits for a bank account
     */
    public PaymentMethodResponse initiateMicroDeposits(String entityId, String paymentMethodId) {
        return this.rawClient.initiateMicroDeposits(entityId, paymentMethodId).body();
    }

    /**
     * Initiate micro deposits for a bank account
     */
    public PaymentMethodResponse initiateMicroDeposits(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .initiateMicroDeposits(entityId, paymentMethodId, requestOptions)
                .body();
    }

    /**
     * Complete micro deposit verification
     */
    public PaymentMethodResponse completeMicroDeposits(
            String entityId, String paymentMethodId, CompleteMicroDepositsRequest request) {
        return this.rawClient
                .completeMicroDeposits(entityId, paymentMethodId, request)
                .body();
    }

    /**
     * Complete micro deposit verification
     */
    public PaymentMethodResponse completeMicroDeposits(
            String entityId,
            String paymentMethodId,
            CompleteMicroDepositsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .completeMicroDeposits(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    /**
     * Get the available and pending balance of this entity's acceleration funds. The specified payment method must be a bank account.
     */
    public AccelerationFundsResponse getAccelerationFunds(String entityId, String paymentMethodId) {
        return this.rawClient.getAccelerationFunds(entityId, paymentMethodId).body();
    }

    /**
     * Get the available and pending balance of this entity's acceleration funds. The specified payment method must be a bank account.
     */
    public AccelerationFundsResponse getAccelerationFunds(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .getAccelerationFunds(entityId, paymentMethodId, requestOptions)
                .body();
    }

    /**
     * Add acceleration funds to this entity from a bank account (this transfer is D+2). The specified payment method must be a bank account.
     */
    public void addAccelerationFunds(String entityId, String paymentMethodId, AddAccelerationFundsRequest request) {
        this.rawClient.addAccelerationFunds(entityId, paymentMethodId, request).body();
    }

    /**
     * Add acceleration funds to this entity from a bank account (this transfer is D+2). The specified payment method must be a bank account.
     */
    public void addAccelerationFunds(
            String entityId,
            String paymentMethodId,
            AddAccelerationFundsRequest request,
            RequestOptions requestOptions) {
        this.rawClient
                .addAccelerationFunds(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    /**
     * Remove acceleration funds from this entity to a bank account (this transfer is D+0). The specified payment method must be a bank account.
     */
    public void removeAccelerationFunds(
            String entityId, String paymentMethodId, RemoveAccelerationFundsRequest request) {
        this.rawClient
                .removeAccelerationFunds(entityId, paymentMethodId, request)
                .body();
    }

    /**
     * Remove acceleration funds from this entity to a bank account (this transfer is D+0). The specified payment method must be a bank account.
     */
    public void removeAccelerationFunds(
            String entityId,
            String paymentMethodId,
            RemoveAccelerationFundsRequest request,
            RequestOptions requestOptions) {
        this.rawClient
                .removeAccelerationFunds(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    /**
     * Deprecated. Get the available balance of a payment method. Only bank accounts added with Plaid are supported. This endpoint will return a cached value and will refresh the balance when called.
     */
    public PaymentMethodBalanceResponse getBalance(String entityId, String paymentMethodId) {
        return this.rawClient.getBalance(entityId, paymentMethodId).body();
    }

    /**
     * Deprecated. Get the available balance of a payment method. Only bank accounts added with Plaid are supported. This endpoint will return a cached value and will refresh the balance when called.
     */
    public PaymentMethodBalanceResponse getBalance(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .getBalance(entityId, paymentMethodId, requestOptions)
                .body();
    }
}
