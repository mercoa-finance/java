/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.document;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.DocumentResponse;
import com.mercoa.api.resources.entity.document.requests.GetDocumentsRequest;
import com.mercoa.api.resources.entity.document.requests.UploadDocumentRequest;
import java.util.List;

public class DocumentClient {
    protected final ClientOptions clientOptions;

    private final RawDocumentClient rawClient;

    public DocumentClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawDocumentClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawDocumentClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get documents (1099/W9) associated with this entity
     */
    public List<DocumentResponse> getAll(String entityId) {
        return this.rawClient.getAll(entityId).body();
    }

    /**
     * Get documents (1099/W9) associated with this entity
     */
    public List<DocumentResponse> getAll(String entityId, GetDocumentsRequest request) {
        return this.rawClient.getAll(entityId, request).body();
    }

    /**
     * Get documents (1099/W9) associated with this entity
     */
    public List<DocumentResponse> getAll(String entityId, GetDocumentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(entityId, request, requestOptions).body();
    }

    /**
     * Upload documents associated with this entity
     */
    public void upload(String entityId, UploadDocumentRequest request) {
        this.rawClient.upload(entityId, request).body();
    }

    /**
     * Upload documents associated with this entity
     */
    public void upload(String entityId, UploadDocumentRequest request, RequestOptions requestOptions) {
        this.rawClient.upload(entityId, request, requestOptions).body();
    }

    /**
     * Delete a document associated with this entity
     */
    public void delete(String entityId, String documentId) {
        this.rawClient.delete(entityId, documentId).body();
    }

    /**
     * Delete a document associated with this entity
     */
    public void delete(String entityId, String documentId, RequestOptions requestOptions) {
        this.rawClient.delete(entityId, documentId, requestOptions).body();
    }
}
