/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.invoice;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.commons.types.BulkDownloadResponse;
import com.mercoa.api.resources.entity.invoice.requests.DownloadEntityInvoicesRequest;
import com.mercoa.api.resources.entity.invoice.requests.EntityGetInvoicesRequest;
import com.mercoa.api.resources.entity.invoice.requests.InvoiceMetricsRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceMetricsResponse;
import java.util.List;

public class InvoiceClient {
    protected final ClientOptions clientOptions;

    private final RawInvoiceClient rawClient;

    public InvoiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawInvoiceClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawInvoiceClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId) {
        return this.rawClient.find(entityId).body();
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId, EntityGetInvoicesRequest request) {
        return this.rawClient.find(entityId, request).body();
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId, EntityGetInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.find(entityId, request, requestOptions).body();
    }

    /**
     * Get invoice metrics for an entity with the given filters. Invoices will always be grouped by currency. If none of excludePayables, excludeReceivables, payerId, vendorId, or invoiceId status filters are provided, excludeReceivables will be set to true.
     */
    public List<InvoiceMetricsResponse> metrics(String entityId) {
        return this.rawClient.metrics(entityId).body();
    }

    /**
     * Get invoice metrics for an entity with the given filters. Invoices will always be grouped by currency. If none of excludePayables, excludeReceivables, payerId, vendorId, or invoiceId status filters are provided, excludeReceivables will be set to true.
     */
    public List<InvoiceMetricsResponse> metrics(String entityId, InvoiceMetricsRequest request) {
        return this.rawClient.metrics(entityId, request).body();
    }

    /**
     * Get invoice metrics for an entity with the given filters. Invoices will always be grouped by currency. If none of excludePayables, excludeReceivables, payerId, vendorId, or invoiceId status filters are provided, excludeReceivables will be set to true.
     */
    public List<InvoiceMetricsResponse> metrics(
            String entityId, InvoiceMetricsRequest request, RequestOptions requestOptions) {
        return this.rawClient.metrics(entityId, request, requestOptions).body();
    }

    /**
     * Get a URL to download invoices for an entity as a CSV/JSON file.
     */
    public BulkDownloadResponse download(String entityId) {
        return this.rawClient.download(entityId).body();
    }

    /**
     * Get a URL to download invoices for an entity as a CSV/JSON file.
     */
    public BulkDownloadResponse download(String entityId, DownloadEntityInvoicesRequest request) {
        return this.rawClient.download(entityId, request).body();
    }

    /**
     * Get a URL to download invoices for an entity as a CSV/JSON file.
     */
    public BulkDownloadResponse download(
            String entityId, DownloadEntityInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.download(entityId, request, requestOptions).body();
    }
}
