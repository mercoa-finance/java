/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.invoice;

import com.fasterxml.jackson.core.type.TypeReference;
import com.mercoa.api.core.ApiError;
import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.invoice.requests.EntityGetInvoicesRequest;
import com.mercoa.api.resources.entity.invoice.requests.GetInvoice;
import com.mercoa.api.resources.entity.invoice.requests.InvoiceMetricsRequest;
import com.mercoa.api.resources.invoicetypes.types.FindInvoiceResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceMetricsResponse;
import com.mercoa.api.resources.invoicetypes.types.InvoiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public class InvoiceClient {
    protected final ClientOptions clientOptions;

    public InvoiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId) {
        return find(entityId, EntityGetInvoicesRequest.builder().build());
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId, EntityGetInvoicesRequest request) {
        return find(entityId, request, null);
    }

    /**
     * Get invoices for an entity with the given filters.
     */
    public FindInvoiceResponse find(String entityId, EntityGetInvoicesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("invoices");
        if (request.getExcludePayables().isPresent()) {
            httpUrl.addQueryParameter(
                    "excludePayables", request.getExcludePayables().get().toString());
        }
        if (request.getExcludeReceivables().isPresent()) {
            httpUrl.addQueryParameter(
                    "excludeReceivables", request.getExcludeReceivables().get().toString());
        }
        if (request.getStartDate().isPresent()) {
            httpUrl.addQueryParameter("startDate", request.getStartDate().get().toString());
        }
        if (request.getEndDate().isPresent()) {
            httpUrl.addQueryParameter("endDate", request.getEndDate().get().toString());
        }
        if (request.getOrderBy().isPresent()) {
            httpUrl.addQueryParameter("orderBy", request.getOrderBy().get().toString());
        }
        if (request.getOrderDirection().isPresent()) {
            httpUrl.addQueryParameter(
                    "orderDirection", request.getOrderDirection().get().toString());
        }
        if (request.getLimit().isPresent()) {
            httpUrl.addQueryParameter("limit", request.getLimit().get().toString());
        }
        if (request.getStartingAfter().isPresent()) {
            httpUrl.addQueryParameter(
                    "startingAfter", request.getStartingAfter().get());
        }
        if (request.getSearch().isPresent()) {
            httpUrl.addQueryParameter("search", request.getSearch().get());
        }
        if (request.getPayerId().isPresent()) {
            httpUrl.addQueryParameter("payerId", request.getPayerId().get());
        }
        if (request.getVendorId().isPresent()) {
            httpUrl.addQueryParameter("vendorId", request.getVendorId().get());
        }
        if (request.getApproverId().isPresent()) {
            httpUrl.addQueryParameter("approverId", request.getApproverId().get());
        }
        if (request.getInvoiceId().isPresent()) {
            httpUrl.addQueryParameter("invoiceId", request.getInvoiceId().get());
        }
        if (request.getStatus().isPresent()) {
            httpUrl.addQueryParameter("status", request.getStatus().get().toString());
        }
        if (request.getIncludeFees().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeFees", request.getIncludeFees().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), FindInvoiceResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public InvoiceResponse get(String entityId, String invoiceId) {
        return get(entityId, invoiceId, GetInvoice.builder().build());
    }

    public InvoiceResponse get(String entityId, String invoiceId, GetInvoice request) {
        return get(entityId, invoiceId, request, null);
    }

    public InvoiceResponse get(String entityId, String invoiceId, GetInvoice request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("invoice")
                .addPathSegment(invoiceId);
        if (request.getIncludeFees().isPresent()) {
            httpUrl.addQueryParameter(
                    "includeFees", request.getIncludeFees().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), InvoiceResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get invoice metrics for an entity with the given filters.
     */
    public List<InvoiceMetricsResponse> metrics(String entityId) {
        return metrics(entityId, InvoiceMetricsRequest.builder().build());
    }

    /**
     * Get invoice metrics for an entity with the given filters.
     */
    public List<InvoiceMetricsResponse> metrics(String entityId, InvoiceMetricsRequest request) {
        return metrics(entityId, request, null);
    }

    /**
     * Get invoice metrics for an entity with the given filters.
     */
    public List<InvoiceMetricsResponse> metrics(
            String entityId, InvoiceMetricsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("entity")
                .addPathSegment(entityId)
                .addPathSegments("invoice-metrics");
        if (request.getSearch().isPresent()) {
            httpUrl.addQueryParameter("search", request.getSearch().get());
        }
        if (request.getExcludePayables().isPresent()) {
            httpUrl.addQueryParameter(
                    "excludePayables", request.getExcludePayables().get().toString());
        }
        if (request.getExcludeReceivables().isPresent()) {
            httpUrl.addQueryParameter(
                    "excludeReceivables", request.getExcludeReceivables().get().toString());
        }
        if (request.getPayerId().isPresent()) {
            httpUrl.addQueryParameter("payerId", request.getPayerId().get());
        }
        if (request.getVendorId().isPresent()) {
            httpUrl.addQueryParameter("vendorId", request.getVendorId().get());
        }
        if (request.getApproverId().isPresent()) {
            httpUrl.addQueryParameter("approverId", request.getApproverId().get());
        }
        if (request.getInvoiceId().isPresent()) {
            httpUrl.addQueryParameter("invoiceId", request.getInvoiceId().get());
        }
        if (request.getStatus().isPresent()) {
            httpUrl.addQueryParameter("status", request.getStatus().get().toString());
        }
        if (request.getDueDateStart().isPresent()) {
            httpUrl.addQueryParameter(
                    "dueDateStart", request.getDueDateStart().get().toString());
        }
        if (request.getDueDateEnd().isPresent()) {
            httpUrl.addQueryParameter(
                    "dueDateEnd", request.getDueDateEnd().get().toString());
        }
        if (request.getCreatedDateStart().isPresent()) {
            httpUrl.addQueryParameter(
                    "createdDateStart", request.getCreatedDateStart().get().toString());
        }
        if (request.getCreatedDateEnd().isPresent()) {
            httpUrl.addQueryParameter(
                    "createdDateEnd", request.getCreatedDateEnd().get().toString());
        }
        if (request.getCurrency().isPresent()) {
            httpUrl.addQueryParameter("currency", request.getCurrency().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<InvoiceMetricsResponse>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
