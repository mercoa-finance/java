/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.core.Suppliers;
import com.mercoa.api.resources.entity.paymentmethod.bankaccount.AsyncBankAccountClient;
import com.mercoa.api.resources.entity.paymentmethod.requests.GetAllPaymentMethodsRequest;
import com.mercoa.api.resources.entity.paymentmethod.requests.PaymentMethodEventsRequest;
import com.mercoa.api.resources.entity.paymentmethod.requests.PlaidLinkTokenRequest;
import com.mercoa.api.resources.entity.paymentmethod.wallet.AsyncWalletClient;
import com.mercoa.api.resources.entitytypes.types.CardLinkTokenResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodEventsResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodRequest;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodResponse;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodUpdateRequest;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncPaymentMethodClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawPaymentMethodClient rawClient;

    protected final Supplier<AsyncBankAccountClient> bankAccountClient;

    protected final Supplier<AsyncWalletClient> walletClient;

    public AsyncPaymentMethodClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawPaymentMethodClient(clientOptions);
        this.bankAccountClient = Suppliers.memoize(() -> new AsyncBankAccountClient(clientOptions));
        this.walletClient = Suppliers.memoize(() -> new AsyncWalletClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawPaymentMethodClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<List<PaymentMethodResponse>> getAll(String entityId) {
        return this.rawClient.getAll(entityId).thenApply(response -> response.body());
    }

    public CompletableFuture<List<PaymentMethodResponse>> getAll(String entityId, GetAllPaymentMethodsRequest request) {
        return this.rawClient.getAll(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<List<PaymentMethodResponse>> getAll(
            String entityId, GetAllPaymentMethodsRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodResponse> create(String entityId, PaymentMethodRequest request) {
        return this.rawClient.create(entityId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodResponse> create(
            String entityId, PaymentMethodRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodResponse> get(String entityId, String paymentMethodId) {
        return this.rawClient.get(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodResponse> get(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient.get(entityId, paymentMethodId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Only custom payment methods can be updated.
     */
    public CompletableFuture<PaymentMethodResponse> update(
            String entityId, String paymentMethodId, PaymentMethodUpdateRequest request) {
        return this.rawClient.update(entityId, paymentMethodId, request).thenApply(response -> response.body());
    }

    /**
     * Only custom payment methods can be updated.
     */
    public CompletableFuture<PaymentMethodResponse> update(
            String entityId,
            String paymentMethodId,
            PaymentMethodUpdateRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .update(entityId, paymentMethodId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.
     */
    public CompletableFuture<Void> delete(String entityId, String paymentMethodId) {
        return this.rawClient.delete(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    /**
     * Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.
     */
    public CompletableFuture<Void> delete(String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient.delete(entityId, paymentMethodId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public CompletableFuture<String> plaidLinkToken(String entityId) {
        return this.rawClient.plaidLinkToken(entityId).thenApply(response -> response.body());
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public CompletableFuture<String> plaidLinkToken(String entityId, PlaidLinkTokenRequest request) {
        return this.rawClient.plaidLinkToken(entityId, request).thenApply(response -> response.body());
    }

    /**
     * Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.
     */
    public CompletableFuture<String> plaidLinkToken(
            String entityId, PlaidLinkTokenRequest request, RequestOptions requestOptions) {
        return this.rawClient.plaidLinkToken(entityId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.
     */
    public CompletableFuture<CardLinkTokenResponse> cardLinkToken(String entityId) {
        return this.rawClient.cardLinkToken(entityId).thenApply(response -> response.body());
    }

    /**
     * Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.
     */
    public CompletableFuture<CardLinkTokenResponse> cardLinkToken(String entityId, RequestOptions requestOptions) {
        return this.rawClient.cardLinkToken(entityId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodEventsResponse> events(String entityId, String paymentMethodId) {
        return this.rawClient.events(entityId, paymentMethodId).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodEventsResponse> events(
            String entityId, String paymentMethodId, PaymentMethodEventsRequest request) {
        return this.rawClient.events(entityId, paymentMethodId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<PaymentMethodEventsResponse> events(
            String entityId,
            String paymentMethodId,
            PaymentMethodEventsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .events(entityId, paymentMethodId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public AsyncBankAccountClient bankAccount() {
        return this.bankAccountClient.get();
    }

    public AsyncWalletClient wallet() {
        return this.walletClient.get();
    }
}
