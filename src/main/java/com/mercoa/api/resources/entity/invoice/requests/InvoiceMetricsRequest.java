/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.invoice.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.invoicetypes.types.InvoiceDateFilter;
import com.mercoa.api.resources.invoicetypes.types.InvoiceMetricsGroupBy;
import com.mercoa.api.resources.invoicetypes.types.InvoiceMetricsPerDateFrequency;
import com.mercoa.api.resources.invoicetypes.types.InvoiceMetricsPerDateGroupBy;
import com.mercoa.api.resources.invoicetypes.types.InvoiceStatus;
import com.mercoa.api.resources.paymentmethodtypes.types.CurrencyCode;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceMetricsRequest.Builder.class)
public final class InvoiceMetricsRequest {
    private final Optional<List<InvoiceMetricsGroupBy>> groupBy;

    private final Optional<List<String>> payerId;

    private final Optional<List<String>> vendorId;

    private final Optional<List<String>> approverId;

    private final Optional<List<String>> invoiceId;

    private final Optional<List<InvoiceStatus>> status;

    private final Optional<List<CurrencyCode>> currency;

    private final Optional<String> search;

    private final Optional<Boolean> excludePayables;

    private final Optional<Boolean> excludeReceivables;

    private final Optional<InvoiceMetricsPerDateGroupBy> returnByDate;

    private final Optional<InvoiceMetricsPerDateFrequency> returnByDateFrequency;

    private final Optional<String> approverCount;

    private final Optional<OffsetDateTime> startDate;

    private final Optional<OffsetDateTime> endDate;

    private final Optional<InvoiceDateFilter> dateType;

    private final Map<String, Object> additionalProperties;

    private InvoiceMetricsRequest(
            Optional<List<InvoiceMetricsGroupBy>> groupBy,
            Optional<List<String>> payerId,
            Optional<List<String>> vendorId,
            Optional<List<String>> approverId,
            Optional<List<String>> invoiceId,
            Optional<List<InvoiceStatus>> status,
            Optional<List<CurrencyCode>> currency,
            Optional<String> search,
            Optional<Boolean> excludePayables,
            Optional<Boolean> excludeReceivables,
            Optional<InvoiceMetricsPerDateGroupBy> returnByDate,
            Optional<InvoiceMetricsPerDateFrequency> returnByDateFrequency,
            Optional<String> approverCount,
            Optional<OffsetDateTime> startDate,
            Optional<OffsetDateTime> endDate,
            Optional<InvoiceDateFilter> dateType,
            Map<String, Object> additionalProperties) {
        this.groupBy = groupBy;
        this.payerId = payerId;
        this.vendorId = vendorId;
        this.approverId = approverId;
        this.invoiceId = invoiceId;
        this.status = status;
        this.currency = currency;
        this.search = search;
        this.excludePayables = excludePayables;
        this.excludeReceivables = excludeReceivables;
        this.returnByDate = returnByDate;
        this.returnByDateFrequency = returnByDateFrequency;
        this.approverCount = approverCount;
        this.startDate = startDate;
        this.endDate = endDate;
        this.dateType = dateType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Return invoice metrics grouped by.
     */
    @JsonProperty("groupBy")
    public Optional<List<InvoiceMetricsGroupBy>> getGroupBy() {
        return groupBy;
    }

    /**
     * @return Filter invoices by payer ID.
     */
    @JsonProperty("payerId")
    public Optional<List<String>> getPayerId() {
        return payerId;
    }

    /**
     * @return Filter invoices by vendor ID.
     */
    @JsonProperty("vendorId")
    public Optional<List<String>> getVendorId() {
        return vendorId;
    }

    /**
     * @return Filter invoices by assigned approver user ID.
     */
    @JsonProperty("approverId")
    public Optional<List<String>> getApproverId() {
        return approverId;
    }

    /**
     * @return Filter invoices by invoice ID or invoice foreign ID.
     */
    @JsonProperty("invoiceId")
    public Optional<List<String>> getInvoiceId() {
        return invoiceId;
    }

    /**
     * @return Invoice status to filter on
     */
    @JsonProperty("status")
    public Optional<List<InvoiceStatus>> getStatus() {
        return status;
    }

    /**
     * @return Currency to filter on
     */
    @JsonProperty("currency")
    public Optional<List<CurrencyCode>> getCurrency() {
        return currency;
    }

    /**
     * @return Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    /**
     * @return Only return invoices that are not payable by the entity. This will return only invoices that are receivable by the entity.
     */
    @JsonProperty("excludePayables")
    public Optional<Boolean> getExcludePayables() {
        return excludePayables;
    }

    /**
     * @return Only return invoices that are not receivable by the entity. This will return only invoices that are payable by the entity.
     */
    @JsonProperty("excludeReceivables")
    public Optional<Boolean> getExcludeReceivables() {
        return excludeReceivables;
    }

    /**
     * @return Return invoice metrics grouped by date.
     */
    @JsonProperty("returnByDate")
    public Optional<InvoiceMetricsPerDateGroupBy> getReturnByDate() {
        return returnByDate;
    }

    /**
     * @return Return invoice metrics grouped by date. Defaults to daily.
     */
    @JsonProperty("returnByDateFrequency")
    public Optional<InvoiceMetricsPerDateFrequency> getReturnByDateFrequency() {
        return returnByDateFrequency;
    }

    /**
     * @return Filter invoices by the number of approvers. Use exact number (e.g., 3) or range (e.g., &quot;&gt;3&quot;, &quot;&lt;5&quot;, &quot;&gt;=2&quot;, &quot;&lt;=4&quot;).
     */
    @JsonProperty("approverCount")
    public Optional<String> getApproverCount() {
        return approverCount;
    }

    /**
     * @return Start date filter. Defaults to CREATED_AT unless specified the dateType is specified
     */
    @JsonProperty("startDate")
    public Optional<OffsetDateTime> getStartDate() {
        return startDate;
    }

    /**
     * @return End date filter. Defaults to CREATED_AT unless specified the dateType is specified
     */
    @JsonProperty("endDate")
    public Optional<OffsetDateTime> getEndDate() {
        return endDate;
    }

    /**
     * @return Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.
     */
    @JsonProperty("dateType")
    public Optional<InvoiceDateFilter> getDateType() {
        return dateType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceMetricsRequest && equalTo((InvoiceMetricsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceMetricsRequest other) {
        return groupBy.equals(other.groupBy)
                && payerId.equals(other.payerId)
                && vendorId.equals(other.vendorId)
                && approverId.equals(other.approverId)
                && invoiceId.equals(other.invoiceId)
                && status.equals(other.status)
                && currency.equals(other.currency)
                && search.equals(other.search)
                && excludePayables.equals(other.excludePayables)
                && excludeReceivables.equals(other.excludeReceivables)
                && returnByDate.equals(other.returnByDate)
                && returnByDateFrequency.equals(other.returnByDateFrequency)
                && approverCount.equals(other.approverCount)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && dateType.equals(other.dateType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.groupBy,
                this.payerId,
                this.vendorId,
                this.approverId,
                this.invoiceId,
                this.status,
                this.currency,
                this.search,
                this.excludePayables,
                this.excludeReceivables,
                this.returnByDate,
                this.returnByDateFrequency,
                this.approverCount,
                this.startDate,
                this.endDate,
                this.dateType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<InvoiceMetricsGroupBy>> groupBy = Optional.empty();

        private Optional<List<String>> payerId = Optional.empty();

        private Optional<List<String>> vendorId = Optional.empty();

        private Optional<List<String>> approverId = Optional.empty();

        private Optional<List<String>> invoiceId = Optional.empty();

        private Optional<List<InvoiceStatus>> status = Optional.empty();

        private Optional<List<CurrencyCode>> currency = Optional.empty();

        private Optional<String> search = Optional.empty();

        private Optional<Boolean> excludePayables = Optional.empty();

        private Optional<Boolean> excludeReceivables = Optional.empty();

        private Optional<InvoiceMetricsPerDateGroupBy> returnByDate = Optional.empty();

        private Optional<InvoiceMetricsPerDateFrequency> returnByDateFrequency = Optional.empty();

        private Optional<String> approverCount = Optional.empty();

        private Optional<OffsetDateTime> startDate = Optional.empty();

        private Optional<OffsetDateTime> endDate = Optional.empty();

        private Optional<InvoiceDateFilter> dateType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceMetricsRequest other) {
            groupBy(other.getGroupBy());
            payerId(other.getPayerId());
            vendorId(other.getVendorId());
            approverId(other.getApproverId());
            invoiceId(other.getInvoiceId());
            status(other.getStatus());
            currency(other.getCurrency());
            search(other.getSearch());
            excludePayables(other.getExcludePayables());
            excludeReceivables(other.getExcludeReceivables());
            returnByDate(other.getReturnByDate());
            returnByDateFrequency(other.getReturnByDateFrequency());
            approverCount(other.getApproverCount());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            dateType(other.getDateType());
            return this;
        }

        /**
         * <p>Return invoice metrics grouped by.</p>
         */
        @JsonSetter(value = "groupBy", nulls = Nulls.SKIP)
        public Builder groupBy(Optional<List<InvoiceMetricsGroupBy>> groupBy) {
            this.groupBy = groupBy;
            return this;
        }

        public Builder groupBy(List<InvoiceMetricsGroupBy> groupBy) {
            this.groupBy = Optional.ofNullable(groupBy);
            return this;
        }

        public Builder groupBy(InvoiceMetricsGroupBy groupBy) {
            this.groupBy = Optional.of(Collections.singletonList(groupBy));
            return this;
        }

        /**
         * <p>Filter invoices by payer ID.</p>
         */
        @JsonSetter(value = "payerId", nulls = Nulls.SKIP)
        public Builder payerId(Optional<List<String>> payerId) {
            this.payerId = payerId;
            return this;
        }

        public Builder payerId(List<String> payerId) {
            this.payerId = Optional.ofNullable(payerId);
            return this;
        }

        public Builder payerId(String payerId) {
            this.payerId = Optional.of(Collections.singletonList(payerId));
            return this;
        }

        /**
         * <p>Filter invoices by vendor ID.</p>
         */
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<List<String>> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(List<String> vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        public Builder vendorId(String vendorId) {
            this.vendorId = Optional.of(Collections.singletonList(vendorId));
            return this;
        }

        /**
         * <p>Filter invoices by assigned approver user ID.</p>
         */
        @JsonSetter(value = "approverId", nulls = Nulls.SKIP)
        public Builder approverId(Optional<List<String>> approverId) {
            this.approverId = approverId;
            return this;
        }

        public Builder approverId(List<String> approverId) {
            this.approverId = Optional.ofNullable(approverId);
            return this;
        }

        public Builder approverId(String approverId) {
            this.approverId = Optional.of(Collections.singletonList(approverId));
            return this;
        }

        /**
         * <p>Filter invoices by invoice ID or invoice foreign ID.</p>
         */
        @JsonSetter(value = "invoiceId", nulls = Nulls.SKIP)
        public Builder invoiceId(Optional<List<String>> invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        public Builder invoiceId(List<String> invoiceId) {
            this.invoiceId = Optional.ofNullable(invoiceId);
            return this;
        }

        public Builder invoiceId(String invoiceId) {
            this.invoiceId = Optional.of(Collections.singletonList(invoiceId));
            return this;
        }

        /**
         * <p>Invoice status to filter on</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<List<InvoiceStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(List<InvoiceStatus> status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(InvoiceStatus status) {
            this.status = Optional.of(Collections.singletonList(status));
            return this;
        }

        /**
         * <p>Currency to filter on</p>
         */
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<List<CurrencyCode>> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(List<CurrencyCode> currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(CurrencyCode currency) {
            this.currency = Optional.of(Collections.singletonList(currency));
            return this;
        }

        /**
         * <p>Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.</p>
         */
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Only return invoices that are not payable by the entity. This will return only invoices that are receivable by the entity.</p>
         */
        @JsonSetter(value = "excludePayables", nulls = Nulls.SKIP)
        public Builder excludePayables(Optional<Boolean> excludePayables) {
            this.excludePayables = excludePayables;
            return this;
        }

        public Builder excludePayables(Boolean excludePayables) {
            this.excludePayables = Optional.ofNullable(excludePayables);
            return this;
        }

        /**
         * <p>Only return invoices that are not receivable by the entity. This will return only invoices that are payable by the entity.</p>
         */
        @JsonSetter(value = "excludeReceivables", nulls = Nulls.SKIP)
        public Builder excludeReceivables(Optional<Boolean> excludeReceivables) {
            this.excludeReceivables = excludeReceivables;
            return this;
        }

        public Builder excludeReceivables(Boolean excludeReceivables) {
            this.excludeReceivables = Optional.ofNullable(excludeReceivables);
            return this;
        }

        /**
         * <p>Return invoice metrics grouped by date.</p>
         */
        @JsonSetter(value = "returnByDate", nulls = Nulls.SKIP)
        public Builder returnByDate(Optional<InvoiceMetricsPerDateGroupBy> returnByDate) {
            this.returnByDate = returnByDate;
            return this;
        }

        public Builder returnByDate(InvoiceMetricsPerDateGroupBy returnByDate) {
            this.returnByDate = Optional.ofNullable(returnByDate);
            return this;
        }

        /**
         * <p>Return invoice metrics grouped by date. Defaults to daily.</p>
         */
        @JsonSetter(value = "returnByDateFrequency", nulls = Nulls.SKIP)
        public Builder returnByDateFrequency(Optional<InvoiceMetricsPerDateFrequency> returnByDateFrequency) {
            this.returnByDateFrequency = returnByDateFrequency;
            return this;
        }

        public Builder returnByDateFrequency(InvoiceMetricsPerDateFrequency returnByDateFrequency) {
            this.returnByDateFrequency = Optional.ofNullable(returnByDateFrequency);
            return this;
        }

        /**
         * <p>Filter invoices by the number of approvers. Use exact number (e.g., 3) or range (e.g., &quot;&gt;3&quot;, &quot;&lt;5&quot;, &quot;&gt;=2&quot;, &quot;&lt;=4&quot;).</p>
         */
        @JsonSetter(value = "approverCount", nulls = Nulls.SKIP)
        public Builder approverCount(Optional<String> approverCount) {
            this.approverCount = approverCount;
            return this;
        }

        public Builder approverCount(String approverCount) {
            this.approverCount = Optional.ofNullable(approverCount);
            return this;
        }

        /**
         * <p>Start date filter. Defaults to CREATED_AT unless specified the dateType is specified</p>
         */
        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * <p>End date filter. Defaults to CREATED_AT unless specified the dateType is specified</p>
         */
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.</p>
         */
        @JsonSetter(value = "dateType", nulls = Nulls.SKIP)
        public Builder dateType(Optional<InvoiceDateFilter> dateType) {
            this.dateType = dateType;
            return this;
        }

        public Builder dateType(InvoiceDateFilter dateType) {
            this.dateType = Optional.ofNullable(dateType);
            return this;
        }

        public InvoiceMetricsRequest build() {
            return new InvoiceMetricsRequest(
                    groupBy,
                    payerId,
                    vendorId,
                    approverId,
                    invoiceId,
                    status,
                    currency,
                    search,
                    excludePayables,
                    excludeReceivables,
                    returnByDate,
                    returnByDateFrequency,
                    approverCount,
                    startDate,
                    endDate,
                    dateType,
                    additionalProperties);
        }
    }
}
