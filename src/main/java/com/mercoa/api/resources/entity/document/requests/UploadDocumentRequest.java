/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.document.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.commons.types.DocumentType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UploadDocumentRequest.Builder.class)
public final class UploadDocumentRequest {
    private final String document;

    private final DocumentType type;

    private final Map<String, Object> additionalProperties;

    private UploadDocumentRequest(String document, DocumentType type, Map<String, Object> additionalProperties) {
        this.document = document;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Base64 encoded image or PDF of document. PNG, JPG, WEBP, and PDF are supported. 10MB max.
     */
    @JsonProperty("document")
    public String getDocument() {
        return document;
    }

    @JsonProperty("type")
    public DocumentType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UploadDocumentRequest && equalTo((UploadDocumentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UploadDocumentRequest other) {
        return document.equals(other.document) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.document, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DocumentStage builder() {
        return new Builder();
    }

    public interface DocumentStage {
        TypeStage document(String document);

        Builder from(UploadDocumentRequest other);
    }

    public interface TypeStage {
        _FinalStage type(DocumentType type);
    }

    public interface _FinalStage {
        UploadDocumentRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DocumentStage, TypeStage, _FinalStage {
        private String document;

        private DocumentType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UploadDocumentRequest other) {
            document(other.getDocument());
            type(other.getType());
            return this;
        }

        /**
         * <p>Base64 encoded image or PDF of document. PNG, JPG, WEBP, and PDF are supported. 10MB max.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("document")
        public TypeStage document(String document) {
            this.document = document;
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(DocumentType type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public UploadDocumentRequest build() {
            return new UploadDocumentRequest(document, type, additionalProperties);
        }
    }
}
