/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.paymentmethod.wallet;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.entity.paymentmethod.wallet.requests.AddWalletFundsRequest;
import com.mercoa.api.resources.entity.paymentmethod.wallet.requests.WithdrawWalletFundsRequest;
import com.mercoa.api.resources.paymentmethodtypes.types.WalletBalanceResponse;

public class WalletClient {
    protected final ClientOptions clientOptions;

    private final RawWalletClient rawClient;

    public WalletClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawWalletClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawWalletClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Get the available and pending balance of this entity's wallet. The specified payment method ID must refer to the entity's wallet.
     */
    public WalletBalanceResponse getWalletBalance(String entityId, String paymentMethodId) {
        return this.rawClient.getWalletBalance(entityId, paymentMethodId).body();
    }

    /**
     * Get the available and pending balance of this entity's wallet. The specified payment method ID must refer to the entity's wallet.
     */
    public WalletBalanceResponse getWalletBalance(
            String entityId, String paymentMethodId, RequestOptions requestOptions) {
        return this.rawClient
                .getWalletBalance(entityId, paymentMethodId, requestOptions)
                .body();
    }

    /**
     * Add funds to this wallet from a bank account (this transfer is D+2). The source payment method ID must refer to a bank account.
     */
    public void addWalletFunds(String entityId, String paymentMethodId, AddWalletFundsRequest request) {
        this.rawClient.addWalletFunds(entityId, paymentMethodId, request).body();
    }

    /**
     * Add funds to this wallet from a bank account (this transfer is D+2). The source payment method ID must refer to a bank account.
     */
    public void addWalletFunds(
            String entityId, String paymentMethodId, AddWalletFundsRequest request, RequestOptions requestOptions) {
        this.rawClient
                .addWalletFunds(entityId, paymentMethodId, request, requestOptions)
                .body();
    }

    /**
     * Withdraw funds from this wallet to a bank account (this transfer is D+0). The destination payment method ID must refer to a bank account.
     */
    public void withdrawWalletFunds(String entityId, String paymentMethodId, WithdrawWalletFundsRequest request) {
        this.rawClient.withdrawWalletFunds(entityId, paymentMethodId, request).body();
    }

    /**
     * Withdraw funds from this wallet to a bank account (this transfer is D+0). The destination payment method ID must refer to a bank account.
     */
    public void withdrawWalletFunds(
            String entityId,
            String paymentMethodId,
            WithdrawWalletFundsRequest request,
            RequestOptions requestOptions) {
        this.rawClient
                .withdrawWalletFunds(entityId, paymentMethodId, request, requestOptions)
                .body();
    }
}
