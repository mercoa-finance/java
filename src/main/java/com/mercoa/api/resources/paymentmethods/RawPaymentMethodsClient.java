/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethods;

import com.mercoa.api.core.ClientOptions;
import com.mercoa.api.core.MercoaApiException;
import com.mercoa.api.core.MercoaException;
import com.mercoa.api.core.MercoaHttpResponse;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.core.QueryStringMapper;
import com.mercoa.api.core.RequestOptions;
import com.mercoa.api.resources.paymentmethods.requests.FindPaymentMethodsRequest;
import com.mercoa.api.resources.paymentmethodtypes.types.PaymentMethodWithEntityFindResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawPaymentMethodsClient {
    protected final ClientOptions clientOptions;

    public RawPaymentMethodsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public MercoaHttpResponse<PaymentMethodWithEntityFindResponse> find() {
        return find(FindPaymentMethodsRequest.builder().build());
    }

    public MercoaHttpResponse<PaymentMethodWithEntityFindResponse> find(FindPaymentMethodsRequest request) {
        return find(request, null);
    }

    public MercoaHttpResponse<PaymentMethodWithEntityFindResponse> find(
            FindPaymentMethodsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("paymentMethods");
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startingAfter", request.getStartingAfter().get(), false);
        }
        if (request.getType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "type", request.getType().get(), true);
        }
        if (request.getEntityId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityId", request.getEntityId().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MercoaHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaymentMethodWithEntityFindResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new MercoaApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MercoaException("Network error executing HTTP request", e);
        }
    }
}
